<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021书目</title>
    <url>/2021%E4%B9%A6%E7%9B%AE/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="d72608620c6599b3d84ccd72096f8bc624dcdb099b4dd14af78166532c09298b">a756220a6413262c08d2e52bbc7378bf4e656ee4729e1645685e19410990e5e9e947a43c197d19fec0cce78353791127a0f059bd9b784d76febcfea45703212ffc89c60ff585211da4d0baa15413c9f633a1c872b560599a8fabc5e9216f46d8b885b5745e0fdb4710c9814371a5fd8b0a63703e296afe2741f218ca1a16b69e37b12a196c5a415dce5f71da9b363065afcc089585de57734455b3e8d93226ae99bbf7a7aa844e997ef779954405f7eb21a0af793db209319724aab0a11c9bff00d6b90f563b38efbe2662851a5f5fa7ca6afb9fe1278f9c6d504b4768bfdbb116cd0e5321f3cd706ecd1fda6312847df8dc89f15f5329724b16acff459051c3c2b5e7ea7d88cc4ab6b44fc14a35e415c88d95368618fb2da39dc168ad7b3f557232c77ff44490d376996ab348506d1ee9192aee14f3429d133e3f68bdfa7fe803158bead11637d641b168bb8aaf1c0bee528c93143734c4da8289aadb26dda8b914ddf73695770c4198959077bbc31b3ba9b53d7476ef2478b81bbb02df8ed2a827ec8312633438f5f2dfd24b5f7a07094a15efc7ea983f7cbb812f4515ad45d912e17d7441353dd448ee9601e2a3c8649a50bcfa0c0cbd08722af0b9babe85a8c45bd65bc7d11ab7a0419ab5ab45b747fa2ed7c312088ed1be88f589f7769013176433366b293a075d9f9bfadeb5ecada92ff17dbc58c3c3dcee16964da1e90e31c1080fe257d7b7af1a6c2956ce22d352596823f0da4068cf9a5248cd07ba30755dd3fe60f99376c054a5f083732cb40b002a1472749f137fc9fb6efe64b59dddbfb8f1f6922272ce64fc387be5dbc04910310bf7d93625a6aeac423975d29fbac9a969b0d0772b6e0de8c4e4bc9be16abbf4a0ab6ad962680ab178ca5215a67a8982b9f926162ea3d2a79e27126c30b60c4a9517d4420d32850b47f007ce74c9ec15c42124889f8c26071612c4a9914d552fddd9d0d4b395b4e283a0659de8471adba1132b01eacd3aa5c20774c47280042e932a77619c203df0cf4dce6dbf0a183a31db5d4aad72f95a4094a8bb701b693cc25abc61d9fe950f8422718691e267a7ebee995c43626da526fe575070abea18155702d0e0cf994a47225c55c77e73ed6d4704314ccff9e60473890c75394db3dc5039f932199ecaa951a571141e21f59c5f4ce0134b1f33af8b1c01e01b7121ea2385c0579010de416f5c2dcaaab93e7c431916b5334f6be0269a162c00cf81c5b42a65be60ce7c33e1b8d1f0dd8677fec7d5e93f0faf164deeff585f20b35f6ecdef7c11415d4df0fac1bee9d85958bc2f1e369c6b23a1beb8786c49a352b5eeef23a037ec1d76affc9d81915987e904f33ca57445a320c061ab652889be97460e62ed3e693346b858649e9abea588fd588c9b472cebc12b2f70a84f1f6ff8e780bc7466aba5567c44b56fdd8827b093d9d4e8030f9bd493d3b31f21ab38596547fc1b305470293a03cdbfcaa1ca4f3c70480f30c5e6045b800db734e130e1815f84aa1aae60570d848efbfaedb8b673a64673d9e3569017bf418b155a4d8d67c8f37137926b5f51fbf7e317501c0e857458de5cc46eb1b637d7f606f791277be99149ac8bdea909fc2dcac5e506766a6d82ca2426360909016870dd8683792b14376ab6a5d3b7fabde9b161e00366204a2942bcdcf2ada595728edbc1d781b49a565dd68b8cb006cf96cce6699e4e3730cc125ceba8bdddaabf93ab81d8770a5d3440b3ebf1c0de7e311487de94a1da060f7f62adf962b451b19ef70bb3d69cc02f287106d4dc6e469d109f27bb6bb15c8e6f9799b0da87894feb146ea3910bf86014c4f8fbec6ad217e15e7187b06f44985e8bc2ebcfaa98b729110123085dcda4ab8d03124a16ad6337e42eaae61939c5a9532d00caecb58214445d4137f69deb73ec9431369efb7635685d663343a44f25750249eb871f932d0d69f3962607450963b81b2bafdbc2398cdf1c21997d215718c7fed212dbb27c28f8bc4387444657457d2bd9146a591794631cea833070b790656ec5104fa51f2bd4179ba358568be86c7062df49c39b7563b49ba969d54c8fa80874e66b00f7097a020f5310cc4ab71a1c892ecda3cccc31ce2ad595a68cbecb60d10b34b4a568dde2714f7adc3d806cf04cb3bda18bb0a3704f6e0ff7cce2d18d01aac9775b4f10ac9b4f724f5a5cd5263c2db48d92e6b9af4f5bd7173c1c55557516523b5d172e39d512c0b0d891e1f41fd62d0ee92c321678aec092b6590e17bc86e209582095b3a925bb951a1d82178d375dabbd2548b89e3a7716b8d90c252ef48023f54637f2e1da16d6fe264ae317bbc16193e774e6596fd4d9567a7fd62f0e07e07e8963923ad412b11a602802e02dde8a6bd776fa5b89fef0b35104e99295f4cb8398bdefb4634d58d5f50e6e93f7b6f32e91a2025961965a5ec96c94dede659b9c9616bc6106760a97ab73763686916468db2510ec019a13ba88c4eb10596dc1754e03066f3c7ce1ff14b24e0097988acd1b34fef11f17757975498393eafa34793a27aa4d15816b9866fc57e1129ab07dbb0e91c91a22f3d333d3148482ce306d2b016765a0b6327f211c42628f73263f33b3012d79480a351abd64a7460652d3ee6ef57e2a690d12f3b29a009ad44ec8c2daf4da65627e841be468026f63f84db055f1fbe0c8dfdda86ed42460ba9d05429c34d376a02a5d88996d5b0309b064a7a2dc8896cbbed2b93f1f4562293bb6224bb1f65e01f1422b366c0ae620adaaaed87302e10f7a331e71c82dc67a7a1292be40cd275fa67bfca26c8f34e53e60c3f8765b2161599695fec1d9bb21504314ad34b77f7f4e71b0b6f7c0a2a8376b0238bb308635645d7bd09537c451938ae5c3697e1a730ae530aa3bcb6622f0b4742760805f19207e9097d4eb702aeb8bbfc3099a14d636b537e2092923d52e808e6517d0dfcb91d23e98d6912677c20d84eef9fa41ffdd209fc383e80e36dd6ad03db0e70ce187a838ebfefacc92fdc7c3a8dbc1954c6ed9feeab36d263dd64e9df034e428b4c4765c0c7d832c89aec24989d9e195c8b345b5b79fcb0a53fd3476b3e35f7ebf8af65cf57f94b2e0a76169e53343a7efce3ec90251e8314afd65ccacad4b6c9e6d8962bc16cbb51f24cbaff1c4ae6acfb45dabea3272cd3944d588d5fdf4304a868c4e849505cb9c64eec5cc20c94744cda5e3deb2031b2ea6b2150a10aa628583f7d22c84d0e3e95f8d800e712a5d2374bd406df9601bcb57629295eecb55cbc69e0890b6ef5567bc77def2d33963ce1497aa03ba1d0e9bb78c88c891d9dd011f52d3204df77a24b2c2a0207e9f01d06d25dd33ae6ae8bb58dbb9c391a772af11e25972457eac1e538984f9fd42616e35dc627b805b47631ae81a0fdb40cc310a759bcce0bbf7371fb5e830f849e2f04139fa4e9afb31dbffbcb57f05037c78aeedf801f6f14f9037595c04138c940797a5c1aada5942171c62ebb622482e5d6b88155726ebbf353d7b60b5fe8057b12272df694e0e662d5b89bb9bb9f3a5755fd17f8c47b6f4ca121890e3e0cade4b15772ab09f7cc587aeea449b61eee46f2f7ec4b4b86a1ad11fc062e35a5589945e2de8cc6931ce80f647c9a6114af668283c2702c8196479c5ab5901478ea7fff7d08fb2e386dbf65291fbe7a7eab87776c9efc216f1c6c81bac8e07cb65409eb5ec51fafcf8c42e5e6728f9fc20028fba5eec1b9d15f65f1eb0bc9e05803de7e53447af4028ab380eff3aab7d0d53d8ccbe6d2d7e4c77c69855da4216061d9c4decc204f84fb514965c8826323cac665f02076eee3d8455715bfa86fdb503167212b0071a09c7f030650bbf72a1572ef5e40415c0af56a6695bf17db57a2e359c025e34a8b0302c6c478c1c63951765395178df330da60f1cac902b8f9aed9c35ed7c4eb788fee744372ee60174ad779eb330c65b09fd540bbdbd4c9edc71d36e30272524e279f81c36f41e0ffabd66c5c4351cb21a2fcd0e8bc03e76f2fc95d3060617e382da9d5a6b9e3b9423c19fee41eaecc740e38d7e390b3658c6ad9a7d440417c6eebf3ee367d9cf988a6f264a1afe9a3609ee6a41ef3e131dc1f851c41f2e99b39f92d2181ec2b9b467459b9d464989fbb64bfebdc5595f0feea070c0bc7fb576e0eac3348c44a0702445b1df08576fcf87c07c95cfd34819bdd08587cf35db57888e6655fb13315529f9dd668f6277c11b693155fee94d9ae08519b3988fa365ddeef135b8dddf7349824d9862f3181fc6009ff1aae9095f88ebfeebe0716e35abe31de890cb742b0c3179fab2cf93c9baf45974adba87db325fed30eeb0b2920fd44af152bf9d9b7b235c2d775c318f1e4c33518af15e638b81f22fa53eaae4befe85886b8cdfd9dc20abaf0a41079a23553bcf5e8865f2a9b91685a70e1fac91f7e052590689483cdbd228eda1c4a3c83c2d818f9950bd404c302afe77e50e61f193b9b2d0160753501d63e7c0d20da9d9b9be9e1e1822223fe4ae59ff5df3f34c911c12269ead19660203575311060e9603fb9ba74c9f50b6e95b14c546d2c789d418e120124bc433cc3df348447dcbfde5bc5ec00dc507ff03fdc7272403834bbf852c6473a64ccd7a3045e71f37bc14b5344f17392eb3836665b463fa102c4ead6f9116b6d715ed752a71c19d95bee1ad92e3f6d6c76b0e812de46992016a09e851ffe00b7564821a5f8dd08046f0564a89fcd1ed9d02aaa140c078b836179665a58d4f44528720d2daa3fe5d5ac0d84956eb4026360e506bedaf100fc83c5d206c95</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入阅读密码~</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>北漂</tag>
        <tag>阅读</tag>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>1</title>
    <url>/1/</url>
    <content><![CDATA[<p>我又输了。</p>
<p>我们都是不懂得吸取教训的人。</p>
<img src="/1/1.jpg" class="">
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>满纸荒唐言</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot面向切面AOP</title>
    <url>/SpringBoot%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2AOP/</url>
    <content><![CDATA[<blockquote>
<p>你要成为想象中的样子，这件事，一步也不能退。</p>
</blockquote>
<a id="more"></a>

<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>AOP是动态代理思想实现的典型例子，一般在项目中主要是做一些统一性的日志或者错误的处理。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Action &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot; </span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注解式切点（侵入式，需要在方法上添加自定义注解）</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.stack.config.annotation.Action)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logPointCut</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义切点表达式(非侵入式，一般企业开发更推荐使用这样的方式)</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.stack.config.controller.TaskController.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">controllerPointCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 注解式环绕方法</span></span><br><span class="line">    <span class="meta">@Around(&quot;logPointCut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span> <span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;方法执行开始。。。&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取方法名</span></span><br><span class="line">            Signature signature = point.getSignature();</span><br><span class="line">            System.out.println(<span class="string">&quot;方法名：&quot;</span>+signature.getName());</span><br><span class="line">            Object[] args = point.getArgs();</span><br><span class="line">            System.out.println(<span class="string">&quot;请求参数：&quot;</span>+ JSON.toJSONString(args));</span><br><span class="line">            <span class="comment">// 执行方法</span></span><br><span class="line">            result = point.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 切点表达式的环绕方法</span></span><br><span class="line">    <span class="meta">@Around(&quot;controllerPoint()&amp;&amp; args(arg)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">controllerMethodAround</span><span class="params">(ProceedingJoinPoint point,String arg)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(arg);</span><br><span class="line">        Signature signature = point.getSignature();</span><br><span class="line">        System.out.println(signature.getName());</span><br><span class="line">        Object result = point.proceed();</span><br><span class="line"></span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountImpl</span> <span class="keyword">implements</span> <span class="title">ICount</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 注解式的实现</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Action</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 切点表达式的实现</span></span><br><span class="line"><span class="comment">//@Pointcut(&quot;execution(* com.stack.config.controller.TaskController.*(..))&quot;)</span></span><br><span class="line"><span class="comment">// 符合该(* com.stack.config.controller.TaskController.*(..))条件下的方法都会被做切面处理，当然这个再继续定制化，例如</span></span><br><span class="line"><span class="comment">//根据有无参或者是参数的类型进行是否做切面</span></span><br></pre></td></tr></table></figure>

<h1 id="切点表达式"><a href="#切点表达式" class="headerlink" title="切点表达式"></a>切点表达式</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">execution (* com.sample.service.impl..*.*(..))</span><br></pre></td></tr></table></figure>

<p>整个表达式可以分为五个部分：</p>
<ul>
<li><p>execution(): 表达式主体。</p>
</li>
<li><p>第一个<em>号：表示返回类型，</em>号表示所有的类型。</p>
</li>
<li><p>包名：表示需要拦截的包名，后面的两个句点表示当前包和当前包的所有子包，com.sample.service.impl包、子孙包下所有类的方法。</p>
</li>
<li><p>第二个<em>号：表示类名，</em>号表示所有的类。</p>
</li>
<li><p>*<em>(..):最后这个星号表示方法名，</em>号表示所有的方法，后面括弧里面表示方法的参数，两个句点表示任何参数。</p>
</li>
</ul>
<p><a href="https://blog.csdn.net/lang_niu/article/details/51559994">https://blog.csdn.net/lang_niu/article/details/51559994</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>aop</tag>
      </tags>
  </entry>
  <entry>
    <title>java构建树</title>
    <url>/java%E6%9E%84%E5%BB%BA%E6%A0%91/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote>
<p>在项目中，我们经常涉及单张表数据进行树形目录结构展示（即具有层级关系的数据结构），比如菜单层级展示、商品分类展示等。</p>
</blockquote>
<a id="more"></a>

<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><blockquote>
<p>单张表之间要具备层级关系，必然会有能体现父子之间的字段，比如常见的<strong>id</strong>和<strong>parentId</strong><br>比如这样一张表<br><img src="https://img-blog.csdnimg.cn/20210417122242878.png" alt="表结构"><br>pid为0时即为最高层级，pid为 1366的是id为1366的孩子，在上面的体现是<strong>裤子和上衣都在衣服这一个分类下面</strong><br>要实现这张表树形结构的展示，我们一方面得在该表对应的实体类里添加一个自身的集合childList作为其孩子的集合。</p>
</blockquote>
<h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><blockquote>
<p>这里我是将它封装成一个工具类使用。<br>注意：这里默认表里的父级字段为 <strong>parentId</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 构建树的时候需要实体继承此类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 吴焕业</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/15 17:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">C</span> <span class="keyword">extends</span> <span class="title">TreeNode</span>&lt;?&gt;&gt;</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 父id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String parentId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  子节点j集合</span></span><br><span class="line"><span class="comment">     * 	非数据库字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;TreeNode&gt; children;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>工具类实现树形结构的展示（递归思想找子节点）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span>: 生成树工具(根节点可有多个)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span> 吴焕业</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> treeNodes 所有节点（所有数据）</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> parentId  指定根节点的唯一标识</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 2020/10/15 18:01</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span>  <span class="keyword">static</span> &lt;T extends TreeNode&gt;<span class="function">List&lt;T&gt; <span class="title">build</span><span class="params">(List&lt;T&gt; treeNodes, String parentId)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (parentId == <span class="keyword">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       List&lt;T&gt; rootNodes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span> (T t : treeNodes)&#123;</span><br><span class="line">           <span class="keyword">if</span> (parentId.equals(t.getParentId()))&#123;</span><br><span class="line">               <span class="comment">//得到根节点</span></span><br><span class="line">               rootNodes.add(t);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (T t : rootNodes)&#123;</span><br><span class="line">           t.setChildren(getChildNodes(t,treeNodes));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> rootNodes;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span>: 获得子节点</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span> 吴焕业</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> t</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> treeNodes</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 2020/10/6 18:27</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> &lt;T extends TreeNode&gt;<span class="function">List&lt;TreeNode&gt; <span class="title">getChildNodes</span><span class="params">(TreeNode t,List&lt;T&gt; treeNodes)</span></span>&#123;</span><br><span class="line">       List&lt;TreeNode&gt; childNodes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span> (TreeNode t1 : treeNodes)&#123;</span><br><span class="line">           <span class="keyword">if</span> (t1.getParentId().equals(t.getId()))&#123;</span><br><span class="line">               childNodes.add(t1);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (childNodes.size() == <span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (TreeNode t1 : childNodes)&#123;</span><br><span class="line">           t1.setChildren(getChildNodes(t1,treeNodes));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> childNodes;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote>
<p>要实现树形结构的步骤：</p>
<ul>
<li>表设计要有父子级关系（一般用 id 和 parentId）</li>
<li>实体要新增 子节点 的集合变量，一般用List接收</li>
<li>查找获得所有符合要求的数据，通过遍历得到 <strong>父节点集合</strong>，遍历<strong>父节点集合</strong>，遍历<strong>子节点结合</strong>，父节点的id和子节点的父id相等时，说明该节点数属于当前父节点的孩子，将其放入父节点的孩子集合中，遍历结束后，将子节点集合赋值给 <strong>集合变量</strong>。（这里用递归思想实现）</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>utils</tag>
      </tags>
  </entry>
  <entry>
    <title>回首山河已秋</title>
    <url>/%E5%9B%9E%E9%A6%96%E5%B1%B1%E6%B2%B3%E5%B7%B2%E7%A7%8B/</url>
    <content><![CDATA[<blockquote>
<p>忽有故人心上过，回首，山河已秋。</p>
<p>——2021立秋</p>
</blockquote>
<a id="more"></a>

<img src="/%E5%9B%9E%E9%A6%96%E5%B1%B1%E6%B2%B3%E5%B7%B2%E7%A7%8B/%E8%BF%BD%E6%A2%A6%E4%BA%BA.jpg" class="" title="追梦人">

<img src="/%E5%9B%9E%E9%A6%96%E5%B1%B1%E6%B2%B3%E5%B7%B2%E7%A7%8B/%E4%B9%B1%E4%B8%AD%E6%B1%82%E6%97%A0.jpg" class="" title="This is an example image">

<img src="/%E5%9B%9E%E9%A6%96%E5%B1%B1%E6%B2%B3%E5%B7%B2%E7%A7%8B/%E4%BA%89%E6%97%A0.jpg" class="" title="This is an example image">

<img src="/%E5%9B%9E%E9%A6%96%E5%B1%B1%E6%B2%B3%E5%B7%B2%E7%A7%8B/%E5%A4%A9%E8%A1%8C%E5%81%A5.jpg" class="" title="This is an example image">

<img src="/%E5%9B%9E%E9%A6%96%E5%B1%B1%E6%B2%B3%E5%B7%B2%E7%A7%8B/%E6%9C%9D%E5%9C%A3.jpg" class="" title="This is an example image">
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>满纸荒唐言</tag>
        <tag>字</tag>
      </tags>
  </entry>
  <entry>
    <title>基于hexo搭建个人博客</title>
    <url>/%E5%9F%BA%E4%BA%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<blockquote>
<p>百金买骏马，千金买美人；万金买高爵，何处买青春？ —— 屈原</p>
</blockquote>
<a id="more"></a>

<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>1、 安装git    (因为git很早之前已安装，本文在这里就不说明了)</p>
<p>2、 安装nodejs</p>
<p>3、安装 hexo</p>
<p>4、正式搭建</p>
<h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><p>因为hexo依赖于nodejs，所以得先下载nodejs。下载地址：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a>  </p>
<img src="/%E5%9F%BA%E4%BA%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/nodejs.png" class="" title="This is an example image">

<p>下载下来是一个安装包，双击一路【next】默认即可（安装位置可自选）</p>
<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>在任意位置创建一个文件夹，自定义命名，这里以<strong>blog</strong>命名,在当前位置**(即blog的上一级目录)<strong>鼠标右击选择</strong>git bash here**,因为国内要直接下载安装 hexo 会很慢很慢，所以</p>
<ul>
<li>输入一下命令安装 淘宝镜像</li>
</ul>
<blockquote>
<p> npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p>
</blockquote>
<ul>
<li>安装成功后，输入命令开始安装<strong>hexo</strong></li>
</ul>
<blockquote>
<p>cnpm install -g hexo-cli</p>
</blockquote>
<ul>
<li>安装成功后，<strong>初始化blog</strong></li>
</ul>
<blockquote>
<p>hexo init blog  #这里的blog是你之前新建的文件夹名，比如你命名为test, 则这里的命令为 hexo init test</p>
</blockquote>
<ul>
<li><p>初始化完成后，进入blog文件夹，发现生成很多文件</p>
<img src="/%E5%9F%BA%E4%BA%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E5%8D%9A%E5%AE%A2%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" class="" title="This is an example image">

</li>
</ul>
<blockquote>
<blockquote>
<p>node_modules:各依赖    source:源码     themes:存放博客主题    _config.yml:博客配置文件</p>
</blockquote>
</blockquote>
<h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>经过前面的几步，准备工作已完成。下面开始正式搭建及美化部署。</p>
<blockquote>
<p>1、cd blog 进入blog文件夹</p>
<p>2、鼠标右键<strong>gitbash here</strong>,输入</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>该命令为启动服务命令，启动后，本地浏览器访问<strong>localhost:4000</strong>查看效果。</p>
<hr>
<h2 id="以github作为服务器将本地博客推至github上面"><a href="#以github作为服务器将本地博客推至github上面" class="headerlink" title="以github作为服务器将本地博客推至github上面"></a>以github作为服务器将本地博客推至github上面</h2><ul>
<li>通过以上几个步骤已经实现了在本地浏览器访问博客，接下来说明如何推到远端并访问。</li>
</ul>
<h3 id="注册一个github账号http-github-com"><a href="#注册一个github账号http-github-com" class="headerlink" title="注册一个github账号http://github.com/"></a>注册一个github账号<a href="http://github.com/">http://github.com/</a></h3><ul>
<li>登录进入github中，创建仓库，即<strong>new repostory</strong></li>
</ul>
<img src="/%E5%9F%BA%E4%BA%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93.png" class="" title="This is an example image">

<ul>
<li>复制该仓库的链接</li>
</ul>
<img src="/%E5%9F%BA%E4%BA%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E5%A4%8D%E5%88%B6%E9%93%BE%E6%8E%A5.png" class="" title="This is an example image">

<ul>
<li>回到blog文件夹，打开_comfig.yml文件，编辑deploy下的这几个参数值，没有的自己加上，把<strong>repo</strong>的地址改为自己的</li>
</ul>
<img src="/%E5%9F%BA%E4%BA%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/cofig%E7%BC%96%E8%BE%91%E5%8F%82%E6%95%B0.png" class="" title="This is an example image">

<ul>
<li>在blog文件夹下<strong>gitbash here</strong>,依次输入</li>
</ul>
<blockquote>
<p>cnpm install hexo-deployer-git –save  #安装git部署插件</p>
<p>hexo clean  #清理缓存，实际上是把public文件夹删除</p>
<p>hexo g  #重新生成public文件夹</p>
<p>hexo s  #启动服务，本地查看是否成功</p>
<p>hexo d  # 将本地博客推至远程仓库中，推送完成之后浏览器访问<strong>你的github用户名.github.io</strong>查看效果</p>
</blockquote>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>复盘</title>
    <url>/%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ad2be610087a10dc00b32d1b3a754e6274534b0f2a0ad9dcaa88e006ab505858"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入阅读密码~</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>复盘</tag>
      </tags>
  </entry>
  <entry>
    <title>复盘二</title>
    <url>/%E5%A4%8D%E7%9B%98%E4%BA%8C/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2df53a5ef74624e7dafe2d7b66bec2e92d85454f341f2e82c05a03f2926220c9"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入阅读密码~</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>复盘</tag>
      </tags>
  </entry>
  <entry>
    <title>工具类</title>
    <url>/%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<blockquote>
<p>积累一下有意思的工具</p>
</blockquote>
<a id="more"></a>

<h3 id="名字随机生成器"><a href="#名字随机生成器" class="headerlink" title="## 名字随机生成器"></a>## 名字随机生成器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        String[] Surname = &#123;<span class="string">&quot;赵&quot;</span>,<span class="string">&quot;钱&quot;</span>,<span class="string">&quot;孙&quot;</span>,<span class="string">&quot;李&quot;</span>,<span class="string">&quot;周&quot;</span>,<span class="string">&quot;吴&quot;</span>,<span class="string">&quot;郑&quot;</span>,<span class="string">&quot;王&quot;</span>,<span class="string">&quot;冯&quot;</span>,<span class="string">&quot;陈&quot;</span>,<span class="string">&quot;褚&quot;</span>,<span class="string">&quot;卫&quot;</span>,<span class="string">&quot;蒋&quot;</span>,<span class="string">&quot;沈&quot;</span>,<span class="string">&quot;韩&quot;</span>,<span class="string">&quot;杨&quot;</span>,<span class="string">&quot;朱&quot;</span>,<span class="string">&quot;秦&quot;</span>,<span class="string">&quot;尤&quot;</span>,<span class="string">&quot;许&quot;</span>,             <span class="string">&quot;何&quot;</span>,<span class="string">&quot;吕&quot;</span>,<span class="string">&quot;施&quot;</span>,<span class="string">&quot;张&quot;</span>,<span class="string">&quot;孔&quot;</span>,<span class="string">&quot;曹&quot;</span>,<span class="string">&quot;严&quot;</span>,<span class="string">&quot;华&quot;</span>,<span class="string">&quot;金&quot;</span>,<span class="string">&quot;魏&quot;</span>,<span class="string">&quot;陶&quot;</span>,<span class="string">&quot;姜&quot;</span>,<span class="string">&quot;戚&quot;</span>,<span class="string">&quot;谢&quot;</span>,<span class="string">&quot;邹&quot;</span>,<span class="string">&quot;喻&quot;</span>,<span class="string">&quot;柏&quot;</span>,<span class="string">&quot;水&quot;</span>,<span class="string">&quot;窦&quot;</span>,<span class="string">&quot;章&quot;</span>,<span class="string">&quot;云&quot;</span>,<span class="string">&quot;苏&quot;</span>,<span class="string">&quot;潘&quot;</span>,<span class="string">&quot;葛&quot;</span>,<span class="string">&quot;奚&quot;</span>,<span class="string">&quot;范&quot;</span>,<span class="string">&quot;彭&quot;</span>,<span class="string">&quot;郎&quot;</span>,     <span class="string">&quot;鲁&quot;</span>,<span class="string">&quot;韦&quot;</span>,<span class="string">&quot;昌&quot;</span>,<span class="string">&quot;马&quot;</span>,<span class="string">&quot;苗&quot;</span>,<span class="string">&quot;凤&quot;</span>,<span class="string">&quot;花&quot;</span>,<span class="string">&quot;方&quot;</span>,<span class="string">&quot;俞&quot;</span>,<span class="string">&quot;任&quot;</span>,<span class="string">&quot;袁&quot;</span>,<span class="string">&quot;柳&quot;</span>,<span class="string">&quot;酆&quot;</span>,<span class="string">&quot;鲍&quot;</span>,<span class="string">&quot;史&quot;</span>,<span class="string">&quot;唐&quot;</span>,<span class="string">&quot;费&quot;</span>,<span class="string">&quot;廉&quot;</span>,<span class="string">&quot;岑&quot;</span>,<span class="string">&quot;薛&quot;</span>,<span class="string">&quot;雷&quot;</span>,<span class="string">&quot;贺&quot;</span>,<span class="string">&quot;倪&quot;</span>,<span class="string">&quot;汤&quot;</span>,<span class="string">&quot;滕&quot;</span>,<span class="string">&quot;殷&quot;</span>,             <span class="string">&quot;罗&quot;</span>,<span class="string">&quot;毕&quot;</span>,<span class="string">&quot;郝&quot;</span>,<span class="string">&quot;邬&quot;</span>,<span class="string">&quot;安&quot;</span>,<span class="string">&quot;常&quot;</span>,<span class="string">&quot;乐&quot;</span>,<span class="string">&quot;于&quot;</span>,<span class="string">&quot;时&quot;</span>,<span class="string">&quot;傅&quot;</span>,<span class="string">&quot;皮&quot;</span>,<span class="string">&quot;卞&quot;</span>,<span class="string">&quot;齐&quot;</span>,<span class="string">&quot;康&quot;</span>,<span class="string">&quot;伍&quot;</span>,<span class="string">&quot;余&quot;</span>,<span class="string">&quot;元&quot;</span>,<span class="string">&quot;卜&quot;</span>,<span class="string">&quot;顾&quot;</span>,<span class="string">&quot;孟&quot;</span>,<span class="string">&quot;平&quot;</span>,<span class="string">&quot;黄&quot;</span>,<span class="string">&quot;和&quot;</span>,    <span class="string">&quot;穆&quot;</span>,<span class="string">&quot;萧&quot;</span>,<span class="string">&quot;尹&quot;</span>,<span class="string">&quot;姚&quot;</span>,<span class="string">&quot;邵&quot;</span>,<span class="string">&quot;湛&quot;</span>,<span class="string">&quot;汪&quot;</span>,<span class="string">&quot;祁&quot;</span>,<span class="string">&quot;毛&quot;</span>,<span class="string">&quot;禹&quot;</span>,<span class="string">&quot;狄&quot;</span>,<span class="string">&quot;米&quot;</span>,<span class="string">&quot;贝&quot;</span>,<span class="string">&quot;明&quot;</span>,<span class="string">&quot;臧&quot;</span>,<span class="string">&quot;计&quot;</span>,<span class="string">&quot;伏&quot;</span>,<span class="string">&quot;成&quot;</span>,<span class="string">&quot;戴&quot;</span>,<span class="string">&quot;谈&quot;</span>,<span class="string">&quot;宋&quot;</span>,<span class="string">&quot;茅&quot;</span>,<span class="string">&quot;庞&quot;</span>,<span class="string">&quot;熊&quot;</span>,<span class="string">&quot;纪&quot;</span>,<span class="string">&quot;舒&quot;</span>, <span class="string">&quot;屈&quot;</span>,<span class="string">&quot;项&quot;</span>,<span class="string">&quot;祝&quot;</span>,<span class="string">&quot;董&quot;</span>,<span class="string">&quot;梁&quot;</span>,<span class="string">&quot;杜&quot;</span>,<span class="string">&quot;阮&quot;</span>,<span class="string">&quot;蓝&quot;</span>,<span class="string">&quot;闵&quot;</span>,<span class="string">&quot;席&quot;</span>,<span class="string">&quot;季&quot;</span>&#125;;</span><br><span class="line">        String girl = <span class="string">&quot;秀娟英华慧巧美娜静淑惠珠翠雅芝玉萍红娥玲芬芳燕彩春菊兰凤洁梅琳素云莲真环雪荣爱妹霞香月莺媛艳瑞凡佳嘉琼勤珍贞莉桂娣叶璧璐娅琦晶妍茜秋珊莎锦黛青倩婷姣婉娴瑾颖露瑶怡婵雁蓓纨仪荷丹蓉眉君琴蕊薇菁梦岚苑婕馨瑗琰韵融园艺咏卿聪澜纯毓悦昭冰爽琬茗羽希宁欣飘育滢馥筠柔竹霭凝晓欢霄枫芸菲寒伊亚宜可姬舒影荔枝思丽&quot;</span> ;</span><br><span class="line">        String boy = <span class="string">&quot;伟刚勇毅俊峰强军平保东文辉力明永健世广志义兴良海山仁波宁贵福生龙元全国胜学祥才发武新利清飞彬富顺信子杰涛昌成康星光天达安岩中茂进林有坚和彪博诚先敬震振壮会思群豪心邦承乐绍功松善厚庆磊民友裕河哲江超浩亮政谦亨奇固之轮翰朗伯宏言若鸣朋斌梁栋维启克伦翔旭鹏泽晨辰士以建家致树炎德行时泰盛雄琛钧冠策腾楠榕风航弘&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> index = random.nextInt(Surname.length - <span class="number">1</span>);</span><br><span class="line">        String name = Surname[index]; <span class="comment">//获得一个随机的姓氏</span></span><br><span class="line">        <span class="keyword">int</span> i = random.nextInt(<span class="number">3</span>);<span class="comment">//可以根据这个数设置产生的男女比例</span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = random.nextInt(girl.length() - <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (j % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//   name = 女- + name + girl.substring(j, j + 2);</span></span><br><span class="line">                name = name + girl.substring(j, j + <span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                name = name + girl.substring(j, j + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> j = random.nextInt(girl.length() - <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (j % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                name = name + boy.substring(j, j + <span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                name = name + boy.substring(j, j + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>奮鬥，給自己一個答案</title>
    <url>/%E5%A5%AE%E9%AC%A5%EF%BC%8C%E7%B5%A6%E8%87%AA%E5%B7%B1%E4%B8%80%E5%80%8B%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6b5174923e884aa6870bf6224771070cb36f5ac7b242c764c30643b035aba1e6">a756220a6413262c08d2e52bbc7378bf149f10a84f08e1b627856b00d258a8cefb16cf5cebe59f47114484f11e423f00220e6cdd66b001dc8e7730d990aee82b586a56c2c26cc915c23a0d39437415edc064f63b146f3f556d6c97f0f3336998c7d487808c9df332fe7032d1076d55fdcf41f14f31e9981ef92047c0177f0317422b27d28de5eddd7aec0daeee95ac16a4f324533ac68e286e765078d41bd17956ef9c563c11932bf1ca08ac090bf62174c62021b21df1f0137161b61f7130fef83b4a56c0579e185376c275e973334d973ffa25057c427f019f3c1e292b052859529f193c374e5ae583df9d8c6bd3b6f85e035e8ad04803d510a3a71e7b968a1465fb70ccdb0f3170858dfa6e1925167b90713e03715c16becf1273104a03feb853fa636ccfe1f113e8726251da260c4e7e73a3802af843344538edfe969f3b1f7603e542e578495e55d64d0bd17fc934f794905a62859bcb5351ae6a8ba8e5b52636c5ed2f18de821aaed0fd9da136cc6e73b0844a971ad9520409b3fe68834002241430a4b96c7530a62064efe3c8ef6765294316b68a5a25b2f5fe0e932f380d37bf6dee1563fe4b0fd6921272cb397dea7b1ee3d7b7c205082a45fe6dd1e6364e18409b4abe0e5c058c747697423c018f48a6a96d80419168d1a5367aac91c41321afcd575e72873513a68c16372c7fc945e0612eca585b83133659208c56554283423752f6f2dee8cc47c60cc46dea22ec0c0b41bccc8ccaf534fc00dde687a233f303708dae481043b2425846558c31e8a2f3f48e770494bbb4a26af9b13c8d4c0d99c644551925aa7144d72ea39c7b0d57718cb443ba2e97812cef246591790568786a7bac94a6af2a41a5ad1e9cc5d6a4f950ad3d62813e218009f36b98c2d657a8ee36bc4ced954aca1918342798884c1dbd70d5695cbc4ba49feb589d3507d11673e690219b7e0b8532062b385db2448a36943e0228b74d95a7d5f3851732322599deda95820b07d8fe3b67f377adf5aed44931cf320526295047b87d5ca632097c9119b03d1809afd567cbec0d8ae23d169877bb9d7bdd1dc757e06b836d043fb99b293e0902a9dbcfc62478a9245f907469342f8642fee5a66138fb14428997f9c867931001af52fb1d0fa3ca04d9ea28ef3b96aecc3741e5fb3ee0fa09247c7c8d9af76e9c4af55fc0db721427e5ba213f45a5f8fb3b39e96d1c7f6fadca7ad786e46aa1fcb018c09fdd3c0b1356e9dde629cff7c7705151881cf4aa7028215e605d08395c92248fdac37cbdf115853212e8d18c4caacca37b0b0800c1629a7d3e296345fad250501a87b6b0e637db1ef6fb06ed038254af2552c09cdb1b3d7d142d0fd63f824424402c2330ad4c461d47ebb012a434fc12bdba7b5afcf85cf765cfd55ec165dce007548b32c238f6260ece0a9f50d6159fc5d930a10aea60ca00130607c2fcfd121a5d680a5dfcb3ee3c29483a2aa029acabdf65adba62044e1c1e79b39f4c802fc4ebb9a1b487d588c823dbbacccc75c0db5719ff8c49eda23f65b5cd9bfa1b07c30475f57ee39790d6c9735460c66e4eb296d25979df7fc4666ad7118eeb36477531b44906adfd055fa1b8c04632c1892c0cd701badd06a778674c716193b38187aafbe648a393d1f8fddf189c11d1a197c46232132660c818d7ea515f6dfe7caac48d70122b0d431d2e206f052b7a89dcbe5f2da29416efa941baa7d3dd9a8c977c98124f01ec221b3799e27738b88da8c1349b22ad35c7480cd7c3990112bf4279108bac830083e34e20a77e5887215fc88dfefff9b6650c5baa64e0472c4148a60056372d46a220abdddf3e7e692fc078016d436fc876a9e0f9ea1ce12ea336db57ad5d1b0ad8b2f41fe3fe6000cc9a4fca06b62cfd3c266ceb2dcc3301d890106beebf69f7e3a565ef9cf6aa376b24457588038a62f8b9d489ccc1f2684f22768b4e10b94f990e43e5a0b864968462e7be3cbee8c1f4bc9bc90b5c6598f17f72bc3751354c98942c64b3f2d6a96a991d592aa1e16b37e6ec92a5c3655f52529deeaf381b9f83bccf1129c324c43bd6ea745ca8c842a305f5786087ba6d50eb69e63e370b13c6be2f27cdff1ae8c4ae6dddeef301da3a2f7b9a960ecb8164d4a66e9baa5b4c80e6e12247995eca0c2d20e783f4ea935dceadc2656d560b70996ea6e7e1b7ff34e86e2de5d37326e2185d29f2bc22aa5e85fc55350a050dc8eba7dd574386b5b25b848789ec057d545501a18f489152fee1b94361317e7f8c1f1ca3ef010636190ab2a6c2b169b9dd10c56c0b2a65031d57240977bac0a7e3b94e1383d16fb8886916e913930f60a96ec9728e717bd42fc8b9a14113119e7551bcbdac262a1a1cb469fdb62a5a02b82bccb7fa3d7effc78f2d871845ef78df1542e8b4ba8aad2afe4b17762db12a8a17f81e15d9edb705e429bbb1ce22e21d69e83b127cc8a20b75dbaaef2d09a1517084773387f6566832fc0a698a537b57870aa8f22b5ea0200d1cdfe669d679353e420447ab67624df964a88d2eefeba27164a015370ae61376bcd1ac555eaf6b819421bc194d68abff6846152fc8125002e5136271a939ef4ca82b523e453dd874366ff89d8561ad1226dad815f5fc6ab48c6225bedc98685238b7601e1ef93d4847cdd7025966c50a3fe1f7fdefbaa86823b872969223c0fca7ccfa55ee1fa09aec244b5f4fe9e5e1415f5bb9e48c50a9bb2da26a5dfc72a97168cd38d584ddac562b883418af59924119af26efd10ad312b197cecf984e61ea07000edc3caa14d13e857251be6085e1379f3876a82d2cdd4f238b1b33f9237809757bb13e2ef47427845fdc78dcc14409317897f2bb1c5fa5659fcad7a001393758aea51912f3f04ae9cd605fca200e13e7307056e0bce229a7a7634c6cc2f77a5aa79f3c22daca4aa634c86c436512d50f16d6635639d11fcf9dc8a82423a6126dabab40bf762a44c3298c12d928f6ff81ca15056bf5dcf7efa36c448d36c592e9c2c62a0943173a6258d44643ecef2cbf56768ed475fb05356a438baa54c5a8e3553d2cf8728efe371ef1a18506b8220ace06a61ab6116ba64d52b19f6313213e3ff1c5fb30b7b40a5b1b023813714eceeb9349f6f59f3cd62edcb82adcceecbdd0557ea4e20b8e7f681581cac57e1fd06b0dd6dbde0d5677b7646af8970dbbe5b2178def0c50e8b973970ba22e7c8db0650b17cb9e860b1c9127344d738c1f24076babc467255a3ce597e706849f683628d4bcc21e</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入阅读密码~</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>北漂</tag>
      </tags>
  </entry>
  <entry>
    <title>情灭缘散</title>
    <url>/%E6%83%85%E7%81%AD%E7%BC%98%E6%95%A3/</url>
    <content><![CDATA[<blockquote>
<p>纪念那些神奇、摸不着头脑的岁月。</p>
</blockquote>
<a id="more"></a>

<p>时光漫步，足迹轻点</p>
<p>折翼天使，舞降尘世</p>
<p>世间纠缠，悲观离合</p>
<p>姻缘情愫，绕困于心</p>
<p>百年人生，梦过一场</p>
<p>只为一瞬</p>
<p>轮回百世，本以</p>
<p>看破红尘</p>
<p>却</p>
<p>复灭于情</p>
<p>夕阳西坠，昏黄天地</p>
<p>轻风吹拂，落花缤纷</p>
<p>笛声悠扬</p>
<p>只为 祭奠</p>
<p>那些曾经的</p>
<p>岁月</p>
<p>​                                ——2013.12.5 午</p>
<img src="/%E6%83%85%E7%81%AD%E7%BC%98%E6%95%A3/%E6%83%85%E7%81%AD%E7%BC%98%E6%95%A3.png" class="" title="This is an example image">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>诗</tag>
      </tags>
  </entry>
  <entry>
    <title>带标题及单元格合并的easyExcel导出表格</title>
    <url>/%E5%B8%A6%E6%A0%87%E9%A2%98%E5%8F%8A%E5%8D%95%E5%85%83%E6%A0%BC%E5%90%88%E5%B9%B6%E7%9A%84easyExcel%E5%AF%BC%E5%87%BA%E8%A1%A8%E6%A0%BC/</url>
    <content><![CDATA[<h1 id="easyExcel导出表格（有标题、单元格合并）"><a href="#easyExcel导出表格（有标题、单元格合并）" class="headerlink" title="easyExcel导出表格（有标题、单元格合并）"></a>easyExcel导出表格（有标题、单元格合并）</h1><blockquote>
<p>如何过一天，就如何过一生。</p>
</blockquote>
<a id="more"></a>

<h3 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h3><p>最近工作上遇到了xlsx格式报表的导出，导出的数据存在父子关系，即相当于树形数据，有单元格合并和标题形式的要求，查阅了一些资料，总算是弄出来了，这里另写一个小样简单分享一下关于easyExcel导出具有合并单元格和标题的小结 代码，也算记录一下自己的工作学习。</p>
<h3 id="2、代码"><a href="#2、代码" class="headerlink" title="2、代码"></a>2、代码</h3><p><img src="https://img-blog.csdnimg.cn/20201123150059385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70#pic_center" alt="demo目录格式"><br>（目录及代码仅为实现，勿纠结格式和规范问题/捂脸）</p>
<h4 id="easyExcel依赖"><a href="#easyExcel依赖" class="headerlink" title="easyExcel依赖"></a>easyExcel依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> easyexceldemo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.EasyExcel;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.support.ExcelTypeEnum;</span><br><span class="line"><span class="keyword">import</span> easyexceldemo.dto.BizMergeStrategy;</span><br><span class="line"><span class="keyword">import</span> easyexceldemo.dto.RowRangeDto;</span><br><span class="line"><span class="keyword">import</span> easyexceldemo.dto.TitleSheetWriteHandler;</span><br><span class="line"><span class="keyword">import</span> easyexceldemo.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 该类的描述</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/23 11:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EasyExcelController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/excel&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excel</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Map&lt;String, List&lt;RowRangeDto&gt;&gt; strategyMap = BizMergeStrategy.addAnnualMerStrategy(data());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">            String filename = URLEncoder.encode(<span class="string">&quot;用户表测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + filename + <span class="string">&quot;.xlsx&quot;</span>);</span><br><span class="line"></span><br><span class="line">            EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                    .excelType(ExcelTypeEnum.XLSX).head(User.class)</span><br><span class="line">                    .registerWriteHandler(<span class="keyword">new</span> TitleSheetWriteHandler(<span class="string">&quot;我是一个小标题&quot;</span>,<span class="number">2</span>)) <span class="comment">// 标题及样式，lastCol为标题第0列到底lastCol列的宽度</span></span><br><span class="line">                    <span class="comment">//设置默认样式及写入头信息开始的行数</span></span><br><span class="line">                    .relativeHeadRowIndex(<span class="number">1</span>)</span><br><span class="line">                    .registerWriteHandler(<span class="keyword">new</span> BizMergeStrategy(strategyMap))    <span class="comment">// 注册合并策略</span></span><br><span class="line">                    .registerWriteHandler(BizMergeStrategy.CellStyleStrategy()) <span class="comment">// 设置样式</span></span><br><span class="line">                    .sheet(<span class="string">&quot;测试&quot;</span>)</span><br><span class="line">                    .doWrite(data());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            response.reset();</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            response.getWriter().println(<span class="string">&quot;打印失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;User&gt; <span class="title">data</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;总裁&quot;</span>);</span><br><span class="line">        User user1 = <span class="keyword">new</span> User(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;总经理&quot;</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;技术员&quot;</span>);</span><br><span class="line">        User user3 = <span class="keyword">new</span> User(<span class="string">&quot;4&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;技术员&quot;</span>);</span><br><span class="line"></span><br><span class="line">        list.add(user);</span><br><span class="line">        list.add(user1);</span><br><span class="line">        list.add(user2);</span><br><span class="line">        list.add(user3);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> easyexceldemo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.ExcelProperty;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.write.style.ColumnWidth;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 该类的描述</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/23 11:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ColumnWidth(10)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &#123;&quot;id&quot;&#125;, index = 0)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnWidth(20)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &#123;&quot;名字&quot;&#125;, index = 1)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnWidth(20)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &#123;&quot;职位&quot;&#125;, index = 2)</span></span><br><span class="line">    <span class="keyword">private</span> String postion; <span class="comment">//职位</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String id,String name,String postion)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.postion = postion;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPostion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> postion;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPostion</span><span class="params">(String postion)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.postion = postion;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="策略及其他"><a href="#策略及其他" class="headerlink" title="策略及其他"></a>策略及其他</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> easyexceldemo.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.metadata.Head;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.merge.AbstractMergeStrategy;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.metadata.style.WriteCellStyle;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.metadata.style.WriteFont;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.style.HorizontalCellStyleStrategy;</span><br><span class="line"><span class="keyword">import</span> easyexceldemo.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.util.CellRangeAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 合并策略和样式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/20 17:24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BizMergeStrategy</span> <span class="keyword">extends</span> <span class="title">AbstractMergeStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, List&lt;RowRangeDto&gt;&gt; strategyMap;</span><br><span class="line">    <span class="keyword">private</span> Sheet sheet;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BizMergeStrategy</span><span class="params">(Map&lt;String, List&lt;RowRangeDto&gt;&gt; strategyMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategyMap = strategyMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Sheet sheet, Cell cell, Head head, Integer integer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sheet = sheet;</span><br><span class="line">        <span class="comment">//如果没有标题，只有表头的话，这里的 cell.getRowIndex() == 1</span></span><br><span class="line">        <span class="keyword">if</span> (cell.getRowIndex() == <span class="number">2</span> &amp;&amp; cell.getColumnIndex() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 保证每个cell被合并一次，如果不加上面的判断，因为是一个cell一个cell操作的，</span></span><br><span class="line"><span class="comment">             * 例如合并A2:A3,当cell为A2时，合并A2,A3，但是当cell为A3时，又是合并A2,A3，</span></span><br><span class="line"><span class="comment">             * 但此时A2,A3已经是合并的单元格了</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, List&lt;RowRangeDto&gt;&gt; entry : strategyMap.entrySet()) &#123;</span><br><span class="line">                Integer columnIndex = Integer.valueOf(entry.getKey());</span><br><span class="line">                entry.getValue().forEach(rowRange -&gt; &#123;</span><br><span class="line">                    <span class="comment">//添加一个合并请求</span></span><br><span class="line">                    sheet.addMergedRegionUnsafe(<span class="keyword">new</span> CellRangeAddress(rowRange.getStart(),</span><br><span class="line">                            rowRange.getEnd(), columnIndex, columnIndex));</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, List&lt;RowRangeDto&gt;&gt; addAnnualMerStrategy(List&lt;User&gt; projectDtoList) &#123;</span><br><span class="line">        Map&lt;String, List&lt;RowRangeDto&gt;&gt; strategyMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        User preUser = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; projectDtoList.size(); i++) &#123;</span><br><span class="line">            User curUser = projectDtoList.get(i);</span><br><span class="line">            <span class="comment">//如果名字一样，将名字合并（真正开发中一般不会通过名字这样字段，而是通过一些关联的唯一值，比如父id）</span></span><br><span class="line">            <span class="keyword">if</span> (preUser != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (curUser.getName() == preUser.getName())&#123;    <span class="comment">// 名字相同则合并第一列</span></span><br><span class="line"><span class="comment">//                    BizMergeStrategy.fillStrategyMap(strategyMap, &quot;0&quot;, i+1);</span></span><br><span class="line">                    <span class="comment">//如果没有标题，只有表头的话，这里为 BizMergeStrategy.fillStrategyMap(strategyMap, &quot;1&quot;, i);</span></span><br><span class="line">                    BizMergeStrategy.fillStrategyMap(strategyMap, <span class="string">&quot;1&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            preUser = curUser;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strategyMap;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: 新增或修改合并策略map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> strategyMap</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2020/11/17 17:32</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fillStrategyMap</span><span class="params">(Map&lt;String, List&lt;RowRangeDto&gt;&gt; strategyMap, String key, <span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        List&lt;RowRangeDto&gt; rowRangeDtoList = strategyMap.get(key) == <span class="keyword">null</span> ? <span class="keyword">new</span> ArrayList&lt;&gt;() : strategyMap.get(key);</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (RowRangeDto dto : rowRangeDtoList) &#123;</span><br><span class="line">            <span class="comment">//分段list中是否有end索引是上一行索引的，如果有，则索引+1</span></span><br><span class="line">            <span class="keyword">if</span> (dto.getEnd() == index) &#123;</span><br><span class="line">                dto.setEnd(index + <span class="number">1</span>);</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果没有，则新增分段</span></span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            rowRangeDtoList.add(<span class="keyword">new</span> RowRangeDto(index, index + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        strategyMap.put(key, rowRangeDtoList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: 表格样式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2020/11/20 9:40</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HorizontalCellStyleStrategy <span class="title">CellStyleStrategy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        WriteCellStyle headWriteCellStyle = <span class="keyword">new</span> WriteCellStyle();</span><br><span class="line">        <span class="comment">//设置背景颜色</span></span><br><span class="line">        headWriteCellStyle.setFillForegroundColor(IndexedColors.WHITE.getIndex());</span><br><span class="line">        <span class="comment">//设置头字体</span></span><br><span class="line">        WriteFont headWriteFont = <span class="keyword">new</span> WriteFont();</span><br><span class="line">        headWriteFont.setFontHeightInPoints((<span class="keyword">short</span>)<span class="number">13</span>);</span><br><span class="line">        headWriteFont.setBold(<span class="keyword">true</span>);</span><br><span class="line">        headWriteCellStyle.setWriteFont(headWriteFont);</span><br><span class="line">        <span class="comment">//设置头居中</span></span><br><span class="line">        headWriteCellStyle.setHorizontalAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">        <span class="comment">//内容策略</span></span><br><span class="line">        WriteCellStyle contentWriteCellStyle = <span class="keyword">new</span> WriteCellStyle();</span><br><span class="line">        <span class="comment">//设置 水平居中</span></span><br><span class="line">        contentWriteCellStyle.setHorizontalAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">        contentWriteCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class="line">        HorizontalCellStyleStrategy horizontalCellStyleStrategy = <span class="keyword">new</span> HorizontalCellStyleStrategy(headWriteCellStyle, contentWriteCellStyle);</span><br><span class="line">        <span class="keyword">return</span> horizontalCellStyleStrategy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> easyexceldemo.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RowRangeDto</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RowRangeDto</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStart</span><span class="params">(<span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnd</span><span class="params">(<span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> easyexceldemo.dto;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.handler.SheetWriteHandler;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.metadata.holder.WriteSheetHolder;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.metadata.holder.WriteWorkbookHolder;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.util.CellRangeAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TitleSheetWriteHandler</span> <span class="keyword">implements</span> <span class="title">SheetWriteHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> lastCol;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TitleSheetWriteHandler</span><span class="params">(String title,<span class="keyword">int</span> lastCol)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.lastCol = lastCol;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeSheetCreate</span><span class="params">(WriteWorkbookHolder writeWorkbookHolder, WriteSheetHolder writeSheetHolder)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterSheetCreate</span><span class="params">(WriteWorkbookHolder writeWorkbookHolder, WriteSheetHolder writeSheetHolder)</span> </span>&#123;</span><br><span class="line">        Workbook workbook = writeWorkbookHolder.getWorkbook();</span><br><span class="line">        Sheet sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//设置标题</span></span><br><span class="line">        Row row = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">        row.setHeight((<span class="keyword">short</span>) <span class="number">800</span>);</span><br><span class="line">        Cell cell = row.createCell(<span class="number">0</span>);</span><br><span class="line">        cell.setCellValue(title);</span><br><span class="line">        CellStyle cellStyle = workbook.createCellStyle();</span><br><span class="line">        cellStyle.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class="line">        cellStyle.setAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">        Font font = workbook.createFont();</span><br><span class="line">        font.setBold(<span class="keyword">true</span>);</span><br><span class="line">        font.setFontHeight((<span class="keyword">short</span>) <span class="number">400</span>);</span><br><span class="line">        cellStyle.setFont(font);</span><br><span class="line">        cell.setCellStyle(cellStyle);</span><br><span class="line">        sheet.addMergedRegionUnsafe(<span class="keyword">new</span> CellRangeAddress(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, lastCol));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里为该demo的全部代码，使用时新建一个项目，直接复制粘贴过去，运行即可。<br>借鉴了不少网上的资料，有部分内容本人还尚未搞明白，有不明白可以留言互相探讨。<br>借鉴连接：<br><a href="https://blog.csdn.net/qq_41514643/article/details/106993760">1、这老哥的文档帮了极大忙，感谢！/抱拳</a><br><a href="2%E3%80%81https://blog.csdn.net/Aeve_imp/article/details/104910080/">2、这老哥的文档也很详细</a><br><a href="https://www.yuque.com/easyexcel">3、语雀官网</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>easyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>数据加密</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<blockquote>
<p>须知少年凌云志，曾许人间第一流。</p>
</blockquote>
<a id="more"></a>

<h1 id="项目中敏感数据加解密的实践"><a href="#项目中敏感数据加解密的实践" class="headerlink" title="项目中敏感数据加解密的实践"></a>项目中敏感数据加解密的实践</h1><h1 id="https-www-yuque-com-ronetver-aluxfn-ukm347"><a href="#https-www-yuque-com-ronetver-aluxfn-ukm347" class="headerlink" title="https://www.yuque.com/ronetver/aluxfn/ukm347"></a><a href="https://www.yuque.com/ronetver/aluxfn/ukm347">https://www.yuque.com/ronetver/aluxfn/ukm347</a></h1>]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>无论接下来如何，不要后悔今天的决定</title>
    <url>/%E6%97%A0%E8%AE%BA%E5%A6%82%E4%BD%95%EF%BC%8C%E4%B8%8D%E8%A6%81%E5%90%8E%E6%82%94%E4%BB%8A%E5%A4%A9%E7%9A%84%E5%86%B3%E5%AE%9A/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="652eec907d9121ec839723df4967bd614f984b65c30998b092e3fee85139ae2b">a756220a6413262c08d2e52bbc7378bf461d63a46ff4bc53720da8c2e41e55a9385c804cb2f3447cecf5b20b530fb73959be8b84a6e543422202c6dbc7509954ba2da1085e491fd2bb7fa5105db063f576f4d728154d02d1807354f5c091fe97bbf935dab67f4c75634c589c37c0dd5298f1d306739640e9e19addde182b873e5e9a621cff777f30eed37063ea82b39812cfcf38c5cc523bdc34467e1255be68767b8621b3fd2093d13a21e30e50a4372197d1d529eecd850ed4d65bb31183b97fb7df61bb2f2fa16a52a681faea72b465fbdf3076c1d261ca92d6ee0676c74de362b746d72b1fcb0b60d61532cbae4190d75f71f73a21deafec60b9d63fe31912b5d4a3088a6fe1211a67dc9b7a5e5f4153b91a833371dbed46066c35d12449f38ea1ca8552ab3741f8ca97d74732dc4546d4423bd3b4401e10d878f09f176daa0bef6fbbeee265fad7247021fa3dd319186da825103085fe9c3bed1e32018273235f5292eeddf6aaa5a149a84daeacaeb42e97b45f48b08d05998944cca03a788443f6ca47504c7c3161ede54fdaf1bc277dfc53f36911758d6d1ada3846038ca848aff2169591d26c52a8b49c1c9fcc28d2449220bcf1eb6696136406e33538c8da8737d8ac35365c86fbaeebe01b90fab53ceccda4da5b910514fbd70ee1bcaf38f9a37637b5fe25819c7d9656debad80ef24649175726f524e0f8e1b019c2ba4abc3810a897f42fea9a09156563e5f7868d96a43e27fd111767f14ec6cc886602a256edb31a4f6ceb9e0230c732e3bc34fa8da964201249e0450a0b12554a12829d797fa10e218bd8b37b385184aa43b767070ada29d0aa325a6fb8ec9c856155555104ce1fc5a85bce645b9309065f5e067c70c2ab1f72db076a407196876b48c517d828226363a4d53ab77d00f8509fc9fe11505f176ff6091e11bb4c4bdfe0710a2f2c021d5c17fe415dcdb67780851e314876b3e4419f0dc3216f9daeaf7741bfe2095f879729b449dd89f36db80d29f8cfe900b61ff959a3fa103ec983cdb74640525c4a5f7d58f696a412c6ca0ea6c804834f599b0bebbb398d7f4e96dcd8beee2d0add8dd20a278a3fd887af34a22d9f5189a7acccae682603a4f012bbe746ebfd80a0e8f47bc9b55b5ca68dd06338f18fb47a86f224e26a95ff3ae653f37811e5a0ea4f260b49e8885f4d7bc709b3e8d3aca109fcdf368b3a9d981221679f271fc06486c2be3b36ad100c22bf23e673aa50173750c9246d091dfea899235dfb1be759f90cd23c8e373bf1f0fa911f28acc0128dcac60f256d1d9f46752e91a4e7d88f4c162f57bfbec2f70f54b4385f16ef4de1abb8956a60210ac49bd0e1888fb9cda6bbb4929014a36cede83f00187590c9b8b1749aff49c3d41ff4c1a67d3c3cfa838d0eb439ae6eff50a84b662bc8a5dafa5955fabfbcf9acadb5ef1066cccffe55876ced8a8b9cb5546ba3091031733a870d0a9b42f62a8d3db7f72c964d5ac0a00c8c49e6cafc8f26779cc7d23986ddf4c70f3c17b00447c65fc6b75e5a9b7a8d17bba9220de06f63b8643303c84d7aff76bf6377707b4fa8a5264e59872774c0cc1e777a5e76bd5ec7741fdbbbc79a183befc6e4e4bdf80af08ab784870f1b28a76f090024b6246056fe8cefcea71fee5e7e5d39adb5192578623c773f38ac2f8f7c50b78f1c6efd6212d623090c49eaebb20502bff5c768707e4b857ba27490822941deb07a4dd0f731d7aaf08a5c696eb31a7784c6453108348e50048a707867e71f059364c4fb9afcecc80611524f265cc9a1e3f6bfc6fdf4a2c484589ad34809b0fc268a2a1ac9d5695ce1a10ac545a8f31595f3e4a6560445aa14575d5db950455d9e9702360e81cafcf6cd3fecb7b010e6d8deb876071479ea0ef8be64f5f618a5474165dc04a087289a0fe1ab80636c7f82b1b9f6585c06c0272a32c0543ad21f2ea9585ff6762fdf1521ad143b73f70f2a20dc8288ad4a81ef3b1b5160a0ce2a2c2415e9b3b55e5c820dda751f420f27351ee6bea7cae4446848115209256f15cde6b3ae5cbcd4083af674adb2ade54eca2cf5e67af6b2cc7b027875d64e9f4c395c68b70ac5fa18b219e85da92935fcc2ad88e554ca47a9335cfe01d519f0d91728ca7b5c7fdfec46f6e1faeab39821f0f02251fa56542c6d1b4e50e9b4900e8c3a5c600a8baf43bf5b3052b7fcad093d39ef6116cacbf8c8b7800c0b5e496fad6face1e747bf9c2f80aab9e57435714b8a591b196853cf5c4f275f50f08c6a33d773733504ea6ccd2a8649b7ded85b823e045ffbaade55b9b0c80ebc0806742a6377d73c789fbc823e17571da0a0fab84d3fbd9ed0a0c5589811902d3beb946fc00cf550c0635b86850319bd203dc7177e8eafaaef7670c46f9c5120afd7062be1fbfdcad35e465f6375b44928887392df1da73ac2489921f48c811c945bb954dd9b8dd5dac44598c780782f23d7b62b0a0917d769bf775f92cf2b485434dd4bc5b0a99d4a90663b7e9a432c29aa463bcc82304b47bb056bc0312d4a6f169d0b0daa30ed12e62ade87577bcd85efade93483ab0ccb3e3c73efa27fb48e84228ee13b08e47eab14d733a468068b82d371dde814239f6cb36ca3406cbd8ce0801f4df701311322ee08852c4619bec3b72cfd9b73f5098d7127b0af6975cd7296e236745fceaa63e88188a7a7109c172408046f0d8c13c34eb9b3e161ae1b08651977d7f93b633af0bc63e465755362060f8511f9f6dfaa8cb213fed8cf1cbf2fa1b9c252419130f94e9dbde8ebef39207c4a3dd2ec4ac984340450e2bba3888151826855e0679b6902303a2b65aa6fc4d71bad1d8426e57e5e05a3574be1a919ed76a28719864522f8160f53c9d13a752c54fec38524eac9386f84c278ae35a85e5ef53b78074b6672df5ec49b4adfce7809fdf18288c18c705a865a7adb3b3ed67662c2ab9739b34ae5d122ab42992f12e8975b23c9f70c1485f424c9d0d0d76e561ca40957666f8c7384727804d5122393b2d84cf415bf717f01909a5b7e28ec5281d2c9e91010a5758e4c6b43c2ce0c848281c718c1c8a738156f1ad12ab532336fa4f21767687e59a46861e94e465ed2d619e56d237d18d4b24b8a807cd975cca86e8606b910c868d7f7b47c9f53f8621e3cc132033b1ca45cf93edec043c11681778d227b46c6c45e0f70e69814f97ce5c23cbcf46c581a5c6916023d784ee4a7eeb4c95fbf58ccda6fca4c12349097c582bf6e12847ae90dda378f48c583e55292a2402f2860aca61d36f7f2846760f863f1a2742198cfc4a954cae85ccc368e088a1fd6b650c1558b190afd48b7162b8df22c928966001d12361d12e4e411297798108be86a15c2cf74c73225aede13f5428ddbb14cc2a662aa031efca24c1342f361667d1f7fd2bb5daaf1a325561f4ef207741a63c72eaef6d442a847a86f919a87cf0a618729aaa9921a82445df7b9282ee15c22f8edb91de105d6a7d5cba98e90d16c2b511563feec2218c7ed6758b5440ab55247fc783fd54bb531274c2ff9fa90dc7fbad0f78c1119d73ddb4ab8acfd16a8e446464464bf4c548b5dbe7d9af160567bfb8a7596bc880e0c9b6c9bfdb25fc108e56dcc5a32b3886223b47380eeaece3c2df9b68ad7258a99609ab9544241699d01826c97f4a3c49e1191352f78ad98390d8977f246ad4088848e0124517399158568cd24c0bc15627bdf4d74ad846bd8c0a5916aa90463b93561290ddfff14bc12d82ed35f1217e2712fa92b188a2f5018c889cb1aaf656fd2118fd2cad0f2369e78bbc1ed01efd88c87a7163bcbfa0d4046e5dc3c27d89f10271aaf074d656f64e1bbf74713758cbcd81ffb58e2cf20afa2efdb45d5b1d3f00a8934e7cdcb6e5227e128ddbc75d2e9f75bb23efe39d31300caabd3188bb8783f23742e12b30a70b11611c8a385b8d4463cce9471191338296e04de10f3a87bd2aa01a15687806918187110493cf179f09e35173d4711b44b476fdf642ebce69d56ef1b89c6e28f3bb7ea0e954a7b59653fb50969613e80c878ce6dc340a539b87244d139316036cac82b65b820b83a2b18fee0cfc569b88a4d72b691cac7ab6d220ecbda63e3443fa805b4cf554da8bca7d241a5f4857395bc36a890dc993ab7941cedb5534905a26fb84a30ff9a2c58ceabb6980fa6588b454a6b827f501604b395c6e4e582571ae66225fd594cc7cf25a4c85350a37787af370a18edd7097b669816395870f317d665fad2bfdc7436170a52c72b3431ae8caf93a52dfe4f50643954d25c1ba3820dea2d37193bbf9b346dc4c190ce5b3e3501ab1550288fef24cf38bd03d1f3d738e04cd2d06582414beda39bf8137287d476a0cde5b997e2b46118eeac0b062b11ba3f11a8c9f6f625f79ad65d4ae0b9203090f30db9cdd143f5c3eedb0506da084008919b686fcd9620cb3b7c025d7b73e1aa45a9b7444ceefa998a92676eb60b3fc6ea5103bc6e45a6446c87ff75aef32bd938ecef0461e6c247c16e4a8f261f527a2997591fa28490fbf5f14a7ee3d7c794981c03ea8e9a3c00d4f1d6f3f5150b5aab1c26b13b7abd329a7762dba18aaf09b3651e7a0984c754f7b640cf5c0cadb751de40425c92e6e029e8c71c6ba516a3dad9a3e00df11912aab6160f04be93c593410b1b6ae268138b1f00d22eb946fcf9b15eb422cbf0b8646685a417d63d5fce27ba18</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入阅读密码~</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>北漂</tag>
        <tag>辞职</tag>
      </tags>
  </entry>
  <entry>
    <title>无题</title>
    <url>/%E6%97%A0%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>因为挑战，才有进步。加油，自己！</p>
</blockquote>
<a id="more"></a>

<p>看了两个多小时的技术课程，然而觉得专注的程度总是不够，也许是夏季的到来让我的心绪不免躁动，又或者是想到了今天下午咬着雪糕时经过了两个被父母抱在怀里的孩子的干巴巴目光，又或者是疑惑刚刚回来路上那坐在马路沿子的阿叔在想些什么，总之，脑子里飘忽更多的游离于技术之外的，于是，还是选择了顺从灵魂，由工作转向了更加纯粹的生活。</p>
<p>此刻，窗外继续下着雨，已经下了两个多小时了，但貌似没有为空气带来丝毫的一丝清凉，不过这淅沥沥的雨声为这夜色带来了更空灵的宁静，但此刻我更愿意戴上耳机，随机放一些自己喜欢的类型的音乐，说来也奇怪，身在北京，给我推荐的第一首竟是《兰州》，难道是在诱惑我去兰州看一看吗~</p>
<p>其实，在外面的时候时就多次有写东西的冲动，也在记事本上做过一些记录，但奈何一回到宿舍，当时的那种冲动或者说是心境便不复存在了，即便是看着之前的记录，提笔仍旧无从着落，这也是近几年来让我略微难受的一件事，总感觉自己失去了文字叙述的能力，想想自己曾经也是获得过省作文赛一等奖的人呀。不过，细究其中原因，还是有迹可循的，大学以前经常写作文，自己也偶尔有手写记录生活的习惯，然而，大学后，各种原因，动笔变得少了，然后，就出现了现在这样的局面，心中有话，却无从下笔表达。</p>
<p>近期个人的大事便是上周一入职了第二家公司，一切如同全新开始且具有挑战。</p>
<p>公司位于国贸附近，早上十点上班，自己基本七点半起床，八点出门，九点二十左右到公司。来北京快一年了，第一份工作的公司离住宿很近，不堵车的情况下半个钟之内就能到达，路上偶尔也挤，但也还能接受，虽也见识过西二旗早高峰的场景，但终究未曾亲历，因而对北漂的挤尚未有过深刻的印象，直到第一天来现在的公司上班的路上，才发现平日同事或者网友的描述并没有夸张一分一毫。自己坐的315路公交转10号线地铁，地铁倒也还可以接受，但是公交的挤那真是让人有点无奈。上公交之后几乎是只能一动不动，生怕碰着踩着了他人，也几次见识了车上乘客间因为拥挤而产生的口水摩擦，不过好的是，因为这一路走的是专有路线，即便早高峰，也并不是特别堵。</p>
<p>路上的奔波倒无关紧要，不足挂齿，项目上的事才是让自己觉得颇具挑战。入职第一天，公司给配了苹果系统的笔记本，下周也会配上额外的大屏显示器。上家公司的时候是用的个人的笔记本，然后公司每月补贴100元，我也曾幻想过拥有一个大屏的显示器来分屏办公，如今这一愿望将要实现，而且还是配的多数人所向往的苹果，想想心中还是有些许激动，这才是我事业路上最基本的标配吧。</p>
<p>公司对于项目的管理还有分工上更加的规范，管理的工具上也用了许多我未曾接触过的，目前而言，自己还是有点压力，不过幸好有个同事热情指点帮助。说来也惭愧，同事和我是同一年毕业的，目前也才工作一年，来公司也比我早了一个多月而已，但却发现和他还是有些差距，无论是对项目的理解上，亦或是在团队中的沟通交流上。</p>
<p>总而言之，需要学习的东西很多，在接下来的日子中，不惧挑战，每天进步，争取早点跟上组织的步伐与节奏，加油，小伙子！！</p>
<p>（行文至此，本以为能滔滔不绝，行云流水，但仍旧磕磕绊绊且抓不住自己要表达的重点，流水账的叙述也不尽人意，至此停笔，望这个能力今后也应当加强）</p>
<hr>
<p>附：</p>
<p>​    深切悼念二位国之栋梁，</p>
<p>​    袁老、吴院士，二位走好！</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>北漂</tag>
      </tags>
  </entry>
  <entry>
    <title>查找算法</title>
    <url>/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="二分查找法（折半查找法）"><a href="#二分查找法（折半查找法）" class="headerlink" title="二分查找法（折半查找法）"></a>二分查找法（折半查找法）</h2><blockquote>
<p>数据是有序的。</p>
</blockquote>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span>: 二分查找算法，查到返回数据下标，查不到返回-1。 </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span> 吴焕业</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">int</span> high = arr.length - <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">           <span class="keyword">int</span> mid = (low + high)/<span class="number">2</span>;</span><br><span class="line">           <span class="keyword">if</span> (target &lt; arr[mid]) &#123;</span><br><span class="line">               high = mid - <span class="number">1</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &gt; arr[mid]) &#123;</span><br><span class="line">               low = mid + <span class="number">1</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> mid;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈ElasticSearch</title>
    <url>/%E6%B5%85%E8%B0%88ElasticSearch/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>Elaticsearch，简称为es， es是一个开源的<strong>高扩展</strong>的<strong>分布式全文检索引擎</strong>，它可以近乎<strong>实时的存储、检索数据</strong>；<strong>本身扩展性很好</strong>，可以扩展到上百台服务器，处理PB级别（大数据时代）的数据。es也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是<strong>通过简单的RESTfulAPI来隐藏Lucene的复杂性，从而让全文搜索变得简单</strong>。</p>
</blockquote>
<a id="more"></a>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>官网：<a href="https://www.elastic.co/">https://www.elastic.co/</a></p>
<p>下载地址：<a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目录结构</span></span><br><span class="line">bin 启动文件</span><br><span class="line">config 配置文件</span><br><span class="line">	log4j2 日志配置文件</span><br><span class="line">	jvm.options java 虚拟机相关的配置</span><br><span class="line">	elasticsearch.yml  elasticsearch 的配置文件！ 默认 9200 端口！ 跨域！</span><br><span class="line">lib   相关jar包</span><br><span class="line">logs   日志！</span><br><span class="line">modules 功能模块</span><br><span class="line">plugins 插件！</span><br></pre></td></tr></table></figure>

<h3 id="1-解压启动"><a href="#1-解压启动" class="headerlink" title="1.解压启动"></a>1.解压启动</h3><blockquote>
<p>windows 下进入bin目录，运行elasticsearch.bat,，访问127.0.0.1:9200</p>
</blockquote>
<img src="/%E6%B5%85%E8%B0%88ElasticSearch/9200.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\9200.png" alt="image-20210502183733343"></p>
<h3 id="2-安装可视化界面-es-head插件（要先装node-js）"><a href="#2-安装可视化界面-es-head插件（要先装node-js）" class="headerlink" title="2.安装可视化界面 es head插件（要先装node.js）"></a>2.安装可视化界面 es head插件（要先装node.js）</h3><ul>
<li><p>下载地址：<a href="https://github.com/mobz/elasticsearch-head/">https://github.com/mobz/elasticsearch-head/</a></p>
</li>
<li><p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install <span class="comment">#安装依赖</span></span><br><span class="line">npm run start <span class="comment">#正式启动</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>连接测试发现，存在跨域问题，配置es</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure>

<p>重启es服务器，然后再次连接</p>
<img src="/%E6%B5%85%E8%B0%88ElasticSearch/9100.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\9100.png" alt="image-20210502200832019"></p>
<p><strong>注意</strong>：存在<strong>跨域问题</strong>，解决方案：在elasticsearch.yml配置文件上添加</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解决跨域问题</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-Kinbanna"><a href="#3-Kinbanna" class="headerlink" title="3.Kinbanna"></a>3.Kinbanna</h3><blockquote>
<p>官网：<a href="https://www.elastic.co/cn/kibana">https://www.elastic.co/cn/kibana</a><br>Kibana 版本要和 Es 一致！</p>
</blockquote>
<h4 id="3-1-了解ELK"><a href="#3-1-了解ELK" class="headerlink" title="3.1 了解ELK"></a>3.1 了解ELK</h4><p>ELK是Elasticsearch、Logstash、Kibana三大开源框架首字母大写简称。市面上也被成为ElasticStack。其中Elasticsearch是一个基于Lucene、分布式、通过Restful方式进行交互的近实时搜索平台框架。像类似百度、谷歌这种大数据全文搜索引擎的场景都可以使用Elasticsearch作为底层支持框架，可见Elasticsearch提供的搜索能力确实强大,市面上很多时候我们简称Elasticsearch为es。Logstash是ELK的中央数据流引擎，用于从不同目标（文件/数据存储/MQ）收集的不同格式数据，经过过滤后支持输出到不同目的地（文件/MQ/redis/elasticsearch/kafka等）。<strong>Kibana可以将elasticsearch的数据通过友好的页面展示出来，提供实时分析的功能</strong>。<br>市面上很多开发只要提到ELK能够一致说出它是一个<strong>日志分析架构技术栈</strong>总称，但实际上ELK不仅仅适用于日志分析，它还可以支持其它任何数据分析和收集的场景，日志分析和收集只是更具有代表性。并非唯一性。</p>
<h4 id="3-2-了解Kibanna"><a href="#3-2-了解Kibanna" class="headerlink" title="3.2 了解Kibanna"></a>3.2 了解Kibanna</h4><p>Kibana是一个针对Elasticsearch的开源分析及可视化平台，用来搜索、查看交互存储在Elasticsearch索<br>引中的数据。使用Kibana，可以通过各种图表进行高级数据分析及展示。Kibana让海量数据更容易理<br>解。它操作简单，基于浏览器的用户界面可以快速创建仪表板（dashboard）实时显示Elasticsearch查<br>询动态。设置Kibana非常简单。无需编码或者额外的基础架构，几分钟内就可以完成Kibana安装并启动<br>Elasticsearch索引监测。</p>
<h4 id="3-3-安装启动"><a href="#3-3-安装启动" class="headerlink" title="3.3 安装启动"></a>3.3 安装启动</h4><p>官网下载，直接启动，访问localhost:5601即可</p>
<img src="/%E6%B5%85%E8%B0%88ElasticSearch/kibanna.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\kibanna.png" alt="image-20210502205110512"></p>
<p>使用kibanna的开发工具</p>
<img src="/%E6%B5%85%E8%B0%88ElasticSearch/kiabana%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\kiabana开发工具.png" alt="image-20210502211723241"></p>
<h4 id="3-4-汉化"><a href="#3-4-汉化" class="headerlink" title="3.4 汉化"></a>3.4 汉化</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在config.yml添加</span></span><br><span class="line"><span class="attr">i18n.locale:</span> <span class="string">&quot;zh-CN&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote>
<p>暂时将索引当做数据库来看待。索引 对应数据库，文档对应 库中的数据。<strong>面向文档，一切皆JSON</strong></p>
</blockquote>
<h3 id="1-新建索引概览"><a href="#1-新建索引概览" class="headerlink" title="1.新建索引概览"></a>1.新建索引概览</h3><img src="/%E6%B5%85%E8%B0%88ElasticSearch/%E7%B4%A2%E5%BC%95%E6%A6%82%E8%A7%88.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\索引概览.png" alt="image-20210502202031314"></p>
<h3 id="2-与数据库的映射关系"><a href="#2-与数据库的映射关系" class="headerlink" title="2.与数据库的映射关系"></a>2.与数据库的映射关系</h3><blockquote>
<p>elasticsearch(集群)中可以包含多个索引(数据库)，每个索引中可以包含多个类型(表)，每个类型下又包含多 个文档(行)，每个文档中又包含多个字段(列)。</p>
</blockquote>
<img src="/%E6%B5%85%E8%B0%88ElasticSearch/%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%AF%94%E8%BE%83.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\和数据库的比较.png" alt="image-20210502213357552"></p>
<h3 id="3-设计"><a href="#3-设计" class="headerlink" title="3. 设计"></a>3. 设计</h3><ul>
<li><p>物理设计</p>
<p>elasticsearch 在后台把每个索引划分成多个分片，每分分片可以在集群中的不同服务器间迁移一个人就是一个集群！默认的集群名称就是elaticsearh。</p>
</li>
<li><p>逻辑设计</p>
<p>一个索引类型中，包含多个文档，比如说文档1，文档2。 当我们索引一篇文档时，可以通过这样的一各顺序找到 它: 索引 ▷ 类型 ▷ 文档ID ，通过这个组合我们就能索引到某个具体的文档。 注意:ID不必是整数，实际上它是个字 符串。</p>
</li>
</ul>
<h3 id="4-倒排索引"><a href="#4-倒排索引" class="headerlink" title="4. 倒排索引"></a>4. 倒排索引</h3><p>elasticsearch使用的是一种称为<strong>倒排索引</strong>的结构，采用Lucene倒排索作为底层。这种结构<strong>适用于快速的全文搜索</strong>， 一个<strong>索引由文档中所有不重复的列表构成</strong>，对于每一个词，都有一个包含它的文档列表。</p>
<ul>
<li><p>例子</p>
<img src="/%E6%B5%85%E8%B0%88ElasticSearch/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\倒排索引.png" alt="image-20210502214814967"></p>
</li>
</ul>
<h3 id="5-安装ik分词插件"><a href="#5-安装ik分词插件" class="headerlink" title="5.安装ik分词插件"></a>5.安装ik分词插件</h3><blockquote>
<p>1、<a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a><br>2、下载完毕之后，放入到我们的elasticsearch 插件目录plugins下即可！(注：版本要和elasticsearch一致)</p>
</blockquote>
<p>ik提供了两个分词算法：</p>
<ul>
<li>ik_smart:最少切分</li>
<li>ik_max_word:最细粒度切分（穷尽词库的去划分）  字典</li>
</ul>
<h3 id="6-使用kibana测试分词效果"><a href="#6-使用kibana测试分词效果" class="headerlink" title="6. 使用kibana测试分词效果"></a>6. 使用kibana测试分词效果</h3><h4 id="6-1效果"><a href="#6-1效果" class="headerlink" title="6.1效果"></a>6.1效果</h4><ul>
<li><p><strong>ik_smart</strong>分词效果</p>
<img src="/%E6%B5%85%E8%B0%88ElasticSearch/ik_smart%E5%88%86%E8%AF%8D%E6%95%88%E6%9E%9C.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\ik_smart分词效果.png" alt="image-20210502233716287"></p>
</li>
<li><p><strong>ik_max_word</strong> 分词效果</p>
<img src="/%E6%B5%85%E8%B0%88ElasticSearch/ik_max_word%E5%88%86%E8%AF%8D%E6%95%88%E6%9E%9C.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\ik_max_word分词效果.png" alt="image-20210502233830186"></p>
</li>
</ul>
<h4 id="6-2问题"><a href="#6-2问题" class="headerlink" title="6.2问题"></a>6.2问题</h4><p>有些字的组成不能被称之为词，比如人名（张三、千仞雪）等，但是我们希望它能当做词来处理，这个时候我们就需要将它放入我们的字典中。</p>
<h5 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h5><ul>
<li>新建自己的字典文件，my.dic</li>
<li>在my.dic 文件添加自己的分词，比如千仞雪</li>
<li>在IKAnalyzer.cfg.xml中添加自己的字典文件 my.dic到扩展字典中</li>
</ul>
<h2 id="Restful风格操作"><a href="#Restful风格操作" class="headerlink" title="Restful风格操作"></a>Restful风格操作</h2><img src="/%E6%B5%85%E8%B0%88ElasticSearch/rest%E9%A3%8E%E6%A0%BC.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\rest风格.png" alt="image-20210502235417964"></p>
<h2 id="SpingBoot整合ES-实战"><a href="#SpingBoot整合ES-实战" class="headerlink" title="SpingBoot整合ES(实战)"></a>SpingBoot整合ES(实战)</h2><blockquote>
<p>官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html</a></p>
</blockquote>
<h3 id="获得原生依赖"><a href="#获得原生依赖" class="headerlink" title="获得原生依赖"></a>获得原生依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><img src="/%E6%B5%85%E8%B0%88ElasticSearch/%E5%88%9D%E5%A7%8B%E5%8C%96.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\初始化.png" alt="image-20210503114252881"></p>
<h3 id="熟悉一些API"><a href="#熟悉一些API" class="headerlink" title="熟悉一些API"></a>熟悉一些API</h3><p>restful风格</p>
<p>创建 put</p>
<p>编辑 post</p>
<p>查询 get    查询体query</p>
<p>分页 form size</p>
<p>…</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>结合着<strong>jsoup</strong>爬虫去使用</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>技术栈</tag>
        <tag>es</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈java8</title>
    <url>/%E6%B5%85%E8%B0%88java8/</url>
    <content><![CDATA[<blockquote>
<p>天上乌飞兔走，人间古往今来。万般回忆化尘埃，只有青山不改。</p>
</blockquote>
<a id="more"></a>

<h2 id="一、java历史及发展"><a href="#一、java历史及发展" class="headerlink" title="一、java历史及发展"></a>一、java历史及发展</h2><p>起源：</p>
<ul>
<li><p>1995年5月23日，Java语言正式诞生。</p>
</li>
<li><p>1996年1月，第一个JDK-JDK1.0诞生。</p>
<ul>
<li>Sun Classic VM（虚拟机）</li>
<li>Applet（java小应用程序）</li>
<li>AWT（java图形设计）</li>
</ul>
</li>
<li><p>1996年4月，10个最主要的操作系统供应商申明将在其产品中嵌入Java技术。</p>
</li>
<li><p>1996年9月，约8.3万个网页应用了Java技术来制作。</p>
</li>
<li><p>1997年2月18日，JDK1.1发布。　</p>
<ul>
<li>JAR（jar包）</li>
<li>JDBC(Java DataBase Connectivity)（连接数据库）</li>
<li>JavaBeans（java规范）</li>
<li>RMI（远程调用）</li>
<li>Inner Class（内部类）</li>
<li>Reflection（反射）</li>
</ul>
</li>
<li><p>1997年4月2日，JavaOne会议召开，参与者超过万人，创造当时全球同类会议规模之纪录。</p>
</li>
<li><p>1997年9月，JavaDeveloperConnection社区成员超过十万。</p>
</li>
<li><p>1998年2月，JDK1.1被下载超过2,000,000次。</p>
</li>
<li><p>1998年12月8，Java的企业平台Java EE正式发布。</p>
</li>
<li><p>1999年6月，Sun公司发布Java的三大版本：标准版（Java SE）、企业版（Java EE）、微型版（Java ME）。</p>
</li>
<li><p>2000年5月8日，JDK1.3发布。</p>
<ul>
<li>数学运算</li>
<li>Timer API（时间）</li>
<li>Java Sound API（声音）</li>
<li>CORBA IIOP实现RMI的通信协议</li>
<li>Java 2D新特性</li>
<li>jar文件索引</li>
</ul>
</li>
<li><p>2000年5月29日，JDK1.4发布。</p>
</li>
<li><p>2001年6月5日，NOKIA宣布，到2003年将出售1亿部支持Java的手机。</p>
</li>
<li><p>2001年9月24日，Java EE 1.3发布。</p>
</li>
<li><p>2002年2月26日，J2SE1.4发布，自此Java的计算能力有了大幅提升。</p>
</li>
<li><p>2004年9月30日，J2SE1.5发布，是Java语言发展史上的又一里程碑事件。为了表示这个版本的重要性，Java SE 1.5正式更名为Java SE 5.0。</p>
<ul>
<li>自动装箱拆箱 </li>
<li>泛型 </li>
<li>元数据</li>
<li>Introspector（内省）</li>
<li>enum（枚举）</li>
<li>静态引入</li>
<li>可变长参数（Varargs）</li>
<li>foreach（高级虚幻）</li>
<li>JMM（内存模型）</li>
<li>concurrent（并发包）</li>
</ul>
</li>
<li><p>2006年12月，Sun公司发布了JDK1.6（也被称为Java SE 6）。一直以来，Sun公司维持着大约2年发布一次JDK新版本的习惯。</p>
</li>
<li><p>2009年4月20日，Oracle宣布将以每股9.5美元的价格收购Sun，该交易的总价值约为74亿美元。但Oracle通过收购Sun公司获得了两项软件资产：Java和Solaris。2007年11月，Java语言作为服务器端编程语言，已经取得了极大地成功；而Android平台的流行，则让Java语言获得了在客户端程序上大展拳脚的机会。</p>
</li>
<li><p>2011年7月28日，Oracle公司发布了Java SE 7，这次版本升级经过了将近5年时间。Java SE 7也是Oracle发布的第一个Java版本，引入了二进制整数、支持字符串的switch语句、多异常捕捉、自动关闭资源的try语句等新特性。</p>
</li>
<li><p>2014年3月18日，Oracle公司发布了Java SE 8，这次版本升级为Java带来了全新的Lambda表达式。除此之外，Java 8还增加了大量新特性，这些新特性使得Java变得更加强大。</p>
<ul>
<li>Lambda表达式</li>
<li>函数式接口</li>
<li>方法引用和构造器调用</li>
<li>Stream API</li>
<li>接口中的默认方法和静态方法</li>
<li>新时间日期API</li>
</ul>
</li>
<li><p>…　　　　</p>
</li>
</ul>
<h2 id="二、Lambda表达式（来源于C-和Scala语言）"><a href="#二、Lambda表达式（来源于C-和Scala语言）" class="headerlink" title="二、Lambda表达式（来源于C#和Scala语言）"></a>二、Lambda表达式（来源于C#和Scala语言）</h2><h3 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h3><p>可以把Lambda表达式理解为简洁地表示可传递的匿名函数的一种方式：它没有名称，但它有参数列表、函数主体、返回类型，可能还有一个可以抛出的异常列表。</p>
<ul>
<li><p>匿名——我们说匿名，是因为它不像普通的方法那样有一个明确的名称：写得少而想得多！</p>
</li>
<li><p>函数——我们说它是函数，是因为Lambda函数不像方法那样属于某个特定的类。但和方法一样，Lambda有参数列表、函数主体、返回类型，还可能有可以抛出的异常列表。</p>
</li>
<li><p>传递——Lambda表达式可以作为参数传递给方法或存储在变量中。</p>
</li>
<li><p>简洁——无需像匿名类那样写很多模板代码。</p>
</li>
</ul>
<h3 id="2、组成"><a href="#2、组成" class="headerlink" title="2、组成"></a>2、组成</h3><ul>
<li>参数列表</li>
<li>箭头</li>
<li>Lambda主体</li>
</ul>
<h4 id="2-1-例子说明"><a href="#2-1-例子说明" class="headerlink" title="2.1 例子说明"></a>2.1 例子说明</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一个Lambda表达式具有一个String类型的参数并返回一个int。Lambda没有return语句，因为已经隐含了return</span></span><br><span class="line">(String s) -&gt; s.length() ;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 第二个Lambda表达式有一个Apple 类型的参数并返回一个boolean（苹果的重量是否超过150克）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">(Apple a) -&gt; a.getWeight() &gt; <span class="number">150</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 第三个Lambda表达式具有两个int类型的参数而没有返回值（void返回）。注意Lambda表达式可以包含多行语句，这里 *是两行.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">(<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; &#123; </span><br><span class="line"> System.out.println(<span class="string">&quot;Result:&quot;</span>); </span><br><span class="line"> System.out.println(x+y); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 第四个Lambda表达式没有参数，返回一个int</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">() -&gt; <span class="number">42</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 第五个Lambda表达式具有两个Apple类型的参数，返回一个int：比较两个Apple的重量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">(Apple a1, Apple a2) -&gt; a1.getWeight().compareTo(a2.getWeight());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解答</span></span><br><span class="line">答案：只有<span class="number">4</span>和<span class="number">5</span>是无效的Lambda。</span><br><span class="line">(<span class="number">1</span>) 这个Lambda没有参数，并返回<span class="keyword">void</span>。它类似于主体为空的方法：<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;&#125;。</span><br><span class="line">(<span class="number">2</span>) 这个Lambda没有参数，并返回String作为表达式。</span><br><span class="line">(<span class="number">3</span>) 这个Lambda没有参数，并返回String（利用显式返回语句）。</span><br><span class="line">(<span class="number">4</span>) <span class="keyword">return</span>是一个控制流语句。要使此Lambda有效，需要使花括号，如下所示：</span><br><span class="line">(Integer i) -&gt; &#123;<span class="keyword">return</span> <span class="string">&quot;Alan&quot;</span> + i;&#125;。</span><br><span class="line">(<span class="number">5</span>)“Iron Man”是一个表达式，不是一个语句。要使此Lambda有效，你可以去除花括号和分号，如下所示：(String s) -&gt; <span class="string">&quot;Iron Man&quot;</span>。或者如果你喜欢，可以使用显式返回语</span><br><span class="line">句，如下所示：(String s)-&gt;&#123;<span class="keyword">return</span> <span class="string">&quot;IronMan&quot;</span>;&#125;。</span><br></pre></td></tr></table></figure>



<h4 id="2-2-小试牛刀"><a href="#2-2-小试牛刀" class="headerlink" title="2.2 小试牛刀"></a>2.2 小试牛刀</h4><p>根据上述语法规则，以下哪个不是有效的Lambda表达式？</p>
<p>(1) () -&gt; {}</p>
<p>(2) () -&gt; “Raoul”</p>
<p>(3) () -&gt; {return “Mario”;}</p>
<p>(4) (Integer i) -&gt; return “Alan” + i;</p>
<p>(5) (String s) -&gt; {“IronMan”;}</p>
<h3 id="3-函数式接口"><a href="#3-函数式接口" class="headerlink" title="3.函数式接口"></a>3.函数式接口</h3><p>含义：接口中只有一个抽象方法。</p>
<p>Lambda表达式需要函数式接口的支持，可以通过在接口上方添加@FunctionInterface来判断接口是否是函数式接口。</p>
<p>jVM可以通过上下文推断出参数类型，“类型推断”。</p>
<img src="/%E6%B5%85%E8%B0%88java8/1.png" class="" title="This is an example image">

<h2 id="三、java8内置四大函数式接口"><a href="#三、java8内置四大函数式接口" class="headerlink" title="三、java8内置四大函数式接口"></a>三、java8内置四大函数式接口</h2><h3 id="1、Consumer-消费型接口"><a href="#1、Consumer-消费型接口" class="headerlink" title="1、Consumer:消费型接口"></a>1、Consumer<T>:消费型接口</h3><img src="/%E6%B5%85%E8%B0%88java8/2.png" class="" title="This is an example image">

<p>2、Supplier<T>:供给型接口</p>
<img src="/%E6%B5%85%E8%B0%88java8/3.png" class="" title="This is an example image">

<p>3、Function&lt;T,R&gt;:函数型接口</p>
<img src="/%E6%B5%85%E8%B0%88java8/4.png" class="" title="This is an example image">

<p>4、Predicate<T>:断言型接口</p>
<img src="/%E6%B5%85%E8%B0%88java8/5.png" class="" title="This is an example image">

<h2 id="四、Stream流"><a href="#四、Stream流" class="headerlink" title="四、Stream流"></a>四、Stream流</h2><h3 id="1、引入"><a href="#1、引入" class="headerlink" title="1、引入"></a>1、引入</h3><p>案例：实体Food,属性有热量值calories和食物名称name,现有一食物集合foodList,实现返回低热量的菜肴名称的，并按照卡路里排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传统实现（非java8）</span></span><br><span class="line">List&lt;Dish&gt; lowCaloricDishes = <span class="keyword">new</span> ArrayList&lt;&gt;(); </span><br><span class="line"><span class="keyword">for</span>(Dish d: foodList)&#123; </span><br><span class="line"> <span class="keyword">if</span>(d.getCalories() &lt; <span class="number">400</span>)&#123; </span><br><span class="line"> lowCaloricDishes.add(d); </span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br><span class="line">Collections.sort(lowCaloricDishes, <span class="keyword">new</span> Comparator&lt;Dish&gt;() &#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Dish d1, Dish d2)</span></span>&#123; </span><br><span class="line"> <span class="keyword">return</span> Integer.compare(d1.getCalories(), d2.getCalories()); </span><br><span class="line"> &#125; </span><br><span class="line">&#125;); </span><br><span class="line">List&lt;String&gt; lowCaloricDishesName = <span class="keyword">new</span> ArrayList&lt;&gt;(); </span><br><span class="line"><span class="keyword">for</span>(Dish d: lowCaloricDishes)&#123; </span><br><span class="line"> lowCaloricDishesName.add(d.getName()); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Java8实现</span></span><br><span class="line">List&lt;String&gt; lowCaloricDishesName = </span><br><span class="line">foodList.stream() </span><br><span class="line"> .filter(d -&gt; d.getCalories() &lt; <span class="number">400</span>) </span><br><span class="line"> .sorted(comparing(Dish::getCalories))</span><br><span class="line"> .map(Dish::getName) </span><br><span class="line"> .collect(toList());</span><br></pre></td></tr></table></figure>

<h3 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h3><ul>
<li>筛选（filter）、切片（limit）和匹配</li>
<li>流的扁平化flatMap</li>
<li>归约<ul>
<li>获取最值</li>
<li>求和</li>
</ul>
</li>
</ul>
<h3 id="3、查找与匹配"><a href="#3、查找与匹配" class="headerlink" title="3、查找与匹配"></a>3、查找与匹配</h3><img src="/%E6%B5%85%E8%B0%88java8/6.png" class="" title="This is an example image">

<h3 id="4、归约与收集"><a href="#4、归约与收集" class="headerlink" title="4、归约与收集"></a>4、归约与收集</h3><img src="/%E6%B5%85%E8%B0%88java8/7.png" class="" title="This is an example image">

<h2 id="四、Optional"><a href="#四、Optional" class="headerlink" title="四、Optional"></a>四、Optional</h2><img src="/%E6%B5%85%E8%B0%88java8/8.png" class="" title="This is an example image">





]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>满纸荒唐言</title>
    <url>/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/</url>
    <content><![CDATA[<blockquote>
<p>写一亩三分地，</p>
<p>写刹那所思，</p>
<p>写井底天空，</p>
<p>写胡言乱语，</p>
<a id="more"></a>

<p>写不知天高地厚，</p>
<p>写年少时的兵荒马乱，</p>
<p>亦写童言无忌海边漫步，</p>
<p>写夜幕沉睡万籁俱寂。</p>
</blockquote>
<img src="/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/%E8%BF%BD%E6%A2%A6.png" class="" title="This is an example image">

<img src="/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/%E9%81%AE%E5%A4%A9.png" class="" title="This is an example image">

<img src="/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/%E6%B1%9F%E6%B9%96.png" class="" title="This is an example image">

<img src="/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/%E6%97%A0%E4%BA%89.png" class="" title="This is an example image">

<img src="/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/%E6%95%99%E7%88%B6.png" class="" title="This is an example image">

<img src="/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/%E9%9D%99%E6%80%9D.png" class="" title="This is an example image">

<img src="/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/%E9%BE%99%E8%A1%8C%E5%A4%A9%E4%B8%8B1.png" class="" title="This is an example image">

<img src="/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/%E6%B8%85%E6%98%8E.png" class="" title="This is an example image">

<img src="/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/%E8%87%AA%E5%8F%A4%E7%BE%8E%E4%BA%BA%E5%A6%82%E5%90%8D%E5%B0%86.png" class="" title="This is an example image">

<img src="/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/%E4%BA%BA%E7%94%9F%E5%93%AA%E8%83%BD%E9%83%BD%E5%A6%82%E6%84%8F.png" class="" title="This is an example image">
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>字</tag>
      </tags>
  </entry>
  <entry>
    <title>海口夜景</title>
    <url>/%E6%B5%B7%E5%8F%A3%E5%A4%9C%E6%99%AF/</url>
    <content><![CDATA[<blockquote>
<p>家人拍的一些夜景，看着挺好看的</p>
</blockquote>
<a id="more"></a>

<img src="/%E6%B5%B7%E5%8F%A3%E5%A4%9C%E6%99%AF/(1).jpg" class="" title="This is an example image">



<img src="/%E6%B5%B7%E5%8F%A3%E5%A4%9C%E6%99%AF/(2).jpg" class="" title="This is an example image">



<img src="/%E6%B5%B7%E5%8F%A3%E5%A4%9C%E6%99%AF/(3).jpg" class="" title="This is an example image">



<img src="/%E6%B5%B7%E5%8F%A3%E5%A4%9C%E6%99%AF/(4).jpg" class="" title="This is an example image">



<img src="/%E6%B5%B7%E5%8F%A3%E5%A4%9C%E6%99%AF/(5).jpg" class="" title="This is an example image">



<img src="/%E6%B5%B7%E5%8F%A3%E5%A4%9C%E6%99%AF/(6).jpg" class="" title="This is an example image">



<img src="/%E6%B5%B7%E5%8F%A3%E5%A4%9C%E6%99%AF/(7).jpg" class="" title="This is an example image">



<img src="/%E6%B5%B7%E5%8F%A3%E5%A4%9C%E6%99%AF/(8).jpg" class="" title="This is an example image">



<img src="/%E6%B5%B7%E5%8F%A3%E5%A4%9C%E6%99%AF/(9).jpg" class="" title="This is an example image">



<img src="/%E6%B5%B7%E5%8F%A3%E5%A4%9C%E6%99%AF/(10).jpg" class="" title="This is an example image">



<img src="/%E6%B5%B7%E5%8F%A3%E5%A4%9C%E6%99%AF/(11).jpg" class="" title="This is an example image">



<img src="/%E6%B5%B7%E5%8F%A3%E5%A4%9C%E6%99%AF/(12).jpg" class="" title="This is an example image">



<img src="/%E6%B5%B7%E5%8F%A3%E5%A4%9C%E6%99%AF/(13).jpg" class="" title="This is an example image">



<img src="/%E6%B5%B7%E5%8F%A3%E5%A4%9C%E6%99%AF/(14).jpg" class="" title="This is an example image">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>漂一年</title>
    <url>/%E6%BC%82%E4%B8%80%E5%B9%B4/</url>
    <content><![CDATA[<blockquote>
<p>做个正能量的人，不要给他人带来负能。</p>
</blockquote>
<a id="more"></a>

<p>2021年7月10日 00点43分。</p>
<p>还记得是去年的七月四号进的京，那时正值北京疫情爆发，原计划是六月三十号入京，结果迫于疫情，拿了毕业证书后，在秦皇岛旅馆里待了四天，最后因为工作，没办法还是在人人惶恐的情况下坐上了开往北京的列车。清楚的记得，那天的列车上，整趟车估摸着不到二十人，就我坐的那节车厢加上我才仅有两人。</p>
<p>时间一晃，这都一年过去了，当时租的房子在8号那天也到期了，趁着明天周末，得搬家咯。</p>
<p>这个房子地处西三旗桥东上奥小区，小区环境还是很好的，只是房子很小，是合租房，一个屋里住了五户，我这间属于最小的一间，窗户朝向东南，按理说是可以看到广阔的天空和明媚的阳光的，无奈是窗户的对面又是一栋高楼，虽说并不是挨着的，但还是霸占了不小的视野和光照。没办法，这个地段，这个价钱，不能奢求太多，好的是距离我第一份工作距离很近且开往的车辆不少，每天的交通也很是方便。（房价1400，加上其他杂七杂八的费用，一个月下来差不多1600吧）。</p>
<p>身边的同事朋友都习惯把现在住的这个房子称之为“家”，比如“我要回家了”、“我在家”，他们都是这么说的，我一般都是以“宿舍”或者“屋”为称，其实并不是习惯成自然吧，而是刻意的去把它当成一个“宿舍”来看待，我不愿称之为“家”，原因有两方面，一是我不是很满意这个房子，另一个的话还是对于“家”这个概念的谨慎性与保守性或者说是较真性。</p>
<blockquote>
<p>我住在这里，但这并不是我的家，这里没有我的家人，它仅仅只是我一个容身的场所，当然，它也不会认为我是它的主人。</p>
</blockquote>
<p>明天搬家，搬到通州那边去。在自如租的房，两居室，和一朋友住，租金两千出头，没有去看房，直接通过视频看完就预订了，工作的强度已经让我没有力气去看那么多了，看到价钱合适，位置合适就直接预订了，通过视频，感觉挺不错，70平，两个熟识的人，下次回宿舍或者周末我可以放纵的接着奏乐接着舞，可以搞把吉他撸一撸，不用再顾忌那么多，哇想想还是爽歪歪的，但是一想到房租，哎，还是贵了些。</p>
<p>明天起床收拾行李，告别“小破屋（~~）”，不想叫搬家公司，太费钱了，距离远，太费钱了，今天首期交了一万多的房租，卡里又将归零了，难受。</p>
<p>睡觉，明天踏上新世界。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>北漂</tag>
        <tag>瞎扯</tag>
      </tags>
  </entry>
  <entry>
    <title>诗选</title>
    <url>/%E7%A9%86%E6%97%A6-%E8%AF%97%E9%80%89/</url>
    <content><![CDATA[<blockquote>
<p>穆旦（1918年4月5日—1977年2月26日），原名查良铮。</p>
</blockquote>
<a id="more"></a>

<h1 id="冥想"><a href="#冥想" class="headerlink" title="冥想"></a>冥想</h1><p><strong>1</strong></p>
<p>为什么万物之灵的我们，</p>
<p>遭遇还比不上一棵小树？</p>
<p>今天你摇摇它，优越地微笑，</p>
<p>明天就化为根下的泥土。</p>
<p>为什么由手写出的这些字，</p>
<p>竟比这只手更长久，健壮？</p>
<p>它们会把腐烂的手抛开，</p>
<p>而默默生存在一张破纸上。</p>
<p>因此，我傲然生活了几十年，</p>
<p>仿佛曾做着万物的导演，</p>
<p>实则在它们长久的秩序下</p>
<p>我只当一会小小的演员。</p>
<p><strong>2</strong></p>
<p>把生命的突泉捧在我手里，</p>
<p>我只觉得它来得新鲜，</p>
<p>是浓烈的酒，清新的泡沫，</p>
<p>注入我的奔波、劳作、冒险。</p>
<p>仿佛前人从未经临的园地</p>
<p>就要展现在我的面前。</p>
<p>但如今，突然面对着坟墓，</p>
<p>我冷眼向过去稍稍回顾，</p>
<p>只见它曲折灌溉的悲喜</p>
<p>都消失在一片亘古的荒漠，</p>
<p>这才知道我的全部努力</p>
<p>不过完成了普通的生活。</p>
<h1 id="智慧之歌"><a href="#智慧之歌" class="headerlink" title="智慧之歌"></a>智慧之歌</h1><p>我已走到了幻想底尽头，</p>
<p>这是一片落叶飘零的树林，</p>
<p>每一片叶子标记着一种欢喜，</p>
<p>现在都枯黄地堆积在内心。</p>
<p>有一种欢喜是青春的爱情，</p>
<p>那是遥远天边的灿烂的流星，</p>
<p>有的不知去向，永远消逝了，</p>
<p>有的落在脚前，冰冷而僵硬。</p>
<p>另一种欢喜是喧腾的友谊，</p>
<p>茂盛的花不知道还有秋季，</p>
<p>社会的格局代替了血的沸腾，</p>
<p>生活的冷风把热情铸为实际。</p>
<p>另一种欢喜是迷人的理想，</p>
<p>它使我在荆棘之途走得够远，</p>
<p>为理想而痛苦并不可怕，</p>
<p>可怕的是看它终于成笑谈。</p>
<p>只有痛苦还在，它是日常生活</p>
<p>每天在惩罚自己过去的傲慢，</p>
<p>那绚烂的天空都受到谴责，</p>
<p>还有什么彩色留在这片荒原？</p>
<p>但惟有一棵智慧之树不凋，</p>
<p>我知道它以我的苦汁为营养，</p>
<p>它的碧绿是对我无情的嘲弄，</p>
<p>我诅咒它每一片叶的滋长 。</p>
<blockquote>
<p>那天加班到深夜，打车回来路上，无意在推送中看到了穆旦的《冥想》，也不知是当时的何种契机，让我深深沦陷，反复阅读了几次，之后又查了他的其他诗，也百度了穆旦这位诗人，不查不知道，一查又给了我几个惊喜，也才发现自己以前片面了，只知道出现在教科书上的那几位我国现代诗人：冰心、徐志摩等人，竟然到现在才知道还有穆旦这么棒的一位诗人。<br>原来穆旦本名查良铮，是金庸老爷子的亲戚（金庸本名查良镛）。才刚刚看完了老爷子的《神雕侠侣》，竟让我又在不知情的情况下深陷其亲戚的诗，所以说，有时候，缘分妙不可言呀。</p>
</blockquote>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>诗</tag>
        <tag>摘抄</tag>
      </tags>
  </entry>
  <entry>
    <title>算法题</title>
    <url>/%E7%AE%97%E6%B3%95%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>记录一些遇到的算法。</p>
</blockquote>
<a id="more"></a>

<h3 id="题1"><a href="#题1" class="headerlink" title="题1"></a>题1</h3><p>小明去买评估，商店做活动，提供捆绑打包销售，例如每袋3个和每袋5个的形式出售。现小明只想购买n个苹果，同时想购买尽量少的袋数⽅便携带。如果不能购买恰好n个苹果，就不会购买（可返回-1），求解输出最少的袋数。（例如：18）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先通过列举法找到其中的规律</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZHYTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">1</span>;n &lt; <span class="number">100</span> ;n++)&#123;</span><br><span class="line">            System.out.println(n + <span class="string">&quot;==》&quot;</span> + bagCount(n));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bagCount</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">3</span> || n == <span class="number">4</span> || n == <span class="number">7</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">5</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> n / <span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 通过规律，我们得知从8及8以后的数字一定能够被3和5整分掉</span></span><br><span class="line">        <span class="keyword">int</span> a = n / <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> remain3 = n % <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">while</span> (remain3 % <span class="number">3</span> != <span class="number">0</span>)&#123;</span><br><span class="line">            a--;</span><br><span class="line">            remain3 += <span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a + remain3 / <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>经典排序算法</title>
    <url>/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>编程不只是一门技术，更是一门艺术。        ——雷军</p>
</blockquote>
<a id="more"></a>

<h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1.冒泡排序"></a>1.冒泡排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 1.冒泡排序</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(arr==<span class="keyword">null</span>||arr.length&lt;<span class="number">2</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ;j&lt;arr.length-i-<span class="number">1</span>;j++)&#123;</span><br><span class="line">               <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                   <span class="keyword">int</span> temp=arr[j];</span><br><span class="line">                   arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">                   arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式（一）</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>思想很重要！</p>
</blockquote>
<p>浅谈<strong>单例模式</strong>、<strong>代理模式</strong>、<strong>工厂模式</strong>。</p>
<a id="more"></a>

<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><blockquote>
<p>保证被创建一次，节省系统的开销。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 省略 get set</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalDataMgr</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> GlobalDataMgr MGR = <span class="keyword">new</span> GlobalDataMgr();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> String userName;</span><br><span class="line">	<span class="keyword">private</span> String passWord;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GlobalDataMgr <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> MGR;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><blockquote>
<p>就是相当于第三方，中介，比如在结婚中，我们关注的事只是结婚这一件事，但是结婚还有宴请宾客、组织会场、司仪主持等其他繁琐的事，这些事就可以交给婚介所处理，然后结婚的这个节点实际上婚介所是用我们的真实身份，也就是我们自己去完成的。所以这里的婚介所就相当于代理。（简而言之，使用代理就是为了帮我们做一些额外的事，我们只需要关注自己的事即可）</p>
<p><strong>注：代理 代理的是接口。</strong></p>
</blockquote>
<h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原始接口（真实角色，即我们）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">edit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">defaultMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是一个默认方法，实现接口时可重写，也可不重写&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 真实角色的实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoInterfaceImpl</span> <span class="keyword">implements</span> <span class="title">DemoInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">edit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;更新。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代理角色，在这里的作用相当于是加了一些 日志或者说是方法执行前的说明</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoInterfaceProxy</span> <span class="keyword">implements</span> <span class="title">DemoInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DemoInterfaceImpl demoInterface;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDemoInterface</span><span class="params">(DemoInterfaceImpl demoInterface)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == demoInterface)&#123;</span><br><span class="line">            demoInterface = <span class="keyword">new</span> DemoInterfaceImpl();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.demoInterface = demoInterface;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log();</span><br><span class="line">        demoInterface.add();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        demoInterface.del();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">edit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        demoInterface.edit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log();</span><br><span class="line">        demoInterface.query();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加日志功能&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//主类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DemoInterfaceImpl demoInterface = <span class="keyword">new</span> DemoInterfaceImpl();</span><br><span class="line">        DemoInterfaceProxy proxy =  <span class="keyword">new</span> DemoInterfaceProxy();</span><br><span class="line">        proxy.setDemoInterface(demoInterface);</span><br><span class="line">        proxy.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandle</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> DemoInterface demoInterface;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDemoInterface</span><span class="params">(DemoInterface demoInterface)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.demoInterface = demoInterface;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成得到代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),demoInterface.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理代理实例，并返回成功</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// 动态代理的本质，使用反射机制实现</span></span><br><span class="line">        before();</span><br><span class="line">        Object invoke = method.invoke(demoInterface, args);</span><br><span class="line">        after();</span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行前。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行后。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 真实角色</span></span><br><span class="line">        DemoInterface demoInterface = <span class="keyword">new</span> DemoInterfaceImpl();</span><br><span class="line">        <span class="comment">// 代理角色：无</span></span><br><span class="line">        ProxyInvocationHandle proxy = <span class="keyword">new</span> ProxyInvocationHandle();</span><br><span class="line">        <span class="comment">// 把真实角色赋给代理</span></span><br><span class="line">        proxy.setDemoInterface(demoInterface);</span><br><span class="line">        <span class="comment">// 获得代理角色</span></span><br><span class="line">        DemoInterface demoInterfaceProxy = (DemoInterface)proxy.getProxy();</span><br><span class="line">        <span class="comment">// 通过代理角色调用方法</span></span><br><span class="line">        demoInterfaceProxy.query();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><blockquote>
<p>工厂模式是我们最常用的实例化对象模式了，是用工厂方法代替new操作的一种模式。   ——百度百科</p>
<p>好处：<strong>解耦代码</strong>；给代码带来更好的一个<strong>可扩展性</strong>。</p>
</blockquote>
<h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标准规范类(AbstractProduct),用抽象类也行</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shoe</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">make</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两个实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SportsShoeImpl</span> <span class="keyword">implements</span> <span class="title">Shoe</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">make</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产运动鞋...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeisureShoeImpl</span> <span class="keyword">implements</span> <span class="title">Shoe</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">make</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生成休闲鞋。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>构造工厂</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShoeFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shoe <span class="title">makeShoe</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;sports&quot;</span>.equalsIgnoreCase(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SportsShoeImpl();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;leisure&quot;</span>.equalsIgnoreCase(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> LeisureShoe();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ShoeFactory shoeFactory = <span class="keyword">new</span> ShoeFactory();</span><br><span class="line">        <span class="comment">// 休闲鞋</span></span><br><span class="line">        LeisureShoe leisureShoe = (LeisureShoe) shoeFactory.makeShoe(<span class="string">&quot;leisure&quot;</span>);</span><br><span class="line">        <span class="comment">//运动鞋</span></span><br><span class="line">        Shoe sportsShoe = shoeFactory.makeShoe(<span class="string">&quot;sports&quot;</span>);</span><br><span class="line"></span><br><span class="line">        leisureShoe.make();</span><br><span class="line">        sportsShoe.make();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>读《神雕侠侣》</title>
    <url>/%E8%AF%BB%E7%A5%9E%E9%9B%95%E4%BE%A0%E4%BE%A3/</url>
    <content><![CDATA[<blockquote>
<p>问世间情为何物，直教人生死相许。</p>
</blockquote>
<a id="more"></a>

<p>百忙之际，前几天总算是完成了今年必读书单计划中一个自己早就应该完成了的愿望，完完整整读完了金老爷子著作之一——《神雕侠侣》。</p>
<p>如今说到金庸，脑海中浮现更多的是在家里的老房子里，坐在用竹子编织的沙发上，端着碗筷看着大头电视机播放的《天龙八部》、《神雕侠侣》或者是《倚天屠龙记》等其影视剧。当时年少，看的更多的是影视剧里的打斗场景，心驰向往那些让人忍不住模仿的武林绝技，对所谓的剧情情感几乎是从未关注过，也不曾知郭靖的为国为民、乔峰的行侠仗义、杨过小龙女的绝对痴情。</p>
<p>其实，年初整理书单的时候，并没有想到将金庸的武侠小说列入。而后来列入的原因是阅读其他刊物的过程中，无意看到了对金庸老爷子的介绍，那一刹那，宛若遗漏一件很重要的事，怎么说目前为止也是阅读过国内的一些知名著作，但是竟然把金庸老爷子的江湖世界给忘记了？于是赶紧在手机上做了记录，防止明天一觉醒来忘记了。有些遗憾未曾早点阅读，同时也庆幸现在还阅读应该也不算太晚，再过几年，怕是心境又再变，再提不起阅读武侠小说的兴趣。</p>
<p>在金庸众多书籍中选择《神雕侠侣》作为第一本读物，其主要原因还是始于对李若彤版和刘亦菲版小龙女在屏幕上惊为天人的容颜和气质。</p>
<p>初始阅读的过程中，书中的情节与自己脑海中的依稀记得的影视场景缓缓重合，而后，这种重合又慢慢散开，直至最后彻底消散，醒悟过来才发现，原来自己脑海中已经构建了一个新神雕侠侣的江湖，在我的江湖里，所有的角色形象都由我因阅读感受而创建，故事的每一帧后面也按照我的想法去拼接串联。我想，这也许是阅读文字的魅力所在，在阅读的过程中，因为每个人的不同，导致的结果是虽为读同一本书，然感受却是千千万万种，而当你要向对方展现你阅读后看到的世界，又发现这并不是一件轻易的事，因为很多时候你所看到的世界只能意会不能言传，即便真的能够言传，却又发现对方无法理解你的世界。而影视剧展现出来的是导演或者演员个体对于角色的理解，由于影视画面的真实呈现性，观众在观影过程中，感受更多的其实是他人对角色的理解，而非自己的理解。所以影视给观众的对于人物的感受往往是一样的。</p>
<p>说回书中，阅读前期关注的角色还是李莫愁多些。江湖人称赤练仙子，无人不知无人不晓，作为小龙女的师姐，她同样拥有绝美的容颜与高强的武艺。但她豆蔻年华，被情所伤，浪迹江湖杀人遍地，世上人又之称“女魔头”，最终绝情谷一句“问世间情为何物，直教人生死相许”于火焰焚烧中离开这个让她又爱又恨的江湖。我想，生命的最后一刻，她脑海中流转的画面的应该是花季时与情人的种种，生命的凋零于她而言何尝不是一种解脱。</p>
<blockquote>
<p>终南山下，活死人墓，神雕侠侣，绝迹江湖。</p>
</blockquote>
<p>随着阅读的深入，作为书中主角的杨龙二人情感经历，注定是要扣住读者的心。杨过自幼丧父丧母，一人流浪，性格偏激，却也聪明机敏。儿时偶然情况下，认了西毒欧阳锋作义父。被郭靖黄蓉夫妇认出是故人之子后带回黄花岛生活，后来被送往全真教学艺，因性格原因离开全真教后认小龙女为姑姑并成为了其弟子。二人与在古墓中生活多年，后来相恋，情感历程跌宕起伏。绝情谷一役后，小龙女知杨过情花毒可医治，因自己生命无多，担心自己死后杨过不会独活，故留下“十六年后,在此相会,夫妻情深,勿失信约”十六字后离去。苦等十六年，庆幸小龙女还在世，杨过终得与爱人厮守，从此，终南山下，活死人墓，神雕侠侣，绝迹江湖。</p>
<p>杨龙二人师徒之情转变为男女之情，这在当时是不被承认的，纵然是处处呵护杨过的郭靖也强烈反对。然而，这些反对诋毁的声音未能阻止二人，反倒让他们的情谊变得更坚定，他们的感情赤城，无惧天地，始终如一，纵然人人反对，也要在一起，更恨不得江湖人人尽知。</p>
<img src="/%E8%AF%BB%E7%A5%9E%E9%9B%95%E4%BE%A0%E4%BE%A3/%E6%9D%A8%E8%BF%87%E5%B0%8F%E9%BE%99%E5%A5%B3.jpg" class="" title="This is an example image">

<p>一文终了，为杨龙二人有情人终成眷属而松了口气，但当最后一字看完时，心中想的更多的并不是这终成眷属的二人，而是望着这二人离去的郭襄。</p>
<blockquote>
<p>风陵渡口初相遇</p>
<p>一见杨过误终生</p>
<p>数十余载苦追寻</p>
<p>不曾再遇创峨眉</p>
</blockquote>
<p>郭襄，郭靖黄蓉的二女儿，出生于混乱中，被杨过李莫愁抚养过一阵子。十六年后，长大成人，性格乖巧伶俐、善良、好结交江湖英雄人士，人称“小东邪”（其外公为黄药师，人称“东邪”）。听闻神雕大侠事迹，于风陵渡口与杨过初相遇。杨过赠其三枚金针，承诺其三个愿望。第一和第二个愿望使用在她与杨过分离当天，第一个愿望为一睹杨过真容，第二个愿望是让杨过前来参加其生日，第三个愿望是看见杨过跳下绝情谷时也毫不犹豫跟随跳下去，并让杨过承诺如果没有找到小龙女也不能轻生。</p>
<p>看完书后，郭襄这个角色久久萦绕于脑海中，为她可惜，为她感叹，于是又去看了《神雕侠侣古天乐版》电视剧，从郭襄出现的集数开始看起。这一版的郭襄虽与我阅读中构建的外在形象稍有出入，但是不得不说，演的很好，加之配音（国语版）也很棒，整场看下来，没有丝毫的违和感，算是把书中的角色塑造成功了，最后她一句“问世间情为何物，直教人生死相许”更是让神雕故事彻底完结。看完影视后，还是觉得不过瘾，又去百度了这个角色，才知道原来她一生追寻杨过未果，四十岁时创建了倚天屠龙记里的峨眉派，终生未嫁，她的倾慕者张三丰一生未娶。“情”之一字，让人唏嘘感慨。</p>
<img src="/%E8%AF%BB%E7%A5%9E%E9%9B%95%E4%BE%A0%E4%BE%A3/%E9%83%AD%E8%A5%84.jpg" class="" title="This is an example image">

<p>神雕的故事到此结束了，在接下来的时光里，尚未决定何时阅读它的上篇《射雕英雄传》和下篇《倚天屠龙记》，想来应该也是能在今年读完。儿时的武侠梦，随着时间的流逝，逐渐消散，难再被忆起，希望在后面的书籍中，能寻回更多童年时的一份感动。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 附</span></span><br><span class="line"><span class="attr">神雕侠侣主要角色：</span></span><br><span class="line"><span class="meta">1、杨过</span> <span class="string">小龙女</span></span><br><span class="line"><span class="meta">2、郭靖</span> <span class="string">黄蓉 郭芙 郭襄 郭破虏 耶律齐</span></span><br><span class="line"><span class="attr">3、李莫愁</span></span><br><span class="line"><span class="meta">4、程英</span> <span class="string">完颜萍 陆无双 公孙绿萼</span></span><br><span class="line"><span class="meta">5、东邪西毒南帝北丐中神通：东邪黄药师</span> <span class="string">西毒欧阳锋 南帝段王爷（一灯大师） 北丐洪七公 中神通王重阳</span></span><br><span class="line"><span class="meta">6、东邪西狂南僧北侠中顽童：东邪黄药师</span> <span class="string">西狂杨过 南僧段王爷（一灯大师） 北侠郭靖 中顽童周伯通</span></span><br><span class="line"><span class="meta">7、金轮法王</span> <span class="string">巴尔达 霍都</span></span><br><span class="line"><span class="attr">。。。</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>北漂</tag>
        <tag>阅读</tag>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>诗选</title>
    <url>/%E8%AF%97%E9%80%89/</url>
    <content><![CDATA[<blockquote>
<p>闲暇之时读诗两首。</p>
</blockquote>
<a id="more"></a>

<h2 id="如果有来生"><a href="#如果有来生" class="headerlink" title="如果有来生"></a>如果有来生</h2><p>​                            <strong>——三毛</strong></p>
<p>如果有来生，要做一棵树，</p>
<p>站成永恒。</p>
<p>没有悲欢的姿势，</p>
<p>一半在尘土里安详，</p>
<p>一半在风里飞扬；</p>
<p>一半洒落荫凉，</p>
<p>一半沐浴阳光。</p>
<p>非常沉默、非常骄傲。</p>
<p>从不依靠、从不寻找。</p>
<p>如果有来生，要化成一阵风，</p>
<p>一瞬间也能成为永恒。</p>
<p>没有善感的情怀，</p>
<p>没有多情的眼睛。</p>
<p>一半在雨里洒脱，</p>
<p>一半在春光里旅行；</p>
<p>寂寞了，孤自去远行，</p>
<p>把淡淡的思念统带走，</p>
<p>从不思念、从不爱恋；</p>
<p>如果有来生，要做一只鸟，</p>
<p>飞越永恒，没有迷途的苦恼。</p>
<p>东方有火红的希望，南方有温暖的巢床，</p>
<p>向西逐退残阳，向北唤醒芬芳。</p>
<p>如果有来生，</p>
<p>希望每次相遇，</p>
<p>都能化为永恒。</p>
<h2 id="从前慢"><a href="#从前慢" class="headerlink" title="从前慢"></a>从前慢</h2><p>​                    <strong>——冰心</strong></p>
<p>记得早先少年时</p>
<p>大家诚诚恳恳</p>
<p>说一句 是一句　　</p>
<p>清早上火车站</p>
<p>长街黑暗无行人</p>
<p>卖豆浆的小店冒着热气</p>
<p>从前的日色变得慢</p>
<p>车，马，邮件都慢</p>
<p>一生只够爱一个人</p>
<p>从前的锁也好看</p>
<p>钥匙精美有样子</p>
<p>你锁了 人家就懂了</p>
<h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p>​                        <strong>——汪国真</strong></p>
<p>让我怎样感谢你</p>
<p>当我走向你的时候</p>
<p>我原想收获一缕春风</p>
<p>你却给了我整个春天</p>
<p>让我怎样感谢你</p>
<p>当我走向你的时候</p>
<p>我原想捧起一簇浪花</p>
<p>你却给了我整个海洋</p>
<p>让我怎样感谢你</p>
<p>当我走向你的时候</p>
<p>我原想撷取一枚红叶</p>
<p>你却给了我整个枫林</p>
<p>让我怎样感谢你</p>
<p>当我走向你的时候</p>
<p>我原想亲吻一朵雪花</p>
<p>你却给了我银色的世界</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>诗</tag>
        <tag>摘抄</tag>
      </tags>
  </entry>
  <entry>
    <title>远方</title>
    <url>/%E8%BF%9C%E6%96%B9/</url>
    <content><![CDATA[<blockquote>
<p>人生天地间，忽如远行客。</p>
</blockquote>
<a id="more"></a>

<img src="/%E8%BF%9C%E6%96%B9/%E6%B8%A1%E5%B7%B1.png" class="" title="渡己">



<img src="/%E8%BF%9C%E6%96%B9/%E6%82%9F%E7%A9%BA.png" class="" title="This is an example image">

<img src="/%E8%BF%9C%E6%96%B9/%E4%B8%80%E7%94%9F.png" class="" title="This is an example image">

<img src="/%E8%BF%9C%E6%96%B9/%E8%BF%9C%E6%96%B9.png" class="" title="This is an example image">

<img src="/%E8%BF%9C%E6%96%B9/%E8%87%AA%E7%94%B1.png" class="" title="This is an example image">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>满纸荒唐言</tag>
        <tag>字</tag>
      </tags>
  </entry>
  <entry>
    <title>风拂过，你的气息犹存</title>
    <url>/%E9%A3%8E%E6%8B%82%E8%BF%87%EF%BC%8C%E4%BD%A0%E7%9A%84%E6%B0%94%E6%81%AF%E4%BB%8D%E5%AD%98/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="130344f4c958fb0917f98f59bd2b3c59024b383ec97b74b666d594bb4deba00f"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">只有风知道~</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>回忆录</tag>
        <tag>青春</tag>
        <tag>校园</tag>
      </tags>
  </entry>
  <entry>
    <title>rabbitMQ学习</title>
    <url>/rabbitMQ%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<blockquote>
<p>身体和灵魂，总得有一个在路上。</p>
</blockquote>
<a id="more"></a>

<h1 id="中间件概述"><a href="#中间件概述" class="headerlink" title="中间件概述"></a>中间件概述</h1><p>中间件可以屏蔽对于底层比如操作系统、硬盘等的过多关注，另外也可以作为服务之间的互通的一个桥梁，在一定程度上打破服务之间实现方式上的标准性，如A服务可以使用java编写，B服务可以使用Python语言编写，然后通过中间件来实现两服务之间的互通。</p>
<blockquote>
<p><strong>消息中间件</strong><br><img src="https://img-blog.csdnimg.cn/20210522171210763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="消息中间件"><br>利用可靠的消息传递机制进行系统与系统之间的通讯；<br>通过提供消息和消息的排队机制，它可以在分布式系统环境下扩展进程间的通讯。</p>
</blockquote>
<ul>
<li>本质及设计<ul>
<li>是一种接收数据、接收请求、存储数据、发送数据的服务</li>
<li>MQ队列：负责数据的接收、存储传递，性能要高于其他服务</li>
<li>协议选择：在TCP/IP协议之上构建自己的协议amqp</li>
</ul>
</li>
</ul>
<hr>
<blockquote>
<p>rabbitmq官网：<a href="https://www.rabbitmq.com/">https://www.rabbitmq.com/</a></p>
</blockquote>
<h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><p>略</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp‐client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="tag">&lt;<span class="name">!‐‐此版本与spring</span> <span class="attr">boot</span> <span class="attr">1.5.9</span>版本匹配‐‐&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="简单模式"><a href="#简单模式" class="headerlink" title="简单模式"></a>简单模式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer01</span> </span>&#123;</span><br><span class="line">    <span class="comment">//队列名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE = <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">            factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">            factory.setPort(<span class="number">5672</span>);</span><br><span class="line">            factory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">            factory.setPassword(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">            factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);<span class="comment">//rabbitmq默认虚拟机名称为“/”，虚拟机相当于一个独立的mq服务器</span></span><br><span class="line">            <span class="comment">//创建与RabbitMQ服务的TCP连接</span></span><br><span class="line">            connection  = factory.newConnection();</span><br><span class="line">            <span class="comment">//创建与Exchange的通道，每个连接可以创建多个通道，每个通道代表一个会话任务</span></span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 声明队列，如果Rabbit中没有此队列将自动创建</span></span><br><span class="line"><span class="comment">             * param1:队列名称</span></span><br><span class="line"><span class="comment">             * param2:是否持久化</span></span><br><span class="line"><span class="comment">             * param3:队列是否独占此连接</span></span><br><span class="line"><span class="comment">             * param4:队列不再使用时是否自动删除此队列</span></span><br><span class="line"><span class="comment">             * param5:队列参数</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.queueDeclare(QUEUE, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">            String message = <span class="string">&quot;helloworld小明&quot;</span>+System.currentTimeMillis();</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 消息发布方法</span></span><br><span class="line"><span class="comment">             * param1：Exchange的名称，如果没有指定，则使用Default Exchange</span></span><br><span class="line"><span class="comment">             * param2:routingKey,消息的路由Key，是用于Exchange（交换机）将消息转发到指定的消息队列</span></span><br><span class="line"><span class="comment">             * param3:消息包含的属性</span></span><br><span class="line"><span class="comment">             * param4：消息体</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">              <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 这里没有指定交换机，消息将发送给默认交换机，每个队列也会绑定那个默认的交换机，但是不能显示绑定或解除绑定</span></span><br><span class="line"><span class="comment">             * 默认的交换机，routingKey等于队列名称</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">&quot;Send Message is:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(channel != <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                channel.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(connection != <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 消费者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer01</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE = <span class="string">&quot;helloworld&quot;</span>;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//设置MabbitMQ所在服务器的ip和端口</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//定义消费方法</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 消费者接收消息调用此方法</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> consumerTag 消费者的标签，在channel.basicConsume()去指定</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> properties</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> body</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">             *  */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       Envelope envelope,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       <span class="keyword">byte</span>[] body)</span></span></span><br><span class="line"><span class="function">                    <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//交换机</span></span><br><span class="line">                String exchange = envelope.getExchange();</span><br><span class="line">                <span class="comment">//路由key</span></span><br><span class="line">                String routingKey = envelope.getRoutingKey();</span><br><span class="line">                <span class="comment">//消息id</span></span><br><span class="line">                <span class="keyword">long</span> deliveryTag = envelope.getDeliveryTag();</span><br><span class="line">                <span class="comment">//消息内容</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body,<span class="string">&quot;utf‐8&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;receive message..&quot;</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 监听队列String queue, boolean autoAck,Consumer callback</span></span><br><span class="line"><span class="comment">         * 参数明细</span></span><br><span class="line"><span class="comment">         * 1、队列名称</span></span><br><span class="line"><span class="comment">         * 2、是否自动回复，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动回复</span></span><br><span class="line"><span class="comment">         * 3、消费消息的方法，消费者接收到消息后调用此方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(QUEUE, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>流程</strong><blockquote>
<p>1、<strong>发送端操作流程</strong><br>1）创建连接<br>2）创建通道<br>3）声明队列<br>4）发送消息<br>2、<strong>接收端</strong><br>1）创建连接<br>2）创建通道<br>3）声明队列<br>4）监听队列<br>5）接收消息</p>
</blockquote>
</li>
<li><strong>相关概念</strong><br><img src="https://img-blog.csdnimg.cn/20210522233615214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="相关概念"></li>
<li>运行流程<br><img src="https://img-blog.csdnimg.cn/20210522234102261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="rabbitmq运行流程"><h2 id="Work-quen模式"><a href="#Work-quen模式" class="headerlink" title="Work quen模式"></a>Work quen模式</h2><img src="https://img-blog.csdnimg.cn/20210523175737916.png" alt="workquene"></li>
<li>work queues与简单模式相比，多了n个消费端，n个消费端共同消费同一个队列中的消息。</li>
<li>应用场景：对于 任务过重或任务较多情况使用工作队列可以提高任务处理的速度。</li>
<li>生产者生产多个消息，一条消息只能被一个消费者消费，消费者在处理完某条消息之后，才会收到下一条消息。<h2 id="发布订阅模式-Fanout"><a href="#发布订阅模式-Fanout" class="headerlink" title="发布订阅模式 Fanout"></a>发布订阅模式 Fanout</h2><img src="https://img-blog.csdnimg.cn/20210523173803494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="发布与订阅模式"></li>
<li>案例：<br>用户通知，当用户充值成功或转账完成系统通知用户，通知方式有短信、邮件多种方法 。</li>
<li>代码实现<ul>
<li>生产者<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuecheng.test.rabbitmq;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer02_publish</span> </span>&#123;</span><br><span class="line">    <span class="comment">//队列名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_INFORM_EMAIL = <span class="string">&quot;queue_inform_email&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_INFORM_SMS = <span class="string">&quot;queue_inform_sms&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_FANOUT_INFORM=<span class="string">&quot;exchange_fanout_inform&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建一个与MQ的连接</span></span><br><span class="line">            ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">            factory.setHost(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">            factory.setPort(<span class="number">5672</span>);</span><br><span class="line">            factory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">            factory.setPassword(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">            factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);<span class="comment">//rabbitmq默认虚拟机名称为“/”，虚拟机相当于一个独立的mq服务器</span></span><br><span class="line">            <span class="comment">//创建一个连接</span></span><br><span class="line">            connection = factory.newConnection();</span><br><span class="line">            <span class="comment">//创建与交换机的通道，每个通道代表一个会话</span></span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            <span class="comment">//声明交换机 String exchange, BuiltinExchangeType type</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 参数明细</span></span><br><span class="line"><span class="comment">             * 1、交换机名称</span></span><br><span class="line"><span class="comment">             * 2、交换机类型，fanout、topic、direct、headers</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.exchangeDeclare(EXCHANGE_FANOUT_INFORM, BuiltinExchangeType.FANOUT);</span><br><span class="line">            <span class="comment">//声明队列</span></span><br><span class="line"><span class="comment">//     (String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String,Object&gt; arguments)</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 参数明细：</span></span><br><span class="line"><span class="comment">             * 1、队列名称</span></span><br><span class="line"><span class="comment">             * 2、是否持久化</span></span><br><span class="line"><span class="comment">             * 3、是否独占此队列</span></span><br><span class="line"><span class="comment">             * 4、队列不用是否自动删除</span></span><br><span class="line"><span class="comment">             * 5、参数</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.queueDeclare(QUEUE_INFORM_EMAIL, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">            channel.queueDeclare(QUEUE_INFORM_SMS, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">//交换机和队列绑定String queue, String exchange, String routingKey</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 参数明细</span></span><br><span class="line"><span class="comment">             * 1、队列名称</span></span><br><span class="line"><span class="comment">             * 2、交换机名称</span></span><br><span class="line"><span class="comment">             * 3、路由key</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.queueBind(QUEUE_INFORM_EMAIL,EXCHANGE_FANOUT_INFORM,<span class="string">&quot;&quot;</span>);</span><br><span class="line">            channel.queueBind(QUEUE_INFORM_SMS,EXCHANGE_FANOUT_INFORM,<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="comment">//发送消息</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">                String message = <span class="string">&quot;inform to user&quot;</span>+i;</span><br><span class="line">                <span class="comment">//向交换机发送消息 String exchange, String routingKey, BasicProperties props,byte[] body</span></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 参数明细</span></span><br><span class="line"><span class="comment">                 * 1、交换机名称，不指令使用默认交换机名称 Default Exchange</span></span><br><span class="line"><span class="comment">                 * 2、routingKey（路由key），根据key名称将消息转发到具体的队列，这里填写队列名称表示消息将发到此队列</span></span><br><span class="line"><span class="comment">                 * 3、消息属性</span></span><br><span class="line"><span class="comment">                 * 4、消息内容</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                channel.basicPublish(EXCHANGE_FANOUT_INFORM, <span class="string">&quot;&quot;</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">                System.out.println(<span class="string">&quot;Send Message is:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(channel!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>邮件消费者<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuecheng.test.rabbitmq;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2018‐06‐14 10:32</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer02_subscribe_email</span> </span>&#123;</span><br><span class="line">    <span class="comment">//队列名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_INFORM_EMAIL = <span class="string">&quot;inform_queue_email&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_FANOUT_INFORM=<span class="string">&quot;inform_exchange_fanout&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个与MQ的连接</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);<span class="comment">//rabbitmq默认虚拟机名称为“/”，虚拟机相当于一个独立的mq服务器</span></span><br><span class="line">        <span class="comment">//创建一个连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">//创建与交换机的通道，每个通道代表一个会话</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//声明交换机 String exchange, BuiltinExchangeType type</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数明细</span></span><br><span class="line"><span class="comment">         * 1、交换机名称</span></span><br><span class="line"><span class="comment">         * 2、交换机类型，fanout、topic、direct、headers</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_FANOUT_INFORM, BuiltinExchangeType.FANOUT);</span><br><span class="line">        <span class="comment">//声明队列</span></span><br><span class="line"><span class="comment">//            channel.queueDeclare(String queue, boolean durable, boolean exclusive, boolean</span></span><br><span class="line">autoDelete, Map&lt;String, Object&gt; arguments)</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数明细：</span></span><br><span class="line"><span class="comment">         * 1、队列名称</span></span><br><span class="line"><span class="comment">         * 2、是否持久化</span></span><br><span class="line"><span class="comment">         * 3、是否独占此队列</span></span><br><span class="line"><span class="comment">         * 4、队列不用是否自动删除</span></span><br><span class="line"><span class="comment">         * 5、参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(QUEUE_INFORM_EMAIL, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//交换机和队列绑定String queue, String exchange, String routingKey</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数明细</span></span><br><span class="line"><span class="comment">         * 1、队列名称</span></span><br><span class="line"><span class="comment">         * 2、交换机名称</span></span><br><span class="line"><span class="comment">         * 3、路由key</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueBind(QUEUE_INFORM_EMAIL,EXCHANGE_FANOUT_INFORM,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">//定义消费方法</span></span><br><span class="line">        DefaultConsumer defaultConsumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope,</span></span></span><br><span class="line"><span class="function"><span class="params">AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">long</span> deliveryTag = envelope.getDeliveryTag();</span><br><span class="line">                String exchange = envelope.getExchange();</span><br><span class="line">                <span class="comment">//消息内容</span></span><br><span class="line">                String message = <span class="keyword">new</span> String(body, <span class="string">&quot;utf‐8&quot;</span>);</span><br><span class="line">                System.out.println(message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 监听队列String queue, boolean autoAck,Consumer callback</span></span><br><span class="line"><span class="comment">         * 参数明细</span></span><br><span class="line"><span class="comment">         * 1、队列名称</span></span><br><span class="line"><span class="comment">         * 2、是否自动回复，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动回复</span></span><br><span class="line"><span class="comment">         * 3、消费消息的方法，消费者接收到消息后调用此方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(QUEUE_INFORM_EMAIL, <span class="keyword">true</span>, defaultConsumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>publish/subscribe与work queues有什么区别。<br>区别：<br>1）work queues不用定义交换机，而publish/subscribe需要定义交换机。<br>2）publish/subscribe的生产方是面向交换机发送消息，work queues的生产方是面向队列发送消息(底层使用默认交换机)。<br>3）publish/subscribe需要设置队列和交换机的绑定，work queues不需要设置，实质上work queues会将队列绑定到默认的交换机 。<br>相同点：<br>所以两者实现的发布/订阅的效果是一样的，多个消费端监听同一个队列不会重复消费消息。</li>
<li>实质工作用什么 publish/subscribe还是work queues。<br>建议使用 publish/subscribe，发布订阅模式比工作队列模式更强大，并且发布订阅模式可以指定自己专用的交换机。<h2 id="路由模式-Routing"><a href="#路由模式-Routing" class="headerlink" title="路由模式 Routing"></a>路由模式 Routing</h2><img src="https://img-blog.csdnimg.cn/20210523173851477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="路由模式"></li>
<li>路由模式：<br>1、每个消费者监听自己的队列，并且设置routingkey。<br>2、生产者将消息发给交换机，由交换机根据routingkey来转发消息到指定的队列。<h2 id="主题模式-Topic"><a href="#主题模式-Topic" class="headerlink" title="主题模式 Topic"></a>主题模式 Topic</h2><img src="https://img-blog.csdnimg.cn/20210523174552246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="主题模式"></li>
</ul>
<p><strong>todo…..</strong></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>韭菜成长记</title>
    <url>/%E9%9F%AD%E8%8F%9C%E6%88%90%E9%95%BF%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>投资有风险，入市需谨慎。</p>
</blockquote>
<a id="more"></a>

<h1 id="理财入门学习-韭菜养成记"><a href="#理财入门学习-韭菜养成记" class="headerlink" title="理财入门学习(韭菜养成记)"></a>理财入门学习(韭菜养成记)</h1><h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><blockquote>
<p>凡是涉及到跟钱的安排，都是理财。<br>摆脱穷人思维，建立富人思维。</p>
</blockquote>
<ol>
<li><strong>收入-支出 = 结余</strong></li>
<li>资产的内涵是 <strong>现金流</strong></li>
<li>如何实现财务自由</li>
</ol>
<ul>
<li>工资形成结余</li>
<li>用结余去换生钱资产</li>
<li>生钱资产产生非工资收入</li>
<li>非工资收入帮助我们实现财务自由</li>
</ul>
<ol start="4">
<li><strong>当你的生钱资产，产生的非工资收入，覆盖日常总支出，那么你就实现财务自由了。</strong></li>
<li>富人成功的两个秘密：</li>
</ol>
<ul>
<li><strong>生钱资产占总资产的80%以上</strong></li>
<li><strong>好支出占总支出的80%以上</strong></li>
</ul>
<ol start="6">
<li>一定要学会投资自己，务必让每一笔投资都是好支出</li>
</ol>
<hr>
<h2 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h2><blockquote>
<p><strong>量化思维</strong> 是富人最重要的思维之一。<br>存在银行的钱跑不过通货膨胀</p>
</blockquote>
<ol>
<li>用量化的思维看待事物，有时便宜的东西往往更贵，免费的东西或许贵的离谱，因为它们耗费了你大量的时间成本。</li>
<li>价值不是单一的衡量价格，而是背后带给我们的使用价值和回报价值。</li>
<li>无论何时，要让自己在心态建设上要像一个值得拥有那么多钱的人。（注：世间的一切美好你都值得拥有。）</li>
<li>给自己创造非工资收入，让自己不再为钱打工，而是让钱为自己打工，让钱为自己赚钱。</li>
<li>用<strong>量化思维</strong>助力财务自由三种方式</li>
</ol>
<ul>
<li>让自己的单位时间更加值钱（提高工作技能）。</li>
<li>把一份时间出售很多次（出书、版权、分红等）。</li>
<li>用钱买别人的时间，用别人的时间来为自己赚钱（最高级的方式）<ol start="6">
<li>富人珍藏优良（生钱）资产，穷人手里只有现金，劣币驱逐良币。</li>
<li>P2P理解：投资给放高利贷公司（一般达20%），高利贷公司通过放贷给借贷人，收取高额利息，而借贷人往往会还不起钱，这样放出去的钱不仅利息没收着，本金也收不回来，导致公司破产，投资人亏本。（<strong>你看中人家的利息，人家看中你的本金</strong>）<strong>注：P2P投资学相当于赌博，它不是国家交易所标准化的投资工具，==应当远离==</strong><h3 id="晚间学习"><a href="#晚间学习" class="headerlink" title="晚间学习"></a>晚间学习</h3><blockquote>
<p>理财能力决定复利最终效益<br>复利是人类的第八大奇迹。        ——爱因斯坦<br>投资的灵魂有两部分：理解复利的魔力；获取复利的能力。    ——查理·芒格<br><img src="https://img-blog.csdnimg.cn/20210109225930177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="关于复利"></p>
</blockquote>
<h4 id="关于复利"><a href="#关于复利" class="headerlink" title="关于复利"></a>关于复利</h4></li>
<li>复利是帮助普通人实现财务自由的法宝，复利通俗来说就是<strong>利滚利</strong>，<strong>今天的本金+利息=明天的本金</strong></li>
<li>复利的公式是： 最终收益 = 本金*（1 + 收益率）^时间</li>
<li>复利本质上是一种让钱高效生钱的思维方式。（富人财富都是复利积累起来的）</li>
<li><img src="https://img-blog.csdnimg.cn/20210109231202989.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="复利三大要素"></li>
<li>当前客观条件，拥有时间优势，缺乏本金，所以更要利用好本金，第一不要亏损，第二要高效的生钱。所以要<strong>找到优质的生钱资产并投资</strong>。另外，<strong>提高收益率才是最重要的。</strong></li>
<li>放在优质的生钱资产上使高效的钱生钱，无论价格涨跌，生钱资产都能赚到【现金流】，满足【高效生钱不亏损】的基本原则</li>
<li><strong>培养投资思维和理财能力</strong>，把握当下的机会，别让明天的自己后悔。</li>
<li><img src="https://img-blog.csdnimg.cn/20210109234755526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="复利三大要素对比"></li>
</ol>
</li>
</ul>
<h4 id="复利的反向作用"><a href="#复利的反向作用" class="headerlink" title="复利的反向作用"></a>复利的反向作用</h4><blockquote>
<p>复利的反向作用就是通货膨胀。<br>通货膨胀每天都在【收割】收益率低的人。<br>贫穷的原因很大一部分是因为懒惰，这种懒惰不是身体上的懒惰，而是思维上的懒惰。<br>不主动吃学习的苦，就得被迫吃生活的苦。<br><img src="https://img-blog.csdnimg.cn/20210109235111116.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="通货膨胀"><br><img src="https://img-blog.csdnimg.cn/20210109235610995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="巴菲特语录"></p>
</blockquote>
<ol>
<li>拥有了生钱资产，给你带来源源不断的现金流，在复利法则的作用下，帮助普通人实现财务自由。而你的理财能力高低决定了你收益率。</li>
<li>心疼投资大脑的钱，一直什么都不懂，不是被通货膨胀割韭菜，就是被投资市场割韭菜，一直穷下去。反之学习他人成功的方法，变成自己的技能，是最快的脱贫、升级之法！</li>
<li><strong>3142原则</strong>【资产分配的科学方法】<br> <strong>3【生活保障资金】</strong>：家庭年收入的30%用来作为应急金（包括日常消费，欲望消费），以备不时之需，可以通过无风险工具管理处置，灵活存取。（生活保障资金主要是日常开支，包含欲望消费）<br> <strong>1【风险保障资金】</strong>: 家庭年收入的10%用来配置家庭保险，作为家庭资产的后盾。（不要指望保险来赚钱。保险仅仅用来保障风险，而不是用来获得收益的。）<br> <strong>4【财务自由资金】</strong>：家庭年收入的40%用来养鹅，钱生钱。（可以拿出月收入的百分之十到二十的钱来养鹅，让钱生钱）<br> <strong>2【学习培训资金】</strong>：家庭年收入的20%用来投资自己，学习相关技巧，增加自己的工资和非工资收入。</li>
<li>建议：<ul>
<li>支付宝里是场外基金，收益低，一般跑不赢通胀，支付宝是第三方代理平台，代理为的是方便大家直接购买，因为你们暂时没有好的理财技能。支付宝，场外基金，有的收益看似高，但是卖出时会发现手续费特别高。（<strong>场外基金，简单来说就是，他代理了这个基金。卖给你，他拿点手续费，你挣一点钱</strong>）</li>
<li>银行的理财产品也不要买。</li>
<li>保险理财，更别买。<br>（<strong>理财型保险是远远跑不赢通胀的</strong>）</li>
</ul>
</li>
</ol>
<h5 id="总结：【关键富人思维-第四条】"><a href="#总结：【关键富人思维-第四条】" class="headerlink" title="总结：【关键富人思维-第四条】"></a>总结：【关键富人思维-第四条】</h5><p>⭐为什么说复利三要素中最容易掌控的是收益率？<br>复利三要素，本金、时间、收益率。把钱存在保险箱中，复利会发挥反向作用，把钱一口一口吃掉，长期来看1万元每年贬值1000元以上。投资开始的越早，时间要素发挥越大，复利的正向作用越早发挥作用。本金大的人，复利作用也比较大，但是投错了地方，本金再大也会亏完。如果本金和时间都不占优势，那么最有效的就是提高年化收益率，而提高年化收益率的关键在于自己的理财能力。</p>
<p>一句话总结：【时间无法改变，越早开始越好；本金依赖生钱资产；收益率源于理财能力，理财能力才是决定复利终值的关键】。</p>
<h5 id="【关键富人思维-第五条】"><a href="#【关键富人思维-第五条】" class="headerlink" title="【关键富人思维-第五条】"></a>【关键富人思维-第五条】</h5><p>为什么说投资自己的大脑、学会理财技能也是中产升级之法？<br>如同经典书籍《富爸爸》中说的，穷人卖时间换钱，其实本质是“卖命”。他们抱怨自己没有钱，其实本质是他们没有认识到投资自己的大脑是最快的脱贫致富之法。<br>比如一个专家花费一生写了一部巨著，我们花100元买了他的书回来看，其实某种意义上我们是买到了他一生的生命成果，学到了能获得成千上万的收益，这就叫“站在巨人的肩膀上”，贫穷的矮人站在“巨人的肩膀上”也会达到巨人的视野。</p>
<p>但很多人心疼这点投资大脑的钱，所以一直什么都不懂，一直贫穷下去。反之，穷人也能通过投资自己的头脑，学习他人成功的方法，买他人花了很多时间转化的成果，变成自己的东西，快速创造财富，这是最快的脱贫之法。</p>
<p>一句话总结：心疼投资大脑的钱，一直什么都不懂，不是被通货膨胀割韭菜，就是被投资市场割韭菜，一直穷下去。反之学习他人成功的方法，变成自己的技能，是最快的脱贫、升级之法。</p>
<hr>
<h2 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h2><h3 id="早间学习"><a href="#早间学习" class="headerlink" title="早间学习"></a>早间学习</h3><blockquote>
<p>我们常常高估了一天内可以做到的事情，却低估了一年里可以做到的事情。</p>
</blockquote>
<ol>
<li><strong>投资是长期行为</strong>，不是短期投机。</li>
<li>收入低、月光，可采取定投方式，勿小看长期小定投获得的收益。</li>
<li>理财思维越早建立越好；理财技能越早学习越好；理财，越早开始越好。</li>
<li>抛弃穷人思维，学习富人思维，做出正确选择，现在行动，改变未来。<br><img src="https://img-blog.csdnimg.cn/20210110130411507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="建立富人思维"><img src="https://img-blog.csdnimg.cn/20210110130518339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="人生手指曲线示意图"></li>
<li>做一个长期主义者，在学习中前进，坚持锻炼，相信复利和时间会带来正向的回报。</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20210110133325681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="个人资产配置"></p>
<h3 id="科学记账法"><a href="#科学记账法" class="headerlink" title="科学记账法"></a>科学记账法</h3><blockquote>
<p>了解账本对你没用，有用的是了解自己的财富增值速度并与之和平相处</p>
</blockquote>
<ol>
<li>第1步，就是要学会将自己的记下的帐转化为有用的资讯，从中解读自己的消费习惯，学习如何控管支出，增加资金的利用效率。</li>
<li>第2步：养成记账习惯后定时分析</li>
<li>第3步：不要沉湎于记录日常生活</li>
<li>第4步：了解你的财富才能控制你的欲望<blockquote>
<p>当一个人能够清楚看见未来的财务状态时，就会感受到身心平衡，上班工作也就更快乐，心情也比较容易满足。也许这听起来有些夸张，不过只要你也尝试跟着做，就一定能感同身受。<br>![sma<img src="https://img-blog.csdnimg.cn/20210110140804854.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="rt原则"></p>
</blockquote>
</li>
</ol>
<h3 id="晚间学习——学习理财工具"><a href="#晚间学习——学习理财工具" class="headerlink" title="晚间学习——学习理财工具"></a>晚间学习——学习理财工具</h3><blockquote>
<p>不懂不乱投，懂了放心投。<br>学好理财技能后再开始投资。</p>
</blockquote>
<ul>
<li><strong>晚间一读：</strong><a href="http://xiaobai.yaocaiwuziyou.com/index.php/Home/OldTest/NewWan?type=40&id=2092276&imid=10107060&num=3&isshow=1">财务自由的三大核心工具</a><h4 id="四种理财工具"><a href="#四种理财工具" class="headerlink" title="四种理财工具"></a>四种理财工具</h4></li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20210110212426594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="理财金字塔"></p>
<ol>
<li><strong>无风险理财工具</strong>：国债、定期存款、国债逆回购、货币基金、银行理财（保本型），年化收益率一般在3%~5%左右，可管理零钱，但是远低于通货率，不是事先财务自由的理财工具。</li>
</ol>
<ul>
<li>国债逆回购：本质是国债抵押借款，是无风险的（属于很好管理零钱的工具）<br><img src="https://img-blog.csdnimg.cn/20210110213053721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="国债逆回购"></li>
<li>货币基金： 也称“火鸡”，余额宝属于货币基金。<blockquote>
<p>捡钱小窍门：国债逆回购+货币基金，灵活运用你。比如：我们平时把钱买货币基金，每年可以获得3%左右的无风险收益。当国债逆回购收益高时，卖掉货币基金直接买入国债逆回购。等国债逆回购的钱到期后，当天再买进货币基金。因为买卖货币基金没有手续费。这样组合操作在保证资金方便使用的情况下，可以获得4%—6%的无风险年化收益率。但这个操作只适用于零钱管理，不适合长期理财，因为收益率是跑不过通胀率的，钱还是在贬值，【不是实现财务自由】选择的理财工具 。</p>
</blockquote>
</li>
</ul>
<ol start="2">
<li><strong>低风险的理财工具</strong>（目前而言，是重点，适合我们），分两类</li>
</ol>
<ul>
<li>一类是低风险中等收益，年化收益率一般6%—15%之间，主要包括【分级基金A】、【可转债】、【债券基金】、【股票指数基金】</li>
<li>另一类是低风险高收益，年化收益率一般在15%—30%之间，主要包括【生钱资产类型】的股票、REITs、房地产。</li>
</ul>
<p><strong>具体低风险的工具有：</strong><br>    - 【生钱资产类型的股票】就是持续分红的股票。<br>    &gt;股息率=股息除以股价<br>    - 生钱资产类型的REITs(瑞次)。【REITs】是房地产投资信托基金。投资REITs本质就是投资房地产（国外）。【生钱资产类型的REITs】就是持续高分红的REITs。其实一般的REITs都是持续高分红的。因为各国法律都规定REITs每年至少要把90%以上的净利润分配给投资者。（<strong>生钱资产类型的REITs也是一只持续下大金蛋的鹅。</strong>）<br>    - 【可转债】可以转换成股票的债券。在 100 元以下买进高信用等级的可转债没有风险。股市上涨的时候还能获得超额收益。是一种收益下有保底，上不封顶的投资工具。一般 90 元以下买进，年化收益率可达到 10%-20%。<br>    - 【股票指数基金】指数基金具有永生不死，长期上涨的特点。在合适的价位买入股票指数基金长期持有几乎没有风险。其年化收益率一般在10%—15%！（指数基金具有永生不死，长期上涨的特点。在合适的价位买入股票指数基金长期持有几乎没有风险。其年化收益率一般在10%—15%！）<br>3. <strong>中风险的理财工具</strong><br>4. <strong>高风险的理财工具（尽量别碰）</strong><br>    - P2P(网贷即属于p2p)<br>    - 私募资金<br>    - 比特币<br>    - 炒外汇<br>    - 收藏品<br>    - 期货<br>    - 耗钱资产类型的房地产</p>
<blockquote>
<p>中国这15 年中主要资产的收益率排名是： 股票 &gt;债券&gt;通胀&gt;房地产&gt;现金<br><img src="https://img-blog.csdnimg.cn/20210110220743152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="各类工具收益率排名"><br><img src="https://img-blog.csdnimg.cn/20210110220902742.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="实现财务自由三大核心工具"><br>用好了企业这个核心工具，你会成为企业家<br>用好了股票或REITs这两个核心工具，你会成为投资家<br>用好了企业、股票、REITs这三个工具，你会成为资本家</p>
</blockquote>
<blockquote>
<p>⭐正确系统的投资技能包括：<br>①理财的底层逻辑、富人思维<br>②股票的海选<br>③精选出好公司<br>④财务报表分析<br>⑤企业分析<br>⑥计算好价格<br>⑦制定买进标准<br>⑧制定持有标准<br>⑨制定卖出标准等</p>
</blockquote>
<h5 id="投资"><a href="#投资" class="headerlink" title="投资"></a>投资</h5><p>投机就是：所谓低买高卖。想着挣快钱，我投了就要挣钱。亏了怪这个理财工具风险大。不看本质，就想着挣钱。这和赌博没什么区别。</p>
<h5 id="价值投资"><a href="#价值投资" class="headerlink" title="价值投资"></a>价值投资</h5><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>⭐【重点一】：无风险投资工具，尤其关注逆回购、货币基金也就是捡钱小秘密<br>⭐【重点二】：低风险投资工具，尤其是生钱资产类型的股票、REITs<br>⭐【重点三】：我们实现财务自由的三大核心工具——股票、REITs、企业</p>
<p>【<strong>关键富人思维第六条</strong>】<br>⭐到底什么时候可以开始投资？<br>为什么有的人买股票必亏，看了几本书，学了几天课就急急忙忙要去股市里了，我们学车还要几个月，投资作为高度专业化、精细化的一个领域，不经过【系统的】学习就去“尝试”，这和训练了三天、看了几本武侠小说就上战场的士兵有什么区别呢？</p>
<p>士兵进行系统训练是为了保命，投资者进行系统的学习是为了保钱的“命”，反之，学个半瓶水就去投资市场，美其名为“试试”，这样的“试试”不会学到任何教训、经验，只会收获痛苦。</p>
<p>那些经过系统训练的人会把那些无知且自以为是的人收割的一滴血不剩</p>
<p>【这就是投资的真相】，不系统学习就想赚快钱就是送命。当你打算投资一个目标，有系统的分析方法，不再为了涨跌而心惊胆战的时候，这才是投资可以真正开始的时候。</p>
<p>一句话总结：投资第一原则：不懂不要投，懂了安心投，盲目“尝试”无疑送命，系统训练方可真正保住钱“命”。<br><img src="https://img-blog.csdnimg.cn/20210110221757562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h2><h3 id="早间阅读：《怎么才能越花越有钱》"><a href="#早间阅读：《怎么才能越花越有钱》" class="headerlink" title="早间阅读：《怎么才能越花越有钱》"></a>早间阅读：《怎么才能越花越有钱》</h3><ul>
<li>分清投资与消费</li>
<li>当下社会，仅靠勤劳也很难实现实现致富了。</li>
<li>今早<strong>工资收入</strong>和*<em>非工资收入</em>两条腿走路。**</li>
<li>始终相信自己是一个富人，别认为富人的世界我们一辈子无法企及。</li>
<li>一定要懂得投资自己，尤其是在收入少的时候。<h3 id="晚间学习-1"><a href="#晚间学习-1" class="headerlink" title="晚间学习"></a>晚间学习</h3><blockquote>
<p>学好财报是选出好公司的关键</p>
</blockquote>
<h4 id="财务报表"><a href="#财务报表" class="headerlink" title="财务报表"></a>财务报表</h4></li>
<li>含义：公司的流水。</li>
<li>作用：排雷，证伪而不是证实。<blockquote>
<p>资产负债率 = 负债 / 总资产<br>说明：资产负债率大于70%的公司，安全性差；资产负债率小于40%的公司，安全性很高</p>
</blockquote>
</li>
<li>理解应付和预收</li>
<li>应付：【先用货，后给钱】，牛！</li>
<li>预收：【先收钱，后发货】，牛！<blockquote>
<p>【应付+预收】是指我们占用别人的钱<br><img src="https://img-blog.csdnimg.cn/20210111213927531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="应付预收"><br>【应付预收】减去【应收预付】，可以看出这个企业的竞争力如何！⭐相减得出金额越大，说明公司的竞争力越强。⭐相减得出金额越小，竞争力越弱。</p>
</blockquote>
</li>
<li>【安全性】通过资产负债率来判断 </li>
<li>【竞争力】通过应付预收减去应收预付的大小来判断<blockquote>
<p>查看上市公司财报：<a href="http://www.cninfo.com.cn/new/index">http://www.cninfo.com.cn/new/index</a> （巨潮资讯网）</p>
</blockquote>
<ul>
<li>看财报步骤<br><img src="https://img-blog.csdnimg.cn/20210111223536842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="看财报步骤"><br><img src="https://img-blog.csdnimg.cn/20210111223848694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210111223930157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210111223950730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><blockquote>
<p>【成长有顺序，生活致富也有顺序】——先投资大脑，掌握理财的技能，然后再去生钱，负债不学习只会越来越穷。</p>
</blockquote>
</li>
<li>读懂财报的好处<blockquote>
<p>1.读懂财报可以让自己找工作的时候选到人均工资高的好公司，这样相同的时间努力可以获得更高的回报。<br>2.读懂财报可以更了解自己工作的公司，有利于升职加薪，做高管、做老板一定要能读懂财报才行。<br>3.读懂财报可以让自己找到更靠谱的伴侣，这个非常重要。<br>4.读懂财报可以让自己更了解家庭的财务状况，可以更有效的改善家庭的财务状况。<br>5.读懂财报可以让自己选出最好的生钱资产，通过好股票/好REITs会获得持续的现金流，会真正意义上实现拥有“会下金蛋的鹅”。</p>
</blockquote>
<h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><blockquote>
<p>【第一个重点】<br>通过财报看企业，用安全性和竞争力淘汰你手里的坏企业。<br>️【第二个重点】<br>中产与富人的关键区别在于是否能够识别生钱、耗钱、其他资产，并科学的持有他们。<br>️【第三个重点】<br>无产、中产、富人是可以相互转换的，学好理财技能就能由穷转成中产，由中产转成富人。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>【关键富人思维–第七条】<br>为什么月光、负债的人应该拿出一部分资金学习理财技能？<br>这里的负债主要指的是让自己的财务状况不断恶化的【坏负债】。<br>⭐️月光和负债只是不懂理财的结果，没有理财技能才是月光和负债的原因。很多人一方面不懂投资的骗局，一方面又眼红想赚一下，最终都入了骗局的“坑”，如果提前投资自己的大脑，难道还会犯这样的错误吗？还有很多人，本来钱就不多，贷款买了一堆耗钱资产，要么不断的刷信用卡、花呗、借呗，窟窿越来越大，要么生活拮据，每天人前风光，人后遭殃。<br>但对于投资自己，提升理财技能的好负债，他们却斤斤计较，错失了复利的好机会，这样的人生活只会越来越难过。<br>【成长有顺序，生活致富也有顺序】——先投资大脑，掌握理财的技能，然后再去生钱，月光、负债不学习只会越来越穷。<br>一句话总结：月光、负债是财务病，病根是缺少理财技能，忽视病因、不治病根，坏支出、坏负债只会越来越严重。</p>
</blockquote>
<hr>
<h2 id="第五天：价值投资的奥秘"><a href="#第五天：价值投资的奥秘" class="headerlink" title="第五天：价值投资的奥秘"></a>第五天：价值投资的奥秘</h2><h3 id="早读《无论投不投资，你都是在投资》"><a href="#早读《无论投不投资，你都是在投资》" class="headerlink" title="早读《无论投不投资，你都是在投资》"></a>早读《无论投不投资，你都是在投资》</h3><ol>
<li>拥有第一笔钱的时候，就已经是开始了投资。</li>
<li>在法定货币时代，现金可以说是少有的100%确定亏损的资产。</li>
<li>有大量的研究证明，A股公司的长期年华回报率大约12%。如果我们满足于10%左右的回报，投资其实很简单：定投股票指数基金即可；如果想要获得年化20%甚至更高的回报，就需要学习股票和REITs投资了。</li>
<li>投资股票的本质是投资企业，通过【分析财报】和【分析企业】才能了解企业的内在价值，进而选出优质的好企业。</li>
<li>财报是看过去，过去看着还不错还是不够，还得看未来，未来通过企业分析来看。</li>
<li>只有主动改变自己的理财能力，才会改变现状，获得好的收益。</li>
<li>理财并不是一味的省钱，而是合理的支配钱，学会创造更多的钱。</li>
<li>建立富人思维，增值自己，学习理财技能；用技能分析，选出优质生钱资产（选出好股票、好REITs）;每月的收入拿出一部分投资，购买优质省钱资产，长期持有积累，利用复利发挥威力获得收益。<h3 id="午间防骗：炒外汇投资骗局"><a href="#午间防骗：炒外汇投资骗局" class="headerlink" title="午间防骗：炒外汇投资骗局"></a>午间防骗：炒外汇投资骗局</h3><h3 id="晚间学习-2"><a href="#晚间学习-2" class="headerlink" title="晚间学习"></a>晚间学习</h3></li>
<li>创办不了公司，可以通过分析投资好的上市公司，成为股东，也是实现财务自由的一个方式。<blockquote>
<p>中国的GDP为6.5%左右，中国股市的年化收益率一定是远大于6.5%的。<br>据统计：中国的GDP大概6.5%以上；中国所欲上市公司的平均年化收益率大概12%以上；中国好公司的平均年化收益率24%以上。<br>买到了好企业，股价跌的越多，你的收益就越高！？</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>⭐定投优质股票指数基金大概可以获得年化10%以上的回报。<br>⭐而想要获得年化20%甚至更高的回报，就需要好好学习股票和REITs的投资了。</p>
</blockquote>
<ol start="2">
<li>【生钱资产类型的股票】就是持续分红的股票，每年分红收益率越高越优质。</li>
<li>.认识股票。</li>
</ol>
<ul>
<li>简单来说，股票是一个凭证，证明你拥有某一家公司的股份，即股票是股份的凭证。股票的本质是企业。</li>
<li>何为股份？    股份就是你对某家公司拥有的所有权。<blockquote>
<p>中国A股市场有两大交易所，分别为上交所和深交所。<br>A股就是以人民币交易的，在大陆上市的公司。<br>A股交易时间：每周一到周五，早上九点半到十一点半，下午一点到三点，周末休市。</p>
</blockquote>
</li>
</ul>
<ol start="4">
<li>投资好公司的股票赚的是什么钱？</li>
</ol>
<ul>
<li>公司持续的现金分红；</li>
<li>股票价格上涨带来的价差收益。</li>
</ul>
<blockquote>
<p>股价下跌并不一定是风险，利润减少才是风险。<br>5. 为什么【好公司的股票】越跌收益反而越大呢？？？<br>首先，好公司的盈利是持续的，所以分红也是持续的，并不是一会儿分，一会儿不分；好公司定期会拿出净利润的30%到70%分红，这就是你的持续现金流入，也就是非工资收入。（生钱资产的定义是【持续的现金流入】）。好公司股价越跌，它的公家就变得越低，这时你可以那这分红的钱再以较低的股价买入更多的股票，此时你得到的股票数量也越多，而分红是按照你持有的股票数量分的<br>6. 公司的【市值】反映了市场在某个时期对这个公司的看法，也就是股价的表现；公司【价值】就是这个公司到底值多少钱，和公司利润相关。</p>
</blockquote>
<blockquote>
<p>【关键富人思维-第八条】<br>⭐股票价格大跌能跌出什么？<br>我们【投资股票正确的方法】可以分为两大步：<br>第一步：选出内在价值高的好企业<br>第二步：在好的价格及时买入<br>这两步是不能颠倒的。<br>【当股市的价格出现下跌时】，好企业代表的好股票会出现好的买入价格，但是坏企业会跌出让投机者眼红的“陷阱”。如果在选择企业这一步错了，不管是多便宜的价格都徒劳无功，反而损失惨重。<br>【理性的投资者】对自己无法预测股票价格有自知之明，因为价格的波动总是难以预测的，因此他们将主要精力放在好企业的选择上，当好价格出现的时候果断出手，而后不管是继续跌还是涨，都是任凭风浪起稳坐钓鱼船。他们一般很少看股票，却获得了很高的收益。<br>一句话总结：股票大跌既有机会也有陷阱，机会的识别需要眼力，机会的把握需要技能，当眼力和技能配不上这个机会的时候，往往会步入陷阱之中。</p>
</blockquote>
<h2 id="第六天"><a href="#第六天" class="headerlink" title="第六天"></a>第六天</h2><h3 id="早间阅读"><a href="#早间阅读" class="headerlink" title="早间阅读"></a>早间阅读</h3><blockquote>
<p>做父母的，给孩子设立一个成长账户，分两部分：<br>一部分是孩子成长储备的钱；一部分是孩子提高财商用的钱。</p>
</blockquote>
<blockquote>
<p>思维一：明白不做什么比明白要做什么更重要；<br>思维二：少犯错，更不要做可能让自己一无所有的事</p>
</blockquote>
<ol>
<li>轻资产:可以理解为资源、时间、技术、知识、服务，也可以理解成无形资产，一种运营模式。</li>
<li>重资产：有形资产，土地、厂房、设备等，需要较大资金投入，回报率低<h3 id="午间防骗"><a href="#午间防骗" class="headerlink" title="午间防骗"></a>午间防骗</h3></li>
</ol>
<p><strong>虚拟货币投资骗局</strong></p>
<h3 id="晚间学习：越了解企业，我就会越富有"><a href="#晚间学习：越了解企业，我就会越富有" class="headerlink" title="晚间学习：越了解企业，我就会越富有"></a>晚间学习：越了解企业，我就会越富有</h3><p><img src="https://img-blog.csdnimg.cn/20210113214336880.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="强大企业模型"></p>
<blockquote>
<p>上班者用企业分析模型看透工作，投资者用企业分析模型看透股票。</p>
</blockquote>
<blockquote>
<p>【关键富人思维第十条】<br>为什么工作者、投资者都需要通晓企业分析技能？<br>⭐并不是创业者 、大老板才需要了解企业。<br>【投资中】，股票本质是企业，只有把9大要素都分析清楚，才能分析出好企业，才能给企业估值.<br>【工作中】，干工作的时候要有企业经营的思维，这样才更容易升职加薪。<br>⭐即便不为升职，干工作的时候也要有企业经营的思维。因为当你站在更高层去看自己的工作内容的时候你才能更好的理解自己的工作内容，这样你可以把工作做成老板真正想要的样子。<br>而那些只盯着自己的岗位的“井底之蛙”，有的时候挨了骂都不知道为什么，因为他缺乏跳出自己的框框看企业的技能，这就是他自己工作干不好的原因。<br>所以无论投资、工作，都需要通晓企业分析技能。<br>总结一句话：工作者用企业分析模型看透工作，投资者用企业分析模型看透股票。</p>
</blockquote>
<blockquote>
<p>从长期来说，一只股票的回报率跟公司的发展是环环相扣的，如果一家公司 40 年来的盈利一直是它资本的 6%（ROE），那在长期持有 40 年后，你的年均收益率不会和 6%有什么区别，即便你当初买的是便宜货。如果该公司在 20-30 年间盈利都是资本的 18%（ROE），即便你当初出价过高，回报依然会令你满意！<br>——查理•芒格</p>
</blockquote>
<blockquote>
<p><a href="http://www.iwencai.com/unifiedwap/home/index">http://www.iwencai.com/unifiedwap/home/index</a></p>
</blockquote>
<h2 id="了解REITS"><a href="#了解REITS" class="headerlink" title="了解REITS"></a>了解REITS</h2><ol>
<li>含义：REITs是一种依照法律程序成立的，以发行股票或基金单位的方式汇集投资者的资金，由专业机构进行房地产的经营管理，并将90%以上的税后收入净额分配给投资者的一种信托组织。简单说，REITs就是代理投资者投资房地产的上市企业，面临着系统的、严格的监管，这样更能保障中小投资者的利益。<br><img src="https://img-blog.csdnimg.cn/2021011420582171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="REITs定义"></li>
<li>优点</li>
</ol>
<ul>
<li>定期强制高分红。</li>
<li>投资门槛低。一般千元甚至更低就可以投。</li>
<li>交易成本低。一般REITs会免企业所得税。投资者买卖REITs只需要支付交易佣金，和买卖股票一样，不用支付其他高额税费。</li>
<li>流动性强。买卖REITs像买卖股票一样方便。在交易时间内随时可以卖掉。</li>
<li>专业化管理。REITs的管理团队都是房地产领域的专业人士。他们管理物业的能力一般会比个人强很多。</li>
<li>REITs收益率相对较高。<br><img src="https://img-blog.csdnimg.cn/20210114210401640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ul>
<ol start="3">
<li>投资REITs收益来源<blockquote>
<p>一部分是【分红】带来的收益<br>一部分是资产【价格上涨】的收益</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>【关键富人思维第十一条】<br>为什么要自己掌握理财技能才是最可靠的？<br>很多之前学员都表示跟着自己的家人、朋友投资，当赚了的时候会特别感激对方，但是亏的了时候又怨恨对方不靠谱。其实他们的家人、朋友很多也真的是好心，但是他们没有掌握投资技能，靠着小道消息，本质是投机，赚了是运气好，长期亏损是必然。<br>理财投资这么重要的事情，如果交给别人，就像把自己的“财富之命”交给了别人，如果遇上的是一个没有扎实理财技能的人，那就对自己的“财富之命”太不负责了。因为缺乏理财技能的人，是根本拿不住好股票的，他们无法分析企业，就无法正确面对价格的波动，最终还是逃不过亏损的命运。<br>而听信银行经理的话，选择银行理财，长期看收益连通货膨胀的贬值都跑不赢。特别是【中产家庭】，与其听信他人的小道消息，【最可靠的】还是自己通过学习成为家庭资产理财师，为自己的家人打理财产，创造更多非工资收入，这才是最安全可靠的方法。<br>【一句话总结】：最重要的本事需要掌握在自己手中，就像企业要把核心竞争力掌握在自己的手中一样，理财——事关自己和家庭的财富之命，只有自己掌握了，才是对自己的负责。</p>
</blockquote>
<blockquote>
<p>【关键富人思维–第十二条】<br>我们最应该为孩子留下什么财富呢？<br>我们总想为孩子留下一笔钱、一套房等，这并没有错，但我们给孩子留下的最重要财富却不是金钱。如果给孩子留下了金钱，但孩子缺乏理财的意识和能力，金山也会吃空，正如我们前面讲到的前山西首富李兆会一样。<br>【聪明的父母】会选择在孩子很小的时候就开始正确的财商教育，让孩子从小就养成正确的金钱观，从很小的时候就享受理财能力带来的复利。而这都取决于【父母的理财能力】，如果父母对理财一无所知，或者学个半瓶水，看似明白实则跑偏，那么不仅教不好孩子，还会把孩子带到错误的认知方向。<br>【不要让孩子像我们父辈和自己走过的路一样】，那样又要陷入“无知”—“试错”—“损失”得穷人思维里，耗费大量的时间成本、试错成本，又错失了大量的机会成本。我们走错的路，就不要让孩子再走一遍了。<br>【一句话总结】：我们最应该留给孩子的财富是可贵的品格和可靠的理财能力，身教重于言教，用我们的行为带动孩子品格的养成，用我们的理财能力让孩子的财商有一个好基础</p>
</blockquote>
<blockquote>
<p><strong>投资步骤</strong><br>①理财的底层逻辑、富人思维<br>②股票的海选<br>③精选出好公司<br>④财报分析<br>⑤企业分析<br>⑥计算好价格<br>⑦制定买进标准<br>⑧制定持有标准<br>⑨制定卖出标准等</p>
</blockquote>
]]></content>
      <tags>
        <tag>理财</tag>
      </tags>
  </entry>
</search>
