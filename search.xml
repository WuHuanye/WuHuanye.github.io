<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>java构建树</title>
    <url>/java%E6%9E%84%E5%BB%BA%E6%A0%91/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote>
<p>在项目中，我们经常涉及单张表数据进行树形目录结构展示（即具有层级关系的数据结构），比如菜单层级展示、商品分类展示等。</p>
<a id="more"></a>
</blockquote>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><blockquote>
<p>单张表之间要具备层级关系，必然会有能体现父子之间的字段，比如常见的<strong>id</strong>和<strong>parentId</strong><br>比如这样一张表<br><img src="https://img-blog.csdnimg.cn/20210417122242878.png" alt="表结构"><br>pid为0时即为最高层级，pid为 1366的是id为1366的孩子，在上面的体现是<strong>裤子和上衣都在衣服这一个分类下面</strong><br>要实现这张表树形结构的展示，我们一方面得在该表对应的实体类里添加一个自身的集合childList作为其孩子的集合。</p>
</blockquote>
<h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><blockquote>
<p>这里我是将它封装成一个工具类使用。<br>注意：这里默认表里的父级字段为 <strong>parentId</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 构建树的时候需要实体继承此类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 吴焕业</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/15 17:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">C</span> <span class="keyword">extends</span> <span class="title">TreeNode</span>&lt;?&gt;&gt;</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 父id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String parentId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  子节点j集合</span></span><br><span class="line"><span class="comment">     * 	非数据库字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;TreeNode&gt; children;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>工具类实现树形结构的展示（递归思想找子节点）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span>: 生成树工具(根节点可有多个)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span> 吴焕业</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> treeNodes 所有节点（所有数据）</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> parentId  指定根节点的唯一标识</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 2020/10/15 18:01</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span>  <span class="keyword">static</span> &lt;T extends TreeNode&gt;<span class="function">List&lt;T&gt; <span class="title">build</span><span class="params">(List&lt;T&gt; treeNodes, String parentId)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (parentId == <span class="keyword">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       List&lt;T&gt; rootNodes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span> (T t : treeNodes)&#123;</span><br><span class="line">           <span class="keyword">if</span> (parentId.equals(t.getParentId()))&#123;</span><br><span class="line">               <span class="comment">//得到根节点</span></span><br><span class="line">               rootNodes.add(t);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (T t : rootNodes)&#123;</span><br><span class="line">           t.setChildren(getChildNodes(t,treeNodes));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> rootNodes;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span>: 获得子节点</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span> 吴焕业</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> t</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> treeNodes</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 2020/10/6 18:27</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> &lt;T extends TreeNode&gt;<span class="function">List&lt;TreeNode&gt; <span class="title">getChildNodes</span><span class="params">(TreeNode t,List&lt;T&gt; treeNodes)</span></span>&#123;</span><br><span class="line">       List&lt;TreeNode&gt; childNodes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span> (TreeNode t1 : treeNodes)&#123;</span><br><span class="line">           <span class="keyword">if</span> (t1.getParentId().equals(t.getId()))&#123;</span><br><span class="line">               childNodes.add(t1);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (childNodes.size() == <span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (TreeNode t1 : childNodes)&#123;</span><br><span class="line">           t1.setChildren(getChildNodes(t1,treeNodes));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> childNodes;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote>
<p>要实现树形结构的步骤：</p>
<ul>
<li>表设计要有父子级关系（一般用 id 和 parentId）</li>
<li>实体要新增 子节点 的集合变量，一般用List接收</li>
<li>查找获得所有符合要求的数据，通过遍历得到 <strong>父节点集合</strong>，遍历<strong>父节点集合</strong>，遍历<strong>子节点结合</strong>，父节点的id和子节点的父id相等时，说明该节点数属于当前父节点的孩子，将其放入父节点的孩子集合中，遍历结束后，将子节点集合赋值给 <strong>集合变量</strong>。（这里用递归思想实现）</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>utils</tag>
      </tags>
  </entry>
  <entry>
    <title>基于hexo搭建个人博客</title>
    <url>/%E5%9F%BA%E4%BA%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<blockquote>
<p>百金买骏马，千金买美人；万金买高爵，何处买青春？ —— 屈原</p>
<a id="more"></a>
</blockquote>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>1、 安装git    (因为git很早之前已安装，本文在这里就不说明了)</p>
<p>2、 安装nodejs</p>
<p>3、安装 hexo</p>
<p>4、正式搭建</p>
<h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><p>因为hexo依赖于nodejs，所以得先下载nodejs。下载地址：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a>  </p>
<img src="/%E5%9F%BA%E4%BA%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/nodejs.png" class="" title="This is an example image">

<p>下载下来是一个安装包，双击一路【next】默认即可（安装位置可自选）</p>
<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>在任意位置创建一个文件夹，自定义命名，这里以<strong>blog</strong>命名,在当前位置**(即blog的上一级目录)<strong>鼠标右击选择</strong>git bash here**,因为国内要直接下载安装 hexo 会很慢很慢，所以</p>
<ul>
<li>输入一下命令安装 淘宝镜像</li>
</ul>
<blockquote>
<p> npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p>
</blockquote>
<ul>
<li>安装成功后，输入命令开始安装<strong>hexo</strong></li>
</ul>
<blockquote>
<p>cnpm install -g hexo-cli</p>
</blockquote>
<ul>
<li>安装成功后，<strong>初始化blog</strong></li>
</ul>
<blockquote>
<p>hexo init blog  #这里的blog是你之前新建的文件夹名，比如你命名为test, 则这里的命令为 hexo init test</p>
</blockquote>
<ul>
<li><p>初始化完成后，进入blog文件夹，发现生成很多文件</p>
<img src="/%E5%9F%BA%E4%BA%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E5%8D%9A%E5%AE%A2%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" class="" title="This is an example image">

</li>
</ul>
<blockquote>
<blockquote>
<p>node_modules:各依赖    source:源码     themes:存放博客主题    _config.yml:博客配置文件</p>
</blockquote>
</blockquote>
<h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>经过前面的几步，准备工作已完成。下面开始正式搭建及美化部署。</p>
<blockquote>
<p>1、cd blog 进入blog文件夹</p>
<p>2、鼠标右键<strong>gitbash here</strong>,输入</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>该命令为启动服务命令，启动后，本地浏览器访问<strong>localhost:4000</strong>查看效果。</p>
<hr>
<h2 id="以github作为服务器将本地博客推至github上面"><a href="#以github作为服务器将本地博客推至github上面" class="headerlink" title="以github作为服务器将本地博客推至github上面"></a>以github作为服务器将本地博客推至github上面</h2><ul>
<li>通过以上几个步骤已经实现了在本地浏览器访问博客，接下来说明如何推到远端并访问。</li>
</ul>
<h3 id="注册一个github账号http-github-com"><a href="#注册一个github账号http-github-com" class="headerlink" title="注册一个github账号http://github.com/"></a>注册一个github账号<a href="http://github.com/">http://github.com/</a></h3><ul>
<li>登录进入github中，创建仓库，即<strong>new repostory</strong></li>
</ul>
<img src="/%E5%9F%BA%E4%BA%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93.png" class="" title="This is an example image">

<ul>
<li>复制该仓库的链接</li>
</ul>
<img src="/%E5%9F%BA%E4%BA%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E5%A4%8D%E5%88%B6%E9%93%BE%E6%8E%A5.png" class="" title="This is an example image">

<ul>
<li>回到blog文件夹，打开_comfig.yml文件，编辑deploy下的这几个参数值，没有的自己加上，把<strong>repo</strong>的地址改为自己的</li>
</ul>
<img src="/%E5%9F%BA%E4%BA%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/cofig%E7%BC%96%E8%BE%91%E5%8F%82%E6%95%B0.png" class="" title="This is an example image">

<ul>
<li>在blog文件夹下<strong>gitbash here</strong>,依次输入</li>
</ul>
<blockquote>
<p>cnpm install hexo-deployer-git –save  #安装git部署插件</p>
<p>hexo clean  #清理缓存，实际上是把public文件夹删除</p>
<p>hexo g  #重新生成public文件夹</p>
<p>hexo s  #启动服务，本地查看是否成功</p>
<p>hexo d  # 将本地博客推至远程仓库中，推送完成之后浏览器访问<strong>你的github用户名.github.io</strong>查看效果</p>
</blockquote>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>复盘</title>
    <url>/%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3ba0fe2925c20fdbc05a61cb45ec0be040c746156a56b4fe0ea61d5d22d1a264">a756220a6413262c08d2e52bbc7378bf4e656ee4729e1645685e19410990e5e9c4fe4381fcfa2bc1375884c6e748155099140a4542f31b97b1de3a5ff4b5fac496e28e7b9e4b0e8eeab6f2e86ea98ce2750e85933d5b2bd8b1506020a587d2241d4e5bd1990bd69dd1fdaf5098971e11fc76694824bc39e38fb454c215dd812bece06c1898af6a7a3aa46185e3891c1f4232a9b7328b5bcaf0d8d5716f94aa2e1320fa55e0577c07e3651647ae319e1184c9974ac6a164c3a05c497e9a121da1a9579a485ad2e9379ca1eea07be00668ae2b2d5ddaa8093411528c5d62e2c46207a6b2fdbf873c43ddd86d92476c891a4c9ddc6b3cc20b3ef1224d45f0b62dd33cc412773c153dd1653180f66210ae8bf6b86dadc5cf98833d0ee0effd95f9afb95615215499af41a2ccdc6041d3a025584b1084c1b3b97e34fc54369a28e5c383e462b5236f9bf9b175d9b49f64408fae05d011113333d284d2a3d7f645804bd0460a89264461f7609469a0231eba07e42f196f916293830c480b49dcfbb0d88d27548efe05de73a892dc19bad15952f1171289ad19269130a6be41a1c6afb27986b127005510194b33d3d5966752b0d3b616d006352bed03077332727db3a942a26330b5fb3583a6d55f3764cc9f1f2a4b92fb830708e87b68523895dfc4002a8937485418e71639999d91f7ab4c55495ed33fd3ff0e62cc40e187be3f6a84cdf70ab446d1bdab31d78a1553f0fe4710f93cec0e9a00d02b54f7e1126b8545002a01fcfeafcd4fcbbcc1379e159ad0843aecc5f296191ac966f83ae3c99a4f46fa8bdc2dfb6666064f8132ac764153c0f1c845742b03876a4ea9c6b16b93d4f1bd0ab996a56190392d67e3e9ac709c747b160f3e3be55c1d7b1986fe25efa6dad606d42401a852235d12a8875c5f3268f3a06976cbd6da27bb16456b85032f756916c7be212cf6be7d2833bc5c881dff07aa00ddaadf2b10b25a14f4607d93093397d14c76834a801b0225ce7adf6248c0316d07afbdde834d2e22eda4ec1dcface620a99f22c895acda7900ff83c2ae8cf650d280a2d1f46407300924e6cb4d787f950ca18a2cfc6a6bf1b9384defdd00357bffdab49f05410c89eac417349cc9e9d4745bdcc8d2c3e148faa86e6cdd122750f6b8b79028f7d2df27abe7f98f67cdf70e7fee0254fafcad248b1269937985540b346320c00e8d5e84ce5d94beeb16c970caab7615cf5cfbd5c08ba30533370d6eacb48ec35c19aac560e79974a2fa14cba4f3a12dfcb4e131f78b068ed26f22059e75442534111f3cfd145f57660c0fb398d47381945c3858ec1b3d3097763d6e06998e7ab5d5f8e76fd14fec507e1f789ebd826ecd5acb119112374b3c78d256004e6e6a722d99d0da61156a9a433a211c6d6077bc1d07c858dc257021d10f9bac55aea0f140c8093916b4ce67e35369d7b0e55b67c72f8eff4255d37fc15a638b3a07128b55482e550c7b78abf3008792dcf5da49c098bb4a3719ba9758840e3858881ba66d2e18e607775667a3498ceccc70b6cfe0e0de17146e6afeb7f18930c8cf1f1a2ab5894670161f05e2280c2072ea51d5a880a447d86d8d0e120b53dd92d45ccf0ee58ddb43bd5ffac1258478796413cf07f76e60107370d106c69e6d8b9e3a34cece78ac85a77fb9ad25261f26eb73395f72e45a27bbb5d9ccee20a085c87fee351fb8f47e349eacb726e0930f6d4f8abddf8c926e27a5e62b71bdf503abaebd497f5b9ca4994d1461e72c0da1442f4d836a1e386a0e30af8db9e5f32921801ff76e36cde0870d019f27c804b9473d0fffc665d7a94563ae6daeb1bc201e812f1ed22296fd0477d161c4eb047e487607bf236c191cb282ac2e2b485a01298c3bb36e012f34c29460f86f1cd02c1213071c5461999feaa24e77dc99632a48a6b5608518e7aa67a07a54a28110ec13c439d538cfe1d39ff2ad0b6d013cae6cc173a7d870b7d1a432c5c26ae9bedf20a901f9749ce099b5225ff697e134068fe1b009cca0179bef3de280fa8ad8d5ef0c45687374cc35cac1546481ceedb50b214bcad98157ea29e9a52bea7c7fd50ff29f7bec72bc251af85448d1a439fc2a849204f90db5a8e0c07955cfe7be548f10bbc5bd22ebb17c8d48d2047ab849786990e513f302104d2677cbbf415f89fb1aa3cb368e8430d8e994c002017039d5790c5f550ba028fdf6da7216839d8b37908eadab76e16f8a2762b95f5f3e3c8a9b47eb5caff5b0af19d46f12e30499d6141d648f270467a3bfbf4e0b41ba3f2dac7e9d90a4dac60efcef3238745daeb022114729f222df514a5cc5ae1efe4f2520fca238a68910b4b4338987f9e1ed7ed81278f40b2b754bbb288b64d3144d20b5bbb44996dfa161191ca29b13d2a36c338174d40ede04776967f91c0c85d2d1bf605be4d8ce82402e1a867d79bafdd1de20e11ead39d6dc557815b641754e0a71ced9186fa3d8225cdb3f9486f01a995a5b1999976d68781149694582238b7c5738a380f9f0233243b2f643415945396fbde05d239cd207f402aca2b8f9f6ef3e36be801f4059b59128565272cb57a35588e7a84f770c64187e1ea2f050ca347bd0962df26cc8b2b4d1209c5cc0416cf4f7500db3777a28db3f1ef9a444a3fb009d7e8ce3e9fa5b303ea8181e9857c837bf801874ddb1e591d138054b2d6920e01aac66b9b331fc5e889e537a132596f552309ce16e50603d2512029f0dda345730eff06334245aa4040c74ab75dc9b54a4867d6097d73d05a8b4ccb5d10d5edd74ea6129bf16fa0b8946c2cb58f63ce806110535b0a093d4c0f509fea7800878a822e80a7dade2fe4b09ff01d27e2cd371d9f2ebb4a03f7b4157efc354bb22d59d63f6b0a90e74cf6c5b030087f7cebaebcc736cdbc0e452b8f0100dabe4ba6b0d701570406c07d8bd305a8dc0f1e738454a64024a1557ddedb49be9dfc3818ca411a8e58413941f0fb663ad9bcb979026ac2db5961ed30e1207cf256c823893a2da0014fc7bc6040b594ba80f59a2b2f341bdfa412758de509fe2974e3ac60f8a5908c3beea27197c350767079c85bdd8e660f263005fec478d31dd484e9e22425a7756b351ac808d0343fcd6a541983b4e495191536e47d1a66df3f160ffd9bd1e0ee5fa9b93590d3ba10c7c7dedb251f60868264f86242d5b9cce44870f20c51cf7936470e34ec515d607df8ad1a2aaf3a3c432bf5eabdffb03e95cd697039c6ffdfae3197ecdbfd328a1eaf668011f8f83a3b041b0bac03d81524bf5c125a5168f8822099079029f17d86fbeea7ab62ef6d2d245d81f8cb9c9e333682715ff874c561d9474049a147378bded5d7c6156bf1491d1d08bffe97599919ba6fb9aeb00758170f776d128240823a4305ad0857d32ab8389969b8fbf827d7046f98458dab7b6da88810b39d6ead16d8d39b183c6b1f57a586d7f77e18a3f59767dabbdb956a022590a15bb324665d262bf36e4b6f925a3d62b10cfb445bb25d565f63e6ea1b64b6a7f5dbb47c4fa39936a15936fb5c7a4ff759b897ea0fe7b624bc90ea71325e94b0cc1fcd70f8180fda5a33f320592023cd87ed1e50e0254d28afbc0cf73fbda3db638eff40fd9d4e00af41e6460a3eac44ca7ea4f2cac9dbd4af7d66fae46062ddb1753a4b0e8a5f635ab5969d68f13ae327010f591fee15d3d04fce5207fc0435b1d3829c92d4cfa7255e51dfbf25929bdb71c77ee4339721e8d1ed5a58b5672259e2020f81987bb64fa099b4fb90d51c2cb3a834ee791a99602e74c5ea85bac4ca5568953fbb7f705d9b2db40ffeb5add8cf162f141294ad6b3a1cff4c5cfe83daa829266110fdb7174bf913dc4ada52f3ae1fad422c874e637d7f175b8f7a34dbfba0e5e9f1be6a518572f033120635bbac7ef7cb481f708867de6c0714a4aac136d9021eb3ae10e8e8c849efa0a206cfaf913c40fc2ababa4d0ca868fa71f5d9015bd765acf006bbe236d0f83a5fa5937ad210adc74ad83a60462691a72401d12cef736f5cea2c8be174b8391f057f4cd1e5ac31c935e97b8a48125283690e8f627f63c185026dfe471158d72fcaf4cb94ed552dd69f7cb329b1f6670b3b81dd427e97dbefd157baae4d1d77a29fec11fc5f7e2a09f37148a7d4a4a8fffd3bfd382ab45fe2dfb304a044e84c77d0350391f4bf5dd2cbc570e5c23539ed2f776706b27f7f9e77e7490930093b962ab5b34630659b0a531e7bc8a785c3c881a7941c6ec66b9163d2fafcd764d2be2075ba85e626527802ede08c7e3ed1c583360773159ab3218d599ef74388aceb95f679895e42a92114bca8782aa96db02f5a430f06482d615ab263713281338c4fb073b43b36698877334fc393ec7733f39e6fc5b9a7cd088a38b7c09f815fb10d5091348fdd0ae3bcafb15704dcf197aabb0cbbfd220dc130ff2ec77ea8b4a08af91729b2764877d74ad00c67b42b069f2cf1d27b6f63a2388544c801886f2319043251d5e030f1badc3efbd1d77c29b4ff3a750d51b5775e3d957a58114792264dd93b5f102cafe4af1f74f18b33a25bc3dd16be7fc5cfdb2651e0e6f5f12178728884ea5bf040b97a917c195dd4f8ad04ef759b81094ddb745332c5a7d07a3e79b1b00cc9c076f709652b0f3838bb65d13a93fb6affbf33f04776756774697d7a711afa81166f578623b1e7d7ecd3062f64f4b85024aea7f0c55586cd510523448e5aad6afc422b4366a91567e326cabd62b5ca6b1188b9c9b47032f9363bdb2b802b3a47f88143a01eacf4a2e451489a2d5cf150adb9879fc675065ee35aac38caa6f8a831f784667dad55057c1435ada2870832555e155544b0a712a3324be4f6ff583a369622636dd013eeca2efb5f00f062c8701b37e592078c9bafc5163350242eaf6f7973cf414815688566e08a128e7bf7a541b303938ca23bad381914de83c14c6c0f45d0c46eeba72693e263ba776844de648ecfd436a46b71698da380f26e39b24391bd5d79edbf2f0e7e9d09cc8a1b9f9ee4e22a6d4bb6c7d8b16e0ee92b67dab7f9d6150438a8d7304a2b681d3ae8234eb76c2f7803e4a411e5fb6db74f768c18bc35b40463169fd7196eea4e3d9bd7446dff6712dfd8b1b2760c2d894b019e62a5acee2aeb7a0a5f567e92821101b700254307b42d359f426425ba17f7ee3f36823241f388b6bec835451571f554463d5c11af1924f81938c7386c4f922ec2399175ff9ebfd17a9600d1ac175c378f8e2d9ab1d723feb9b7e8b5c94a28d9c4ff9a16e5a49873c3a5cab234a685cc77fe0cfbf6b7e0c6c33c5ceb05d2c0b717d5496dfcad21042a93af91990e797539594e7425b7d261ffae7349fea216ca86a180a155ff7869f01a0f1c261408aad4c27b174641cdf83d2eb1cd537d2dad6b0efb66657d180b40bf1be1d86691868d3475a8cf23e8699d9b8748bf81387b22893f047ec2aef62486f26b206185a4513a1ffffbbd6476fa4a641efc80072439397a83ed2b5b32bdeec10b37d186e9b502b85bbf393e69541efe5813fc3494f39478ab4dc9c9bd61747b8c75c4bf8636e8fbb4ca08fa01423730e512337023bee5e56df9fc75ec0a8472907ac7bc5c97ca89f64bba2c3f6bd4811c34f68161eb4369cabe46d8d7f7d3ccbf54573ef8f2c1dd7e35192d75cd271458f47355e5ba43f2223ad1a3bffc5372911bd946e188ae80b4195479325099fb6b350bbf8da65fed9727a28dc292e6473bdda8cbf4c92dee412d290810b4f2823a6d022d3fb32e9706dc0d164e0d9ba175fa5d6418c2e99e861ad60c0719a77604318510185887e0f1c60fac068f58ced3f9be8883a40cd8e4d95fe5021a11294b2acf0d7ed592a2d49cee7e2d872261e13e65cb497e0f9176ac28f95bb7effa8cc9252057f0ad67055eaed7d1e07ed64bfdb6dd2399d1bf2a1425b15457cd6458ed7330567cfdf15ae75b913b4434d44d7e3d608321b7caa671d804bbf10b1c42109769cdc0d7d6744231f57eb5bd9b3d34961ae83fd33c07d05e2e247922d7f131786d0d523debb58d08fed28c79ead7df9b263b255965f2b4eb1b918f7378fc112f75a23360ee5df314dd402c2d1d7c63ffd8941dffe02aeaf08ad9c76f38b7ef84a70bdf484185f8846d092ffaa5ba2a22dcb15bad17b39ce74d08c998db06f92aa73875938b49b81d55352de22d7a7f9497008c480c784bd409bbbe59fffdaacfd2f0461bd171d9f19ec959e8b4d3959294c78138a25820cde923e0c7a2a07b11170b0bbeffec3e7de4626a536bcbc108b0c57e8ed8a212c89e58f1af4092829ce451cce1c662067dd3f22a6d495a6294264265134c607d23fe5b7bab7434b5fd7719c6c25bb4f485706b2ef9d9785e5b71e54fd0881a95ba017c25c7da9d368f274b4ed3df48841036285d6dea152446dabc9951c4bba4ceca8a58ca00e95e972834efc66d75843acaf5eea321a2c3bdecb5af9f45dd9aec10bf47eabd6ec18ff7173583a1d403d5a325ebae399b6ebe9b133d9e568fc1e8c42483de053abcf8eaba5b5636cab558f4d9473b567b369839c56fd42ac12d251a1d94d267794132e72fb8441e11f6fbda13065242d4ece17d3b7d3bfd07bcb0ff3b34c9b059b653e798d1f73453bcd3c8202bd7dc1c45cfa4ec21defa4e395fff371df905a43403665094e17643c08acfde717ef0a8b246918193d6c49d73cf10d75016ff6a7931b1a5736c91dd019fce9285ed8b83cecd9189e98a79a7ca231651b874c45c4b243618a87d348809b0fc8ff462692cfde9a9e8cc7ced59fcc3c3e62572066d5674f36f82f921c5b6cb15a774111522fb0b9c6d373478b40154ed9991f4a662d7baf13e5dcbd9f19ef2a690bf62e28974a5210d0fbc7daab3db3222d1bedc49f0d577950e1d07e1698ecee30188548486af06321ce45471cd37f0ae0b3da2326c81e895197fba0aceb2f4ad21ae49d3f7f799cbad21aa00e3447ba05b8f31b3a56ae266124c8b459939bb33137fe24178400abfa583411d2a598d40630fe0bdcd89abc05c32c0e715f37d8ebcb93353fc62355311d702e825b46fd6f122965c7148260f709c88c17074918c85988322856695a0e53a7f05f8bfd847fb92b8be9f758a7fce269cc027361458f8acb70a1dc1f40a63cd315b9725b2d0c1170c7a60a414a33fe8d0ee5745bb855fee64e721b59bb859f8c9ecca95e07929bee3cd755c255654da2499dc877eff2802a02b3ec5e6a4c278674219ff8817d06d5f5b640b3cf887d5eec921a2522cd387f32535ad5b76f7ca58923c3522442618ccfeabdec342dcdad9c73e13a12224faa1d3e8f3840685ddefa9025335b10eb67c37c61590e00e709bdaa69089243103e3625987d1335a5341206e7c6ae546a199f34a9aef9b5ad4317497bc6d31bea1dca51bf33ed5ad13fbfde89049032894cb746afbd23227e85b74ce3f718404d7e8d511b2b91d74ac8bbba468057d5a4c36ec09f04d9ca068538c49fec1da6e26389fa809a4777a3459d7d1df5877bfc36346e12ad93aefae8a7b22bf9f3d76fada40000a13019c02ca708c965b9aba56a85c56d887d06cd93f8f488e23c495fd5b4af249be56b4e1b237f5a3aaf5d5fa526c7f2cc79d9a9898b0993e020c4f2d86a5a03999d493e496f5adc820637012f2e8d0d61396ddaa66b06c01c4bc87486ffd6e85feea4f8672a38fa1af5a8e77074154d49b73c75255119041645fe28fc2e9ec9258e525719836011d703b97a211899c829ea58d9439472e00315727ba28e77bd077cde239984e95c2f09fb88462110dab38fe239cf270ac05d5d98a479c6f0a4f8e1557bfda7d6839deb995e49fed602420f07a01ed24d0d70e4f83706860971089c70afcb8d8d8bb09115b5c2dcfdb16ea54de689bb76fd118e449e1e526408b6059aeed8ec72a084be938686091e9b621227a766353c1d0a39caabcab6627d027c6c222737ae450491ecfacbed1295a1e242af54ae9413d76d86674d96ba63536a3e4d8ed33cbf3b46aae78c5574b084711b187038090509de3da813b9381f332762d45d408f75cf178460ecea820ab418b57b6a033dd4b81dc33a30ee2f88cc596a77dd9acbce79ff191209f29a9e376773fcf21faa6942df075ae8a868029a16fc1292bddc40329e5bb2d54fcc19789f9c204842b279bd6b43df4ef6fc1a5c19fc6116200c80e33d0db645c4b20d5ff87d7c15034cfd9a3bae94b46d61e5a558a29b8f33c8ecaf0a917a9e550abb4a691c6bb99b5d9af8d74502d15eb5b0a0cd2aa78515b4e6c1790494b372bf2201137cac8429af51ed4d7b96985950d93b25746a2fb529bfe4aba2c31d7b06cc43a80f6eae0500ffe7b0209802cf317706fa2a8a83ad02d76c8e357b8c0cffb7e19e99cdada3272079948455b88d20bf7a5cb818bd67e88bc45d6798f035f93fbd026b37d2998ea3f13042e41e986257e447985d086c35ff6c76c3ca78eac0ebc42e70c4e05bf29f4721faca344da31bb624363902eea0ce386dedec068d352fd26f5a5f3289e5f5a3f867fead250451d93a133c864b69dd720b623bc4e46e996f64ea7028b3309fd317cefa9a755c2b1d708e776b300216abd87d8c6f089a01c2e9529442f5e10af8fad987ff8e268377248cfe5b838b448bedf9785ee0df5ac11f2d926e921cff5aca68619fbe2379a1448242ed59159eea9e7ca45c09b43ed8986fbd46c5676c4f2c7114de57eb4eeb5b3ffc6477c496873b4cc1f5c1b3a346da5f5e59e9de65da831a6b6edf13d01c77dcacb14cbf2172d68cdc27ddcb7bf40bd96d28c08b3371b7429a2608ad7fcdd9dfee400f8025e31fc862910519ea9420113d961368d8923e062f2b90d4caaf90de8a2f37e267aa31fbfce1727fa3c0305b8ad58477b7bab2eb345f8895ed9c3f5115cb9c68a3eae178cc085cbd2325279144de5dcbb57ca532d67781a08b22f77eb0f5797d79b0ea7abbf2acd023deaa85795a8f88962a124a22d74a82c21da8103e5c402a5bb9f08dad23ca5f74845647ec31937c524e1bc8c3da56cdf29254c53a1796f61de0ceddf693c0804c3be2a3bea6a8d1ac314f84dfdf607bb6ab4c30606af08e0568b6906f7e947f7f639aef5494968a8698c121caba845e6bc551f9b7c07d6703f4c327399edf604804363fc2c94458b1d43e5e0305194d133e8c2622376c1a3aae1cb1346c296c92cbb56ff7f878721cdbd9ccd37a00b86170bc0a776f0c1e5ce9438915d128f54eafab65bd2f5ebf9e1dfbbeebfdde80b01600918386cb37f8b1fe8fbeed6f72dbd3d2fea2d2a305987ea9930301c84ac3b553cebebc7a21a4170f6fe41736d7ed457a7d685126c00da25671d7de6b9bb75616529d565fef2824d43b97f89695049ac2196482293f27224d7dc7520b63a71459003e36a5aded157348858fdee8ba27584724c537c30e08e8993296beb5330690e8046d87a1009a223a1c460efd25297176a7fc8d0238afdbc5934904caf974296e41f6458b3eb6da42c3b08d0d900dc6a6a1e5e215cbeba546ed43fe560db8e91f46fb8acb64e2626a7bcf89deb32a10d1fb40310fa7566ada1c4c91c68e3538f8583fec70f22f77ba4637c8e80a52abec7f12c27ae87c1ffdd192d6d9cdbc06a1ae2615dab33528650488287e4f2e2833aebab6b54fcca0e20bf79ba91ac814c8a8e6929963a1d44cce79fc61030943b3424f1d3e3fcacb48b57c46982460d0822e41fc9e06e65da4ba17e177b2cffe0ebffc730a507bca485dcdf703c018a37e7bd32ee108702b9738e3a4bf153936c1b105dac881c390e940052eea0354c45b281a58e413a5db1b17da13f0b45f38bc9fa1ec21d2211f3c4c068d33fed82503180a08ba3304ae3491058dd62b5ce2bc2f40cdf8366899bb34abfaae9b2a0f4b7d035632122f2ac29d679bcf58e120feb5cfbfca7ca37c4def3aee7446ea73933b756019100f9b1d161924df33cf3d6694508ec02b739e0dd305362c1fae1468f2dd3b2a682d122a521ad450268ce2f0ca2c934394b3436b1bac6c88f4232783ee17b67215cea385bfe4754403a165d7997d9ef89a0b03c9101dcac404427acf8b10af89712fe8edc9c4c95916d66d059b7140a4eb38199944b6bf29859e7f546cc90b39df5839f2c9eb40e3a1b6147a01561380402e4193ce3bf0aa17c8fbdc5c65ead740ce85c503fd36ddae6d3ba7084a67237a98244cb3fd731070578b2e106b66d978a989e7dcf5c260406d115b9a6fa941c7a07b8ef47f9edc876c27b6c6cac1e3ee8cc326465258e945e967ebbc28ec9546eea6c804a3d80c8e825f43b7702c22f0f021be1bcee0e340cf059e878f8083eea3619f548bb9c50b0aacd398c401b80753a664f2761c089514506689184266af8b867d72c8f882e0ff49e2e0ed92eaa41126e73dd35abfc5b0cfe7555f77d8c5771591053a3279a4944e5ff15d3550a48f296e77a96290133651220766e375c3bc3513400ccd3cde06584f50988cf43cad28f7628421f65364064187c7367f05e6afcdee7e4987ba5c2b2bd12995c67661aebacb33954ce6e354fa8e0546e89fd9106de21fbbf3d32b11e0a89fa908cb6113d93c5d18e9b64e3fddf5cf7b8582ab6624ccb89194a36a8132472b523916591b36060c65107f2d34623dddf0dae5fa5bbb2c82cf938efd3514413c7a354b4209d0194b067af1d84b596dc63878b58ed95d6d06d674a0fae52d38ecf6b2b006d81b1402d5e626f0afd545b6b11372ad094cd1d4c5b2ccc9c5c263652592b20c7613c8e950596ef7fb7665da4c0169de72e6983570fc0764970f6f6a908c08edebf99d966a1e145560c33b3a543285f843ff3ae1e9684a396b208947ac37193bf1adb40cd04fd6a3136352efb428a8d42541976836b08c4c663183f3dd2686cd38bcd57072835d7ec5fbbb60ea83fc9194c4adfb9242a26c2afe90c5b8830740cd4f638039697ddbd1a904aea3bffc4812b48e7d8f20d766fc534eba3c3b47087ec4ef15719fed42c65f4a7a58641251d5aaa04783e583d7a83b03c663e86b6ace494a7e41f83789b7ea027ff1f3c72cbd2e8efcdcaf8d454cdb569ee98566387a7e1415f72b8614ad1db8de04a522b2d95bbc77c9a2fe06532fadbeff9329c694de9b81c3105d506426d9256ee3560b2ee51d79413993656f31d57875a0c91d61df2402292907b3344f64d05a14593accfc17edfa274be3093d7458fc3e6160c8528abe7a3383065e2ba12417d6f96b2d3fbc82f2688a56f083183e0d55907ae6cbf3ba3f028b6b336f1270e31568448f38d9257bf326ada5e86298974491d8b347397fa876b66e98f6871bfca17444bf9282df08bbd1a43107ebde563b173f9b9c18264abb36fad610c078122aa5a26ac1812532f99cb4ee4367dcadefd1a75573191d9ee0a1a3426e87ecd77bb3d0829312d5ec8701ed0803fc8dd6c37c47a3e12a4497cb2a47ac3d85c07ae5ff3d1a36af703241cece74ed45d0aad08760159e21756dab69b19cde893bc0311d93a7a719e69421dffa5d34db4ec3807c7b267367edfa1016261586293ed05cb453ce72e95cdc9e65518517524e45f32bbdabf31117bf071695a4ede80471554880f04b566f8d44489d16aa84c3616e2e7430ae9f07f65c7b106fad056518122831e2581b0bc493ff02f19cd7fef26f1f3e0835c0cf798195126f70cebfb6f4db91573823e471ffc3996bbc407e2d93a404ad0fa71d6e2471d8345bb3678c106504c8d2ff5b2625d4d93c152154cc1739707a6b962a837abbd67789170d52823f9f7218f316b7b463f54115e2a73fca3a5d58d75f41019bb8318b49e62a387b908a5574b4c9e1908c17a04d976b820b01e10ae011fd5933c6ed5b7f8674d49ff7a98e11508bce6e917824ce89d66b34eee7e4289f52c85cff49829a336bd316ba97f0405b0fdc82063c6bfa55c0df285061573a7469baec432096c531b6137d681f4a938884ee1f7e6045ccb375bc84b7388aab634e3cb5740ebf146b83775fc1020da62a5ae9bf3172d866a6de87303c7296cd1554bc37df6cf07fc05ff7b56c1b32fcb95cbc1bca0cfaa1a48ba0952d177c62266dc292682e0ee4ee391f7a4bb61f79943eb17c396cc24652b8681b1a66a98ef9687f7535155cc3d0e0ca7202105fc3fd2303d2ee5d4d3d414558adb53a2493a642bf38b40f48aa68044c82fea049eda284ad4c7176ad79fb03b97c94a67608c8e386bfdfd18faa3629dd1300b8477af7d5eed455d4373208f5b6d7263a89b1fcd229cb2734eb621822822c7feb9b03d352ecd3f982da75f4a8466d14f5605f219e1902ac8bce5bb550ba99a7444c1a730127176b5eab0fdd47550242d9d09b53c1feca105c0ec593d3fc8fa9be93270c79de9ab01d5b27096ae7e5525ba000eacd95f06b6455188f3f7c9a2649044f31f88fb67137072761c84c711db7b3e57c5c38713aac5c5e53cef1e6cc2a34320e4723ae47016c60872faa2444dc5552fadd51acc63357349a9b22d5f260db5715ae16ac3c783222bcc45edd9893ca588318bc50dda28134db3003b60f592f778f289f67cbc1a224bd47fb9faf0ebecdb5e40a401f5a0b6b1a371f6ff5c8921c1aa15ed4eb113cbc9ec5685ba0d501a78e136aa91ea0d5c661996306a9ec063480162a88fe326004e4a223e091969ba3ebabb40bfce01937a59219473fb82e8d57ad71d19927ffd61f07baa41db201455a892172baa5da0c879015caa7c96b02c38c1748060fab077a7d1d1abbbf2767b1ebd0a5865029826fd6088e096e0f6c19916368b6e9ab0926be1f4eee03f4b685a109ca5e77a0ce88ed80907bef8e49bdbf0c2170e87dae5b2b1c103937a65d6db46a246bc59c19f55503d844563a9d468ac756a7ab29aa4448560392d0760b72bbbb1e58409fa54447f74a15b58cf152c992b138e3656b45b73668a3c63688b95124a6b7ec5971ad98a6b0549a571639db728fcb6f4410f912ed064d28d0005b2b32318583bc224e98f2c261eb5af4f3079c2977f516805c7bdabf7d7db8b936b4ab32af3dca6c985e1b73b364f0049927ebf7177f01e8be439e94b115e90dd1cd3aedf6c709141cbe211b4749bd4b40e5ae5174ef7324d1585600032f1298a49dd737b1d6a2f9789f64d6da3f577665e8316c77edc9671328f0738dd2d20e8de3bbe408a545e869477560eb4deea261cc2492f6fb1dff8ddd8eeffedd79129c58f1cc5e78658c60b3fe4acdd782be8fee02d99469a2ede9ce40cb985edb30075dc769810f6f4676ec497689f49cc1e4fcf05ddbf13d14d2f075a1eefbe902ccf2765391d2cc08b2e2f94906419d8e12b11de068a7b4580049284ea63c5f18b41fa71293c51dab3b89ad8e7414a3fcb706b2e8a8817d21287c85f1b8d0869bf22bd1b81b17f5fd56a305077a01608b3e5e1b7d7f9eff65b7036a6895a2abcadc1995a5e39f04b5af1d3eb32f2b2ee3ec0e4bcc2c032b0d07740473b852e1045d16b71545bb2aaf554911ad243b89a004afbfcda190a4ea1cbffd549efe1b1c5e6e1bfa713d81e46df87dc807eee9de2cd59ac6146e7a0d8745ef709862d5673b982fa10390f69155443293f65b1e6945bf623967b7b01a4f8a6208f24eaaa4f6f41a1d3735c225283edf1ea6470bc21c7bee51c49a17666bf9f9211acfc7fc32198073c3e552d213ba27fda4369165176ecf0e2545b724a29a3c84d7a029fd0ed25ee5ba2b9464fbbc8e508839685fa91c2b5f75f996db880adccce055f6dacfa206700b6a2eb82e4d98229da878690563ec32c4d2a1905b901e48675c54a6456c5b475c93616b3727ade8819a538e4d7f79938f0e17f5c8427983045bcc8658d35a758b2e9fade6256937fda8d3326a7d8341c2065410368adceaec391e96d4b62aa041deb84edd68ba1d34bd7103db18b96531d64b8d0e8f165e8b52a35d160289a8deb352990f29cf7544a94a0a0aa85d3e06812f74610bcd4a200190207416fe64c6e02045483b45696f42220fce65a9a741669a428b2725dd25b3d217e019e6e2a545f223e1338812075b5c731c9039a3aa46414f78d2bf7dd8eb7c3658e9262e918942ac6ddce493418fa7a0825a067de007672cc5b9bb0bfb59c21963b593adfc486546d7520a9756a19354a79dd7c85c3ae2d2ad7ffaf023d10027e340f0da98441fe07af6360bb66dd271c31b3afa68c853332ee7f0e87dbde0b108d619cbddae49bb59974d95f64beff2facc33fb7c65a4bab2ca23cc28c8a79fe4c819974c00f1b99047af121d11f1e2d042156d5c8b534590ecf9c5c3d26453993655158db57f73be284502295f2c5764e778c5eae323724e23fd001a48b2ed28b114bc661b630d90f255390fd1aa8ebc035f024076ce25db92f599730ee3b7a0d5c3cfa6c9d58d5a0ebb7f215fa6baea8ca1f0a3d6aeabf11b2a6c86528bf442b10fab1459223911bc0cf85fe96813d0aa71f5cd4b822512a517e02b9a6bbd0ea5ffd52a2538f2f8efc4e7b60766e4095266b457a7842a7c07d0eea1aa3e7bf261fd1682c32cd96d324cca91a8afbdc2491f017599948196ae7f2403237eb17abea7958dcb6b02669c3999bebd272dbf9f3dde1400669c4b73930263ebfcb22b1cf2c765c34788f2579ef0d3f08ba3151f28af5e48b00e87a20496e8feab204ea577c1007e509129b4f6e8f3ad1f9c86825c0d85f2ced825afe7c244b84cf2cb1ce17caa4abf7d29207ded8f13e66a57cf4f827f173162fb02f76633b89b7f873359a4ab56dc0835b60c90f1606a86d7362802f6db106e6799a17eabef6ca64875e640c171ff8cbc3c0db4e995eaa5def6a70f7e3c3302c5ddb40d1ca81fd0687899c581daf25553304197ad8cf5e62498fe246e7fd46c50fe2271c835447c80f13f4b8a3e41f58e391de679b448e6af1f4c6a2842f460cd6cadcb80cf957ba9e5bd3337a93620a2f0119bbe9d69ef4abcae53b7aec33a8e96ec926239369fb3ca9418a998be0e2ec3d5cea58b26ab0438219823ad072362e6cb3568663f1cb07913ebd049e54070435e4e1ae2804074bc74f37ef6b357c692d2e9db60d18e97d779194195f204694fa4ba23d8935821547b9b274a3a87ea586a47a27b78dde6dde970ca3f6200cb1df2495b856b7939798491e2108d5ccf22df1f842ef42484488a237d9063bf97baf37ab18257b1d33c429d2036440b795a651802ce5be4d27373a13e396f0fba901c46e0ed67c4c0c5d0b9be49e5bf193e8e42a5ef9110e5857bc5db53faec2e0f22d5a6b670a676df5caa2a2242771c3d3dae812b15502fe14e888a37e94ffe3d4d4d9c233c6351803da39715ead81b90a2bd24189566fc0af72d7ea7b809b16f56a2df20688f68a2a370ad5b559412ed293e5122e1e6766e1fed0778673ecb4b406b0186f00c26d0baf0bf89b28aff2229aa83e10b7a9fe32db8ffe89a7e954d18b41fefc847333622a11e30d7d17ee14168df2a6cf1e0e89a80447ad34e29da0654c5ef69a4044c2dc1ea18e19349a6c8a6c4529c382d6bf1e78b85d76de6b239ba1dbcb547b32fb8a34ea6996a1f8cd2d23d1e7c45c190e70f2046d41367835cecca161577dcbc2551ce7d40c56602d48759933535d468bb94f63ab8ab85771bb8ef04c4646f844ecd1a980ff5b6e44792c12682f0ee4683625e654c6b3ac3a99f72200e76cb62f16e0eb3499afc004a3ce68f1bcb49276bf034ac4363cac107f4b427692ab2a0e3267106433674d3f1e7da4aba72b408cfa6a41739977d60c5331cdd0889347310e1bc9752ad9a264e39e734818f7b71cae0da2c77c3c200e1eff6eb77bfed708424308a999a1afb6b0c8505bda953a66a5a3d1da667c6e4ff8f62c1dfb255bc0e842d4db9bbb909f8d1be53c1b7f9fe6e910bd5e0b557eeb5fe984eb603d94d4cd7f2072856ca99ac7870710bcb90c5408a5ffe05509db6a2d1dd2fe04e2ca44a7f9cf426d421e0094c9c57e96523fe7ea32b70842a9bee34aa6f91950a9d7a1bc4b1807707bb5153f942722b5f6d2cf407861571a573aef809f381d0ea668e053ac4f9c552c6b1d6d53302e822ba3217b8a8bed13bdc73db4f4c81a6a5f1e3d9865fa2f09429dacbb6f6cef6eaba37ec89c8dc4cf383f705b6dc32e826c33a05262678f868da5d087829d6b0888f3c065eb4b31d79f3b78d88f23f28ba95720b75e8dec4acf7a1620b95a5e4249959e7553220e6d727abf3acfb5ff73f8a74b5871735f758d0018ac3ce43f9c4ea0b356085dadecaefcd71e1947d39ff0188a0d4d39591a941fa649b8fcf760fa32fb522e8a36289f908286ae3fcba6f9276595822d1653346c65204c7a9dff7e8da516cba14ee131f941b4eb42580271aeab316f5d7834330623d03df1dcc0f51753100532c5feefc591e3e60d9ae3fb0e8e0d8b664f11eef61956fabd8ef800eaea9bcbf141c24cc684eda4b646efba4142ff4412dc937b768c0240672a4f65c582e1565b0a4ef634bba546f1e3d525458ce5f6f7ff0805d0c609687e2ef7b5dbbb48f5b94afbf2240fdc0ee4f41cbb618e300d940a82616d0a31b02335c39f5ee67127a13dafbc86bb01ede2da570ea805fef58efaf66c24b84e9cd8bc6e8eee8e07935927ad73e69fdbd0766af530d73f10f12141c18397b2caf8a6f76c78401eaf3b0884fb68c127932662152257c9c4b3d7d9111ea6cc68fcdfbed94b8d6e230d99df2404393a77ecccd03005c6367070c8110653e452894a1aeca945343ef0e0a353a8a64f167c62408c994511e73a13e6b5c8dd8512cef91dbde74777a350928660fc4f571bad22953f577ce23e3a8e656b9e988fc2cc4547e74421785b3e320e8d913425146701332caa716824b4523ae120d3dac00854c55a2f722ec03cd8a575e79fea225f7d987a6606abf8a2124927583390aff79050267b11244a2b66b1620b97acad943f8fb1e33cf14f982eccd384b6da7d86d93adda1b8c947a9a81aff63bb9d823eab069edbf7244675d68385ac228d17e4034b9622a6a43c8d3a185115b4a8df95c771e338b3fe2c1ec2b5768d145fc3964c65b158aebfb1b398214f87ea093e737a5c3e9dbb08a6ab2de4a82dd8fe95ea3e718cf8e72b4c5072c674b3f7b468c7c09a81c137933aa621f8dcbe75b4e7edf1a97923c8781dd714abaf36723f648354a4c8b80d2424ead86e30ea0c5f6b90a26678c37b130f8489d455cba0264adfa2b21ba76c5b31c6ab74395214a4483d8648489e1ca58140f3a38f565b041173684fa446b184847270053b2318871056360a82a0a7ca94234797e68e75f2e2f38c9624ffb25e9e0af0b9da0a1c5ff83be5f82bbdca1a9fa56e44a7a79d7f0acfa105ec28187ba1f971423c6509d4508e8adcdc6f106a3cb81503c01106287d7dc0c8722f3bfcfd31da7c99c6eee14c689d58d46645ded66a0a14e603722fca7910dae81ee0ab88ebc80faf3ffaca942778c9a9f3e0277060b31c85d8420503fed9ed399737a253fd5b3f73f47ab5f30ac0e16184b9963e575cf451dc3c6439ee84174361c91a46c4e03b09f194fe4db44352ff36c88c556f093e72eb478dae059234e681608d2cc7300f002dcbad2af6df8cf3b8a11c559a610b5942aae9434529a2c91f340bf59bf8eba711de86d94c5f53fc3c89c6f4b03317222254050d90d8e2249ba8179b29484923c5eda99ad2a02e88212f15ce5882f5a6b48425f349f9713dd32e2da04bf6a0b09a67c694001fdc6daf7284de1d5e58e3f5d27bbbea9d3814f8d5e1586f46b2d60a7e0f31d9954dcba992ce16648225eba48e4b78d288e85b6fed8e0ea7eef571951d1fbca9973994d65bb73771e019d906adf7c6023daebceeb06b5006f24d782aa8f571cc2629d63ed582df6750b3110314a912e42a6e212afbb90da13a26ec753cb10b78fefe389ad64937da7b515c8d013a6cac3409c84ccc69bcc30739a053f725a277eac80e35cb0c5c432cb0941a64a0a97e364d93c869dc3cb52d30c02f4c5f52a6f87bcc9809c42e6f0935b5cddb6fb493193720167b453c1ba81da96a6ff2ab1a691fb9835169a569545f0e08dbbd6692606350f93e7ce85f505e200c6b4e1b78a37634d923cb1bc57a66f77e2c444d09c021e67c06ff49b3934f8cafd5fd2349adb6701b49bb1b3d54ba5da001358a526a9f3db33a69c9228c0cc8210f2a2b04f6bd764184d9e0f6d3672305e775000ab4a27a60076fb7897c681f3dd4d35bcb25d586ecc926d46afa4a5d8c769efb9263a2756869c81bcf87767761556ae5e5065c85378e44f342dee3a91ae037edc1d97942aa2cb769e58dfb83f8dccd29b34a6d67cac1429060f0f6c8ce87e1f7ce5207931c52fb960327ecb8d9dd8ab08d14c5374b23f3d5d56b1a2e2a0f0e69db36206f4c9bbb2c8d2e19580baf79a22d47b8235b942fe2334b8929ea7be378c3ef895add4ffed27a6ac7e05552adc65527c8f79e7c9c8188ed79841fb35fb722a9e7b79a34004f9f8c470125b19896ce670cbb396d0df89e64d465de00e7cdf009db38b8f2a8997f638ff5e838e6242bad0eb42dd0296aef3bc7ce902ce6dae6bc0ccf1f47b0b7933a9c6c0215228850319751c15b8882fe222b425e66fd7db7cf112e64d430fe57ef588408fb15da8ccd70023a5ea88ab07bbea8a8d3f5a752a1927612b1fb5890daaf6bdc62ebcedc2f6d408dc55c338f14d553481addece9a15f3726fd69d76f20b0aed318f2ece27a4005bf8a651718c73ea5a29482a8466092ad95efa513b742833e2857fb342606aae4fe77412704e808630da5f010ae0a1921d13dddc95adfd3021d768b3a8f989d02a6b843ad093445b473fa5e76fdc8d098bf2e87104fa80cdcf5dd069a6fa579dc2d9167e50d79d5c364c0e4e425981f481a65daafc930f63b2f03468ac2e8c25ee632ecc406b5f7cd07ace05a8f3ac1eb2c05b5df21e4515708c02bded094cb15dabc28a886fde17e95d58929c12e618dfd281abb701d7ffcfdb33a09037aa7e533b9ff387a06bc2552306b8579adf73a9a27ef17d438141bc438c075670efb5fb2f585eb19e64580b105fb7f00e2c102f547bea4a09fb78c50eb76fcbb11bcb5b95869c72c6bd7f0fc52baf4b05a2c70ce8584811f58eae36f59f1a665d7a5672c8708399198068f9b0d65018eb7fc59e25f11324b57dcf01de34a4b621e0fec4112fc148c7f725903a012649cd73f54981be17f2a8643750e7dc416756a4183dc52e5998d839955eb06c66db01d9de577cbc80ffe14fc0689727ac0df7c7457bf3fcbfac61889d63bd27cfd63736b8aa1249083c84380c0969645f30a53ea5ff0dac0bd84fbb4eb60917c70c99012c580577d727989e13a52d48307052b1c6e6c9acaefdd07fd9c413a690f93aea091f680d57d4d4c026e6ae04db0de4d4948db118fa087e818c624fb775a21361ab2dce4391394cf8a9391e4ac5c1c19bceac65f6278a988a4c38dec8f8fef470b1ffdad60bc47be8a04856062581e3e0037549e1f6bd2ab02fa6a7fc42161d1f9b44745b5aedacfe1796a6a2b7ddd565bc7368ec2a38812560ad111c9cb33dd567891cddcd25a3b414530b00bc2871477aa2b3a36b866b8b8d355a6a8feffa235ed0a8dd0beb7d57ae4b05aab1f8d22e27dfba6fe96962406060270c8ad4a4a65b00841443d724d4f66a4a4c7fb3e69cedcbedd96ba2c6fb6242fdb860908d8fd0e6d1e9582ac5998adec16b516d61d9d8ccda179c40dbe5b4ab72701cb278c3d7097f3d6ed93e4c3134df1f9b364b4bca7ebdfaf577fa649a6cec91050e3c5c2ad2aca252ba097faceaea5beb302fceace7bab39a45f8cd890802bf06da22a085c4429f6ea2a2b97682ed96674926d551b516dea0ff4f366d3a3e63a594bd062150f4f07de3ff9976172c50f901c710e49099903a28c421a6509243a73b8bd8252a807713e3a01bea18f2d3b56d372fc5cb925eb6961e8c6beb77da67b418a6ae2041b32edb65443dd21cce7f0c6e16825151d7fe646ea3a329d852882f822ee7b9e14518b88a13a67747b27d3c48818eefca2a26bf11629032217c19a96e1a8bef8a55758b9279c5d8b6350c2564cee711bc7f80f29d09e08eb4dd86d5a59b4620c0215dfbf5e4ab7aeb77ac2c54dabf132176e809135b6ca71af9c1055e5122382a53c4a8a68e28a9f66f31afce1542114934f718c0544aabfca8db307bf91935b05c7bf6ad42d39df78ab0017a04bd6efbe77cc791d9f0d14db6f273fd6434957c36a5449758b094fd53dbfa842d22d4cabae7eef8b89db33a3ec9e053f5cf5f319daceea217a91b15b8feedc42c43fc9ea995413e4ee923f92f24ddff76b6acaac13a1ddd459c33b7365b820b7de8f94e2d06d4e72b5ffe8695e9005db589274290cf8b925888d1b41723668797a06a4c775114f2db1bd17aad20c158fd53f834b6a43e5480dbcc0f738cc78b7b102c3643655acb5820755295a8b30862a5bfeac8fcf15389803408291ddfd266788e9dbdc8f5b5c1d9af29ecde7ca5a5cc75ac3ffd55e022399fdce69cd85de40917dcd06deb1a8045b5aa66c4fcfab1330ee2f1ee71f07cb0671c74440e7c11cd6287514f1e84050a621b1cbc1b0edd04c3f09935ba49142c7150ce230d3f59af92ccb7df079ca1c71aa5e2762de8f0b70b0fcb32771df275653364bf886a8e860dc65381ff7f800e50e756c4b9205e4982f4b928a14115843e8d805ba41ad910c5093a772987460a9ad679336b7a61f1198d0b23041a355843ab60b9d618cec3925fd7c7ce3cbce6696f9371a32ccc8bfcd565837235141975d6bb0058514cacdf07c291bc136554bf91fad7cb87f5709215723c6201c2ede61d4979c72049acf3cc38d1f00d80da36f2f17abd6a2d43eff1a31faa3732195e69a8dd209fde22c8ba9132148e7e5ea2cf9e06607b94270f9fb363ece718505fe60044838e9c2e782aa3e86c6aabab895668f20205ebd20bb80ec6737b2220007a3ab5cf73511c12a12d73f5a2247529ba9e20efccee5e9910cf46a750e994397027cee400badd7614a9bb8e57880860937e4b5f60678200a7ba6f2a266aafbcc3e3f6862b514b163eae8247dc5a99dc9a43e719a4c429ca96be842634f2a0b5edebe814cf688a399a9e657fdced0da6b117bfbc81b76ec1a43da0111b7058023f7de7f39cc6271f0eff86e8dd4e3b4ef3a3e56e2b5e4078cd33f92cca5d824004de6b7ca4c466a51798dee681cdb69a32f15b2c7db9142d90db4d89ca110806fcaeb938fd6dd617c8d9a9c4354aedd2fdaad6fa2c00721e63c2786af95ddf1c0c87cb5c509f3b79f12cc1316635d876a07047ba664f8e59b691d9e6529d6e1eba25f7832e334ee77d934bf60a88f325daabe9541c68ed8d4af74b471073fb9c718a910b1be4be9027e0c5a72883915a923ee9597835d5aab08e98c529003a9908ccecdf8dbb033d2b8cb83d64410a95fdef1fd8b97fc0a0a1c09dc62436e35e4126e9adfd6e224b66a22868b9a02c9b50efae458a9167c94dce8e51cd3f1e4b25b5174714ddb77b3617822169d9edc6b81e90d2f958cac4bbef0c0c6192e881499f245495aff517488a443689168e92aa2500cc2f7378af25b7a0338d3e670738acbea5d22d19e5509c1fd6da566a0db0d336cf9b88affc4b2ccfec61a8df4f12a6998190e7f25a7e0dde56cbf340d5ed0e0ed27012fc9c4ef9fee248c326bbe923463d4487046fef5ecba33afbe2dc6bb4a6f7816fee16d2b0ecb9c5eb65d50767aabe231bdb107a545053248b0c3ca581aa362a15384179b19166d3f679f77bcfbc5d312fdf5f5f990b71dc2950e20745b1bb4129f266ba58abfc5f8b7c8c9437365e317450995fa308731bd6d53e4819018b45704dd5e25e20356747f51dd66f9b2eeee0ecd2519e9ff488545b3d4fed5f43c80df56792bbfeab2f892acf0ad56deb98c774fd07a858329148f3bbf7787702521d50d9906f69383b4919818b17bee71659a87057c9e45aaeef8053e72f9a9e12898efbf4e47363a6a5e4c8e1134109dd35c0da495c335c78a1e6441d2db69d809937d90e5669c51338c1bee2679a00086c47caf3672d3ebffe279e59946e40c882f90c5bff4f0459f32108f814775e0edddababee7b1b955e41f55ad5b702659e2e13c353a3f7097a6de12348a9b3d7452549d2aa3e0ba7d39766d074291124f49f065ced1337a66c768c182ca90ea51c81a8a97f0f8b46fcdf211e8e0cce799e654bbfbc673f8d07b12d53cd028ae491c40a46b0727ac7f3654a96d6d781021b039854a1b3a92e08e76f1cd58761672950d3da71c04896cd87d1e82121b1709ab3c5eb25f58007577d9edcf72f2db443cdf74dedb9ee2d408c5d04cb8163752a25de4d4062132f5d06da7b4bf0a2ec0eb73464a6a135356cf9dc21cf02c092099234c10d1ee9a1d56c244c44b0425584058b3591fdb746d1d364b6c5b3ec7e288ef00bdaa149c9a970d0c77f9cb048eeacdc42e58d2ebe99bd120b2b9c4da13b5245fdf5af2f974e004e40f3f1fb90cb7088f9fbe9fb8a4381d7633ec9d513d2657cbe15d4970ee70b91ddde13dcf14142d023f22d88e23e22ebfe0829c500a05c718ca2718d68a5d2984bf4f189f86e1dd3b837218542cbec92f082c25ccdd1e5daa53b698bdd40e7628aa7a13cf785c81b6829e00b1794189d4a424cd286c84fcfa5634dada6d8260cc974853b09688c7895160c8b344572a0d3cfb457fd8c0adad68dae37bd69cf42abc1d159357e44f9db4a64da4dd8a8bc85289e57fed8a3cfb2963ce404b7de343944dcfaa01bf7e501e8a45eea1264908042698b1acfbf96f8fd0772a21ec83ac77ab2c696d812c2f97930ac822832f7ee2a95a7f2be7f357e1d5cc72b24ae05f7017efe8ef8140e39b3ca3d45f7ae29077f0c7697deadf40612c496c59c174f078810c815381e5989f7bcd8f0d4a24d34c44c957a612c78cb22f703e2bd9c73695ae5842af6ed4b2608176e39203fed577f9273d6a4dcda542bf543ce712753ce2e7b0844c3b76e93360e17ca74f133e623999ac0579ad43240f359054405e85fd30f1509dae3d16b2c07325cc45ccd65a9a9a9ea95ec16ced9f54c793f8cf8e6dc13f32fc31a1eeb1e67dfa3a0df506adb30d5f88fb42ac447754fb95cab2ae59771ba130809d48841f5cef942d50e4252c843548ab64ccee363aecd09e9210a66bde7be6b558fef784d59e65faddee6d3a46771d255a9112e2ef69b790af495aad4379cd0df69d206150efe139ee270ebe7a089b1b792370a2dd32789ae526fb2efc12113733a67ee102e1a695d5b1b9942aa95f6a9c59f2b1531a6c387ea18cb64ad51aeb9a8fa3c9f1ecddf4d450acfa3abd5caa452077b1454bad0912b4e9dcb4de853d47eba212688aa64860391b9180bcb96d3388126b22adcd1352359ab7288a6a7af0c683e724fbd8bbb3be439f2de0c1b3a7f2e49dded829009603075c62d8a763fc494e31f7d7710a09c4690e68d2cea1021762e73916a4fc92e971688c289d2374e88c8e7c64703bbae409eb7b72851184c9060171f541919657e40dda7bdb4f115a6ac450e9c69c947b4ee9fb51176d3c65775d57687e501fd9bf723356ae9bab30467b9793c89cbf85aecef056a5f7150445514e48ab1210b320337e8a22ea6b95f5ecd863612151f444a141001d2070f276356b71db3451d1d77c15d09616deb384be8419574db227cf9ea62823e3c1b8fb1f95a98eb2e034a9ca47632ff20ac2c766c236223629b2d316c13da07344dc2b3c66cbcb774782cf6d04b3ebc6458564380d24f4387746e2233b5dce0b9f1a0fd49476ab43032c34dea27c1eb073130d387253a7b3a4e0b5008ce391a5b83cfceb3eb9205990bdd9992fb8da2fa27fac4b4cadfd1eb206a1faad2d5e1ff009ec0fde9d2f236c35d9917f20db9b83c7d1c42af8502c629d6ce0d30aa515f4620efc834d477554b354bfbab4f68b637ef06c418fc0ed275c021e1b6d0d6b20c10bad67fc63172ae0413128075337f8bcdfd600159404eeca1fcd85e0d27b0f80bdd1c24104360297d2589373ef8e7d34040ea38dd6d434f54508852c38a676f8711724820360c6da987d8efac08f04fc897fdd8ba0cf2a2286af45995cebd586a88c431e05b14f9c51af999a25cf7ebd8c6e8498724b9e5549d6a085d524dbc335c1eadaaee4aaf76bc8a6120a6e36f8990f593124ece37871fb6233baa84287b7b5294dfe7556e173ea21b4e18247988d511d9edab1ae20f6c89113b15c86bcfdebbfc21192dd319785bd351bfbefe4696f04dda5b8cccffb29cf665042e0b31f597ee03413b72cf690f64bcdb170965fcd6e48823009f2a63790f9d70b12411261db6f9c9572dca302c4df597fbc0d406ac9f1519834dd5c355fd842191fbe33bead0396e9075c3e79f3a892f65bd5e679036bc432887c6980cec11a71be67b22b051a5682727903c780d652b16318da39cfebeb2e28ae6f09a6f32f3dafdd997ff47a7c76875a3d4e264f011ef7d67f242fd42e0fa73088231428699626f3ea692359dc3ef4cfa5e13054c70bdd411fe7d1c041d29e30f2bf45f9926ccc55b3780c82d290ed8031bda45ae918187d6d6b8d00a10d39eefb9d5e06125a4c6a58a28e56867d616ddb14e7d8579b510687f2e52c71bcb33d43fc14e70936e57f0e7f5b1fb3380f60311d9927c9f3ca710568c59eea6e53870231634d2722837234cf84604631a8d0740a1bdea68dd9e727263ea4577f980a322d9bb0c2b9f6c59cba8cd3f6e2252793f60bdc920323faceccc4789e4e8ca7407adf9ca1cc403e1f15f6af7fa0f949bac1c7eefbd02977b5598a5f1fb85efcca660f0f2962f41f643a5c9bf68f890d0526aec2a9c177f1f3d225e913b13109914f4a87422a2f1495317b3781cf0154a042f37ff4a1da46420181e4d39648ca2919cfd8c201028d0894a85948f5441fe1699eb2dda9ec0ae1c56bbe889e959a47d3092f6e1c980c8a8a5f42f5e9667d0422bc7870be3cfdc107f7a55de8316dd3abcfbb861c22f7ef290b225556ea44166794f2012424df3f0573770f2605b995b69739508cedbe4caf1be017bd75b87eb0ab0aa5ac6fa0127248b4b2d898e51076ca9ac902d7958b7189e4dd4df9a714526d8c894825ad6a53b7bdacc6a02b404300784f51b99b37dd9868d400aa70db362d7d32f296eef32abf7403fe6b99d9f4464bc234a34d313a5425172f5bb616583f3a893bf463098e3f54274aacc06daaa9d35fac9145f508d65d59560b0d8a734bdc4b52d2918689237c58786bad954d20d296faeae79452a1f9b426b39eef44bda53e72fbf7f32cf99c01ce1fe4ed30c84a5b7eecf61c37fd2ec7cd8915204fb4b2b7b58d64538b78447c8c1fd09f826f3ac844fe7395350321641861ca1e3d9fb2d7a166afaf4eaf8dab51b9a531724914aac762706641b2fd5981644e8f8842cdda0b0c02b6a24aabf294bf67f75333ba08dbbcca7ea302a57581f9024b2c9573e63c20724390f5d4ddaa691e756213fd5875ec3b662bc442820509fcb5955e523ea9e49ddf496b9959476b522b12b3342e016f1541d8ca1d24a3e3efc3c70d737a28298fe721b8259973510995ae44ecc62f095283f5105443eee9d9fcd51f43b83b072b6da31024ae1c88ed6982cc16cc1f40d6b1132b9cc194779b9303746d7a1b49cefe68062e180dc0cb9e72823bcdfd57c6cd1cd207ae9c96dce21cbe0868956608a42db269de71993dd355842921aae32ac9a1fd63ccd75913e26d36a21b2303dcce1d5ba9c6caac3a6c1e2c3e8956cae438e3c258270fdda1c5eea37a340cd8e9364d3bfa242f672d59836a1019270a66d7dd2908f3cc66da703639ec44c931254f3dd2dab33e35a03af1fd303e49e1266270ea1416f57335e6a5148f66f30577158fedf677ff9ddc3df8dbe51436ac5d87d4184dd024eb179f7d7703af2c4fc4ff07f7427515c6fae5382db7b212a06a0e8d14bc55b6d7364e6da4645c89bae93cb705378998294a7f48bd6f49362680a3025a0d931a66793dad10bc8bc857c11a2d872dcaf23aae979aa2426777f854221539a9905dca16c3657912e49c9326f2090828bd735d07a654320f9da00aa25112df2ba0a7eac3235d23e9e178619ab71993822c7d5e98f770038055037c917db47ff5a6d985368ff4f7e16a178b7a4ff580ec70d7f39eedd9fe28098beec1657c4ae47851015c7eff2f07400c1f2f0c9e7634270cc81c7126f7bb29cc5af7d04e0d964608eda0de6e1ddb968ae48a06478150bef6577cdc69c41b6dd6f46153894f5fd3c75cd04932d88a35143c6325731da2477eb9b72217391c9bbf83dc99fd02291517585f0695811446e4880b6a41becd4ff0f9358c6b90699090d63acfb2e7f89c1ff0707d0af85e8b9f898268c455d08c17ddc68260a399358f0de2cb04f84441836b30db913ddcc1d3d1319916491765f6b1f711380b9bd714518848969ea801554d10bd8cabdbc39d5c888539a73019ffb771828cc3611317b04d0cd6dc79ad5761e58ea0e92807da7cdbff49e717be6105fd2a235a1d5d36445b8c6bd469d391628628559351a022c47241ac8e3488c3ab471dac61ebf220b09b4f688e108a5cd447e755b17c089b22cd93eaf386c36eab8179cc9eb9f33ebb187c9782452c746d2f58f3d3e89e04eb6ef4022a1d3f0555a32bc48e0bfb48e99065076d6796af18869f35f2af32bd80736d7c283f56d514517f602218413db333c71d619a19cd786d69b9d9db6bf6e5a98277268a0e1b3c6c55be6e0fb7830678dfb38018d73197faa29177690059864a7e43cbc1f0430ff2b7d758d6974ac28dc867fea5bdf79f11ae4dc6e7be445d3151f80a2c3eea7177d66fb29316a7876532f25a470007f86b57122ed2e0dcf3ab0f8a7e98ac0c788315de3c8a59dcfe5e34919b07f22e84e6af8440c848a12aebae08b3c71b3739eef9682a276b5d42b72dad6b88489add4fe9213447bad7bf8134f67ab7994a2aeb8e0cfc84daa722caaeb1e0f1665b93a79dcd848b3b8b3fbf90e2ae7690c3fa44eddccb0a817432255a6b9ab7c7deb38411afde4aa2fc25aea071bf7a3f40502a5d46207fd68a61863b7818081619324506bd0456ac15d56b5464a64bd3053e55a14b108e33bae9d7f40386c329d1462a89ab64b36609befe9c9b0ecaccfbda740345df02e0a239b00cbb755ad7dbf80bc6d8a625bfca54da5c14b3a6fe0b7f03583c98ab98b22a1245413c71ab374125ff3dbf3480e27e9a210904f4f7a5b7b9b4fe560b22f27de93fc4a1f92b3fad4be08e1a8c1f560f7710de2251e8deaad2299073be23c95d1ef73a2f5a830fad7e6dcd173affeb07afb75ada538c7b2096872dad4bb1fe041698c6102d38f13253706bfec7da3c4f45eedcaf93d87ce5ae4d7fe11da1ea9fa5bc091159c8a19f2fc98a5de49a7d5b343690484756df28cd065394aaa44025a24baf08de236dc22db9faf6da6ec3f75d934cfd53da253b75983a40d59a8b8fc24e71436e9510f9a9b2912acc18aee440a16b6098af8b3b3cf29523b355d7670950f6dcf2ad114ea4c7b507961868b7d05c3cf2aea4cac4c2eecc6eba437e8108aaf7996b4e6a7c6f226fb4bd73452354f78e94b7a0b30238303fef90bcc0d2906f2f6e7f6c2b925e92def90d8e83c3620db2c270e0635252d91e7990d6a38dcf5bb615e1d737df5f1aed6939529a3aa9569047d2fa1525389b97bf993102dbe2f55127e1937197624a05c2a08cf7aa098f9ad396759a19b6c3fcaf90fba6b4ef298d717345529068ca5a5545b149644cae5695e14be29b7d9daebe272fcf02144d70e9099fd7f605a813cbcf1b7d5638386f152edcc150f3d0848841510df713cbd0552697be5b34de95e28d600c9659255551ebf619fed384f9ff57299a5dd2fb41f09e4d648262516e6e52b0fdf4e06c24d400cc02d6572be377648c125d4d3b308c60350e366594f8e48f6f67179891d3171e74ad63c641aa7ef8d78c2fa70c06f0b7aecc1964eb854b68bd7f2147b1051e82798d73f8d41dcd3e690a89cf7fa38594981a1f035f592a5d862b6d861ef2a09b380ed1e9384ad245ad8511d38ac7f877e77c2916bcb0ec9016e27a839d481369d08ec9fe2e3e6769b4dd5e137f5edcf05053a7aac344cf1466ef50f7c993ddba974ad7c9baee0a2597e2df105aaf78812d000664a1f5f29364b1052357580a59c82c3f28dcd5217046de76ee9e1ebdfef91104f13cbb28ca0ec35034f734bacf4fd504abc5cb3885a8fba0f8db96cb921525869d4e5ccb919afe7ad98cde2c6d25073b08c9a44a0a9cb23592aa6ab70c06ac0a503fae5957bf43aa4eac96b9e7547dd7ead6e90541ff2c6f79ff7a05b03631e4c772825341ec9c34b943d65ba5f0cff28060316548aede82fa16558bfda27fe3dff69dfb47fd3b644862456c12885ce1282344f0aac7ca97a94424e039d585a480683c9c82d91286feea284cde8ab7a13f855e50a157d3af868e340f97bc9bf623c541aec3cad9dc1846e63990631751e71ba2d26ee08f9053191eb502cb5cc1fe071dd2e609a56cf1fa4c5148862cd6048d7ac65de9c47b195fe61d73bb81fe2112e229ca8f6b36e237d937f2104346e7a192b19261bb43516774f5c348ecc68d412b35ea5451a2ee88cfb0035c586d43087c0211491bd4faa076998397b89cc1f134af1a0ab489d0945b754522265953c493621e62607e750e969f85c3af59f834635c6410f7b6e3b4e73d7d683a1abcd7c800cc970532367261a6498ac58838219e6d681b445576ff6a9537114e319acdf0ad428f250bee54749dd08b7dad71e77a9a1d8833328af6edaaa8b678ccdc3587be8b098b5c3f53b20b15e5d73c72f93764ce9fab46efaa70e33f945791e0c4efd78326677d6248c521bdf088a8ab3b90366194e0857ce8b1b5185744ef7f4dc2c3cd1ff5754cf81bb8cdd51c2cc3071dad0a76d297743f3b17dcaf86164013738c48fa8ffc1e704ed24384ba0a06a7a52f7eed5a63da03bdf24e76d1eae940506d383f6c5efa56fdfc74e417200c28d98a605563c928317c7b7e25d544381aba58fd2b081be53a1b79d59d01024c2bb633b0cc9cb8f7a129022b4f1880be5bcbedf2061aed65decdbb9ce1fb8fbbe5ebed52b73b27ef2255b75443be18bd29fce92d94f646ee39bf9d446252fc6818f538b3083a5266485c36e1fbd4715c92db502bcee17908fd5e151ff4a0dd62c8603bc80500baaba2a923e9febeed141875063deb2ce8b7d4af8054925baac6b5d62c26ce0d7715e0109e7d395e6e423a8375dcfa08ec7ca187543ba8b91ffd924639ae8b1269867dc9200bd9b7de7322ef8a4ccb63e992503aeeb076eba4242e926d748013b6f56dbe0cfaf3c3f403fe9f96b0b0ec3627673c88c625646b405286b7920db64106b64d18bb273559b18d8362f6061b9c72353b71b203ddbf1ce982af7ba03235806f3f18f82c4e43a1f602495ba9a4eab3b28f368c27bdb7d17e4248a210b8fe1bb4e55d653d88060b623c4df92f5b9d77eead299eb3352ee99bda9cc5bd338b464bc309e5e40d0b2f5474e404b1cba4c1d5fad14690cd0c97372f4f15a022ccf37aee77c12684705c4fbd021a0415954120f95f882a609b3a463acb3719836adfaf19ddec083da7a2b4ac3ef13bb9ffab0c68435147c4aab2786960ddfd437c56061122547f20c059e1d694a886d16e13314320271a3a6600c0b5fdc6746a99781b2891526ded0b4b1ef95de09a76419cd5ebd6b1e752d4aee5f535abe2a7f22e8dd6d7992cefee0f2c5e32c9648fe19e710658d73a2d9115cd4ccac032b3c43b5b794587ad78898ec77922b268ae9ee11cc3d2b9da98219a444162a14838dfacdaee1212e895f38faf1b65f6a137a8dc8d53b9181f4c74139887a0f543c376c6c5ab60771390f978b4e7bfe09477d4a482fc159863470eac09779bae0d637e954a56365c905d4743ffc83f42c85c7483ecab9b21b5978f7c15936fe0749e197d2214eb3a2269dadaa649fb6ace06e7714108907a1ce7ff93892d143c920294210e9ecc80d660a6304ae26686cd49892ed34ac3cbb8eadbe2c147eb33360e773394c13060e2960945c5b64d7dbb078ed6501277e2ca087425f0912250c0ba7227d2f41e834737f74629597660e597e5dbdcad0d06e7fabd808da193b2da3a6f44856684d95fa5732f068aad15e159fd33d7337f55e142910d28c7193843d8f558c0a9e9a0960c1bac7d6b79b35808105a2aa85f322d48a14679d6c0c814a5f477b1ac27a519a3f5a6ded34c84c6dc759ffbe82915daa1db60595cae0bce1ea07f8c89d8756e176aabf6b2e2f37a9629639d2e65f1731558fdeaf8bba0797acef29f42fef5c91b8f9006a56545c20b2c6312b429753aaf061c2786561bab60a7c584274f0e7948ca4caddb0520e59a40e1f24dcf8bba8c8b5049cbe1a5fd2729f291f3845d389b22f26dad00928a31f762ad7cdbf2efaccf1a1865a90f500c10484819fc400274bbfd644aca5f2f8a3c81971580a10eece1fbd8ecf10a8ea800f17de12e11cbd6a094f2a0a802f1021133b8ad284ab44147596b171164eca8c52f8f37b199efd5f952277b5210cdd746f21a0cb0c23f00bafcfa9420ce40f3d20b5bbd5a7d5797fe2c8a73f65b6048e50dc974b43755fc35a19d83c0117254d875f01e49924aec59040c98dc0042ddb70bab0130acdcd1589fb0ff29e7d9fc72f244cec198c673751137657f7e9dbd374a4182cef1b83332b08411effb8dc86ba1584facee9e1d995101423709bfd0a637c82ce939beaadae66d613bac1b74f9c77881c002076bc278169d1cc397c411e94a4c9b4525812359f96620e1e53ac1fdc98eca38760138fdb839b2fb55e9f326309a2be9d4512ec115979d5031a56f1fb92afad9db72c9e323b6c653b7b4befff7c0582066c2cb385304d87dc93d565a62b6fc2d30aa33e3a0d70c49d2523cf802766c13097a2b43771c47e491ff64b1cc2ffc41b04364efc53fc8a34f6e0ec3e4b00361a1c5d5dbb09d7d874858a2ffabb7b9d432b5de12e57812ace0882278f6a390dd7963ceafc129a93826e96246ea9b0f0964f60960ef2a49b498a3cc6bf147d4f1ab966a3f0c2e5de13f770e01fc47fd3d36673341ae35f756079aaa355c5ae817f334ed207499fd26a6f3f163f1fba1672af2455aa85e46b5f6fa5532af57a28745c6282be430c8c3fa1adf98d246cc49c361e1af1866b21f39224d53e076831c5c1dcc39e9327024b95836798453de88eb5443e0dfe26abfaed257e8954b6bf562d64dcd8db782e636e48c6907279789a1c04437fa04d53d2391116ea093361ae982d5f30bf7d89baa7579ff32a468c4c493e15139cfc5873f7e3b1e3eaca878a72560c92ecdfc9b2c592e63280cd2864afc2cb5225b6dce0f79f3633212f8b432c4ae8b6685806216f93522d9273f33fb50966655f8e3a8aa35f7a7cc23d4b89f4b24fb3cb24d79f0fde48f9e83bedf85f5d9acd10ddf12ba98069cce33c9930edc8d509c285a91654f040609ff83a709d458276c9167defe2aa27e4d1a587a1b6781e72798f4804452731715d6d38a5a8eb1a5fc349d1403e944e1b23483dd14</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入阅读密码~</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>复盘</tag>
      </tags>
  </entry>
  <entry>
    <title>工具类</title>
    <url>/%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<blockquote>
<p>记录一些遇到的算法。</p>
</blockquote>
<blockquote>
<p>积累一下有意思的工具</p>
</blockquote>
<a id="more"></a>

<h3 id="名字随机生成器"><a href="#名字随机生成器" class="headerlink" title="## 名字随机生成器"></a>## 名字随机生成器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        String[] Surname = &#123;<span class="string">&quot;赵&quot;</span>,<span class="string">&quot;钱&quot;</span>,<span class="string">&quot;孙&quot;</span>,<span class="string">&quot;李&quot;</span>,<span class="string">&quot;周&quot;</span>,<span class="string">&quot;吴&quot;</span>,<span class="string">&quot;郑&quot;</span>,<span class="string">&quot;王&quot;</span>,<span class="string">&quot;冯&quot;</span>,<span class="string">&quot;陈&quot;</span>,<span class="string">&quot;褚&quot;</span>,<span class="string">&quot;卫&quot;</span>,<span class="string">&quot;蒋&quot;</span>,<span class="string">&quot;沈&quot;</span>,<span class="string">&quot;韩&quot;</span>,<span class="string">&quot;杨&quot;</span>,<span class="string">&quot;朱&quot;</span>,<span class="string">&quot;秦&quot;</span>,<span class="string">&quot;尤&quot;</span>,<span class="string">&quot;许&quot;</span>,             <span class="string">&quot;何&quot;</span>,<span class="string">&quot;吕&quot;</span>,<span class="string">&quot;施&quot;</span>,<span class="string">&quot;张&quot;</span>,<span class="string">&quot;孔&quot;</span>,<span class="string">&quot;曹&quot;</span>,<span class="string">&quot;严&quot;</span>,<span class="string">&quot;华&quot;</span>,<span class="string">&quot;金&quot;</span>,<span class="string">&quot;魏&quot;</span>,<span class="string">&quot;陶&quot;</span>,<span class="string">&quot;姜&quot;</span>,<span class="string">&quot;戚&quot;</span>,<span class="string">&quot;谢&quot;</span>,<span class="string">&quot;邹&quot;</span>,<span class="string">&quot;喻&quot;</span>,<span class="string">&quot;柏&quot;</span>,<span class="string">&quot;水&quot;</span>,<span class="string">&quot;窦&quot;</span>,<span class="string">&quot;章&quot;</span>,<span class="string">&quot;云&quot;</span>,<span class="string">&quot;苏&quot;</span>,<span class="string">&quot;潘&quot;</span>,<span class="string">&quot;葛&quot;</span>,<span class="string">&quot;奚&quot;</span>,<span class="string">&quot;范&quot;</span>,<span class="string">&quot;彭&quot;</span>,<span class="string">&quot;郎&quot;</span>,     <span class="string">&quot;鲁&quot;</span>,<span class="string">&quot;韦&quot;</span>,<span class="string">&quot;昌&quot;</span>,<span class="string">&quot;马&quot;</span>,<span class="string">&quot;苗&quot;</span>,<span class="string">&quot;凤&quot;</span>,<span class="string">&quot;花&quot;</span>,<span class="string">&quot;方&quot;</span>,<span class="string">&quot;俞&quot;</span>,<span class="string">&quot;任&quot;</span>,<span class="string">&quot;袁&quot;</span>,<span class="string">&quot;柳&quot;</span>,<span class="string">&quot;酆&quot;</span>,<span class="string">&quot;鲍&quot;</span>,<span class="string">&quot;史&quot;</span>,<span class="string">&quot;唐&quot;</span>,<span class="string">&quot;费&quot;</span>,<span class="string">&quot;廉&quot;</span>,<span class="string">&quot;岑&quot;</span>,<span class="string">&quot;薛&quot;</span>,<span class="string">&quot;雷&quot;</span>,<span class="string">&quot;贺&quot;</span>,<span class="string">&quot;倪&quot;</span>,<span class="string">&quot;汤&quot;</span>,<span class="string">&quot;滕&quot;</span>,<span class="string">&quot;殷&quot;</span>,             <span class="string">&quot;罗&quot;</span>,<span class="string">&quot;毕&quot;</span>,<span class="string">&quot;郝&quot;</span>,<span class="string">&quot;邬&quot;</span>,<span class="string">&quot;安&quot;</span>,<span class="string">&quot;常&quot;</span>,<span class="string">&quot;乐&quot;</span>,<span class="string">&quot;于&quot;</span>,<span class="string">&quot;时&quot;</span>,<span class="string">&quot;傅&quot;</span>,<span class="string">&quot;皮&quot;</span>,<span class="string">&quot;卞&quot;</span>,<span class="string">&quot;齐&quot;</span>,<span class="string">&quot;康&quot;</span>,<span class="string">&quot;伍&quot;</span>,<span class="string">&quot;余&quot;</span>,<span class="string">&quot;元&quot;</span>,<span class="string">&quot;卜&quot;</span>,<span class="string">&quot;顾&quot;</span>,<span class="string">&quot;孟&quot;</span>,<span class="string">&quot;平&quot;</span>,<span class="string">&quot;黄&quot;</span>,<span class="string">&quot;和&quot;</span>,    <span class="string">&quot;穆&quot;</span>,<span class="string">&quot;萧&quot;</span>,<span class="string">&quot;尹&quot;</span>,<span class="string">&quot;姚&quot;</span>,<span class="string">&quot;邵&quot;</span>,<span class="string">&quot;湛&quot;</span>,<span class="string">&quot;汪&quot;</span>,<span class="string">&quot;祁&quot;</span>,<span class="string">&quot;毛&quot;</span>,<span class="string">&quot;禹&quot;</span>,<span class="string">&quot;狄&quot;</span>,<span class="string">&quot;米&quot;</span>,<span class="string">&quot;贝&quot;</span>,<span class="string">&quot;明&quot;</span>,<span class="string">&quot;臧&quot;</span>,<span class="string">&quot;计&quot;</span>,<span class="string">&quot;伏&quot;</span>,<span class="string">&quot;成&quot;</span>,<span class="string">&quot;戴&quot;</span>,<span class="string">&quot;谈&quot;</span>,<span class="string">&quot;宋&quot;</span>,<span class="string">&quot;茅&quot;</span>,<span class="string">&quot;庞&quot;</span>,<span class="string">&quot;熊&quot;</span>,<span class="string">&quot;纪&quot;</span>,<span class="string">&quot;舒&quot;</span>, <span class="string">&quot;屈&quot;</span>,<span class="string">&quot;项&quot;</span>,<span class="string">&quot;祝&quot;</span>,<span class="string">&quot;董&quot;</span>,<span class="string">&quot;梁&quot;</span>,<span class="string">&quot;杜&quot;</span>,<span class="string">&quot;阮&quot;</span>,<span class="string">&quot;蓝&quot;</span>,<span class="string">&quot;闵&quot;</span>,<span class="string">&quot;席&quot;</span>,<span class="string">&quot;季&quot;</span>&#125;;</span><br><span class="line">        String girl = <span class="string">&quot;秀娟英华慧巧美娜静淑惠珠翠雅芝玉萍红娥玲芬芳燕彩春菊兰凤洁梅琳素云莲真环雪荣爱妹霞香月莺媛艳瑞凡佳嘉琼勤珍贞莉桂娣叶璧璐娅琦晶妍茜秋珊莎锦黛青倩婷姣婉娴瑾颖露瑶怡婵雁蓓纨仪荷丹蓉眉君琴蕊薇菁梦岚苑婕馨瑗琰韵融园艺咏卿聪澜纯毓悦昭冰爽琬茗羽希宁欣飘育滢馥筠柔竹霭凝晓欢霄枫芸菲寒伊亚宜可姬舒影荔枝思丽&quot;</span> ;</span><br><span class="line">        String boy = <span class="string">&quot;伟刚勇毅俊峰强军平保东文辉力明永健世广志义兴良海山仁波宁贵福生龙元全国胜学祥才发武新利清飞彬富顺信子杰涛昌成康星光天达安岩中茂进林有坚和彪博诚先敬震振壮会思群豪心邦承乐绍功松善厚庆磊民友裕河哲江超浩亮政谦亨奇固之轮翰朗伯宏言若鸣朋斌梁栋维启克伦翔旭鹏泽晨辰士以建家致树炎德行时泰盛雄琛钧冠策腾楠榕风航弘&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> index = random.nextInt(Surname.length - <span class="number">1</span>);</span><br><span class="line">        String name = Surname[index]; <span class="comment">//获得一个随机的姓氏</span></span><br><span class="line">        <span class="keyword">int</span> i = random.nextInt(<span class="number">3</span>);<span class="comment">//可以根据这个数设置产生的男女比例</span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = random.nextInt(girl.length() - <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (j % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//   name = 女- + name + girl.substring(j, j + 2);</span></span><br><span class="line">                name = name + girl.substring(j, j + <span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                name = name + girl.substring(j, j + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> j = random.nextInt(girl.length() - <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (j % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                name = name + boy.substring(j, j + <span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                name = name + boy.substring(j, j + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>带标题及单元格合并的easyExcel导出表格</title>
    <url>/%E5%B8%A6%E6%A0%87%E9%A2%98%E5%8F%8A%E5%8D%95%E5%85%83%E6%A0%BC%E5%90%88%E5%B9%B6%E7%9A%84easyExcel%E5%AF%BC%E5%87%BA%E8%A1%A8%E6%A0%BC/</url>
    <content><![CDATA[<h1 id="easyExcel导出表格（有标题、单元格合并）"><a href="#easyExcel导出表格（有标题、单元格合并）" class="headerlink" title="easyExcel导出表格（有标题、单元格合并）"></a>easyExcel导出表格（有标题、单元格合并）</h1><blockquote>
<p>如何过一天，就如何过一生。</p>
<a id="more"></a>
</blockquote>
<h3 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h3><p>最近工作上遇到了xlsx格式报表的导出，导出的数据存在父子关系，即相当于树形数据，有单元格合并和标题形式的要求，查阅了一些资料，总算是弄出来了，这里另写一个小样简单分享一下关于easyExcel导出具有合并单元格和标题的小结 代码，也算记录一下自己的工作学习。</p>
<h3 id="2、代码"><a href="#2、代码" class="headerlink" title="2、代码"></a>2、代码</h3><p><img src="https://img-blog.csdnimg.cn/20201123150059385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70#pic_center" alt="demo目录格式"><br>（目录及代码仅为实现，勿纠结格式和规范问题/捂脸）</p>
<h4 id="easyExcel依赖"><a href="#easyExcel依赖" class="headerlink" title="easyExcel依赖"></a>easyExcel依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> easyexceldemo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.EasyExcel;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.support.ExcelTypeEnum;</span><br><span class="line"><span class="keyword">import</span> easyexceldemo.dto.BizMergeStrategy;</span><br><span class="line"><span class="keyword">import</span> easyexceldemo.dto.RowRangeDto;</span><br><span class="line"><span class="keyword">import</span> easyexceldemo.dto.TitleSheetWriteHandler;</span><br><span class="line"><span class="keyword">import</span> easyexceldemo.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 该类的描述</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/23 11:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EasyExcelController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/excel&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excel</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Map&lt;String, List&lt;RowRangeDto&gt;&gt; strategyMap = BizMergeStrategy.addAnnualMerStrategy(data());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">            String filename = URLEncoder.encode(<span class="string">&quot;用户表测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + filename + <span class="string">&quot;.xlsx&quot;</span>);</span><br><span class="line"></span><br><span class="line">            EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                    .excelType(ExcelTypeEnum.XLSX).head(User.class)</span><br><span class="line">                    .registerWriteHandler(<span class="keyword">new</span> TitleSheetWriteHandler(<span class="string">&quot;我是一个小标题&quot;</span>,<span class="number">2</span>)) <span class="comment">// 标题及样式，lastCol为标题第0列到底lastCol列的宽度</span></span><br><span class="line">                    <span class="comment">//设置默认样式及写入头信息开始的行数</span></span><br><span class="line">                    .relativeHeadRowIndex(<span class="number">1</span>)</span><br><span class="line">                    .registerWriteHandler(<span class="keyword">new</span> BizMergeStrategy(strategyMap))    <span class="comment">// 注册合并策略</span></span><br><span class="line">                    .registerWriteHandler(BizMergeStrategy.CellStyleStrategy()) <span class="comment">// 设置样式</span></span><br><span class="line">                    .sheet(<span class="string">&quot;测试&quot;</span>)</span><br><span class="line">                    .doWrite(data());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            response.reset();</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            response.getWriter().println(<span class="string">&quot;打印失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;User&gt; <span class="title">data</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;总裁&quot;</span>);</span><br><span class="line">        User user1 = <span class="keyword">new</span> User(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;总经理&quot;</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;技术员&quot;</span>);</span><br><span class="line">        User user3 = <span class="keyword">new</span> User(<span class="string">&quot;4&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;技术员&quot;</span>);</span><br><span class="line"></span><br><span class="line">        list.add(user);</span><br><span class="line">        list.add(user1);</span><br><span class="line">        list.add(user2);</span><br><span class="line">        list.add(user3);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> easyexceldemo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.ExcelProperty;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.write.style.ColumnWidth;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 该类的描述</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/23 11:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ColumnWidth(10)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &#123;&quot;id&quot;&#125;, index = 0)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnWidth(20)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &#123;&quot;名字&quot;&#125;, index = 1)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnWidth(20)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &#123;&quot;职位&quot;&#125;, index = 2)</span></span><br><span class="line">    <span class="keyword">private</span> String postion; <span class="comment">//职位</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String id,String name,String postion)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.postion = postion;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPostion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> postion;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPostion</span><span class="params">(String postion)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.postion = postion;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="策略及其他"><a href="#策略及其他" class="headerlink" title="策略及其他"></a>策略及其他</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> easyexceldemo.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.metadata.Head;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.merge.AbstractMergeStrategy;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.metadata.style.WriteCellStyle;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.metadata.style.WriteFont;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.style.HorizontalCellStyleStrategy;</span><br><span class="line"><span class="keyword">import</span> easyexceldemo.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.util.CellRangeAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 合并策略和样式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/20 17:24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BizMergeStrategy</span> <span class="keyword">extends</span> <span class="title">AbstractMergeStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, List&lt;RowRangeDto&gt;&gt; strategyMap;</span><br><span class="line">    <span class="keyword">private</span> Sheet sheet;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BizMergeStrategy</span><span class="params">(Map&lt;String, List&lt;RowRangeDto&gt;&gt; strategyMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategyMap = strategyMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Sheet sheet, Cell cell, Head head, Integer integer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sheet = sheet;</span><br><span class="line">        <span class="comment">//如果没有标题，只有表头的话，这里的 cell.getRowIndex() == 1</span></span><br><span class="line">        <span class="keyword">if</span> (cell.getRowIndex() == <span class="number">2</span> &amp;&amp; cell.getColumnIndex() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 保证每个cell被合并一次，如果不加上面的判断，因为是一个cell一个cell操作的，</span></span><br><span class="line"><span class="comment">             * 例如合并A2:A3,当cell为A2时，合并A2,A3，但是当cell为A3时，又是合并A2,A3，</span></span><br><span class="line"><span class="comment">             * 但此时A2,A3已经是合并的单元格了</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, List&lt;RowRangeDto&gt;&gt; entry : strategyMap.entrySet()) &#123;</span><br><span class="line">                Integer columnIndex = Integer.valueOf(entry.getKey());</span><br><span class="line">                entry.getValue().forEach(rowRange -&gt; &#123;</span><br><span class="line">                    <span class="comment">//添加一个合并请求</span></span><br><span class="line">                    sheet.addMergedRegionUnsafe(<span class="keyword">new</span> CellRangeAddress(rowRange.getStart(),</span><br><span class="line">                            rowRange.getEnd(), columnIndex, columnIndex));</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, List&lt;RowRangeDto&gt;&gt; addAnnualMerStrategy(List&lt;User&gt; projectDtoList) &#123;</span><br><span class="line">        Map&lt;String, List&lt;RowRangeDto&gt;&gt; strategyMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        User preUser = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; projectDtoList.size(); i++) &#123;</span><br><span class="line">            User curUser = projectDtoList.get(i);</span><br><span class="line">            <span class="comment">//如果名字一样，将名字合并（真正开发中一般不会通过名字这样字段，而是通过一些关联的唯一值，比如父id）</span></span><br><span class="line">            <span class="keyword">if</span> (preUser != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (curUser.getName() == preUser.getName())&#123;    <span class="comment">// 名字相同则合并第一列</span></span><br><span class="line"><span class="comment">//                    BizMergeStrategy.fillStrategyMap(strategyMap, &quot;0&quot;, i+1);</span></span><br><span class="line">                    <span class="comment">//如果没有标题，只有表头的话，这里为 BizMergeStrategy.fillStrategyMap(strategyMap, &quot;1&quot;, i);</span></span><br><span class="line">                    BizMergeStrategy.fillStrategyMap(strategyMap, <span class="string">&quot;1&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            preUser = curUser;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strategyMap;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: 新增或修改合并策略map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> strategyMap</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2020/11/17 17:32</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fillStrategyMap</span><span class="params">(Map&lt;String, List&lt;RowRangeDto&gt;&gt; strategyMap, String key, <span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        List&lt;RowRangeDto&gt; rowRangeDtoList = strategyMap.get(key) == <span class="keyword">null</span> ? <span class="keyword">new</span> ArrayList&lt;&gt;() : strategyMap.get(key);</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (RowRangeDto dto : rowRangeDtoList) &#123;</span><br><span class="line">            <span class="comment">//分段list中是否有end索引是上一行索引的，如果有，则索引+1</span></span><br><span class="line">            <span class="keyword">if</span> (dto.getEnd() == index) &#123;</span><br><span class="line">                dto.setEnd(index + <span class="number">1</span>);</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果没有，则新增分段</span></span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            rowRangeDtoList.add(<span class="keyword">new</span> RowRangeDto(index, index + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        strategyMap.put(key, rowRangeDtoList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: 表格样式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2020/11/20 9:40</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HorizontalCellStyleStrategy <span class="title">CellStyleStrategy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        WriteCellStyle headWriteCellStyle = <span class="keyword">new</span> WriteCellStyle();</span><br><span class="line">        <span class="comment">//设置背景颜色</span></span><br><span class="line">        headWriteCellStyle.setFillForegroundColor(IndexedColors.WHITE.getIndex());</span><br><span class="line">        <span class="comment">//设置头字体</span></span><br><span class="line">        WriteFont headWriteFont = <span class="keyword">new</span> WriteFont();</span><br><span class="line">        headWriteFont.setFontHeightInPoints((<span class="keyword">short</span>)<span class="number">13</span>);</span><br><span class="line">        headWriteFont.setBold(<span class="keyword">true</span>);</span><br><span class="line">        headWriteCellStyle.setWriteFont(headWriteFont);</span><br><span class="line">        <span class="comment">//设置头居中</span></span><br><span class="line">        headWriteCellStyle.setHorizontalAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">        <span class="comment">//内容策略</span></span><br><span class="line">        WriteCellStyle contentWriteCellStyle = <span class="keyword">new</span> WriteCellStyle();</span><br><span class="line">        <span class="comment">//设置 水平居中</span></span><br><span class="line">        contentWriteCellStyle.setHorizontalAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">        contentWriteCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class="line">        HorizontalCellStyleStrategy horizontalCellStyleStrategy = <span class="keyword">new</span> HorizontalCellStyleStrategy(headWriteCellStyle, contentWriteCellStyle);</span><br><span class="line">        <span class="keyword">return</span> horizontalCellStyleStrategy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> easyexceldemo.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RowRangeDto</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RowRangeDto</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStart</span><span class="params">(<span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnd</span><span class="params">(<span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> easyexceldemo.dto;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.handler.SheetWriteHandler;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.metadata.holder.WriteSheetHolder;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.metadata.holder.WriteWorkbookHolder;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.util.CellRangeAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TitleSheetWriteHandler</span> <span class="keyword">implements</span> <span class="title">SheetWriteHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> lastCol;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TitleSheetWriteHandler</span><span class="params">(String title,<span class="keyword">int</span> lastCol)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.lastCol = lastCol;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeSheetCreate</span><span class="params">(WriteWorkbookHolder writeWorkbookHolder, WriteSheetHolder writeSheetHolder)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterSheetCreate</span><span class="params">(WriteWorkbookHolder writeWorkbookHolder, WriteSheetHolder writeSheetHolder)</span> </span>&#123;</span><br><span class="line">        Workbook workbook = writeWorkbookHolder.getWorkbook();</span><br><span class="line">        Sheet sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//设置标题</span></span><br><span class="line">        Row row = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">        row.setHeight((<span class="keyword">short</span>) <span class="number">800</span>);</span><br><span class="line">        Cell cell = row.createCell(<span class="number">0</span>);</span><br><span class="line">        cell.setCellValue(title);</span><br><span class="line">        CellStyle cellStyle = workbook.createCellStyle();</span><br><span class="line">        cellStyle.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class="line">        cellStyle.setAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">        Font font = workbook.createFont();</span><br><span class="line">        font.setBold(<span class="keyword">true</span>);</span><br><span class="line">        font.setFontHeight((<span class="keyword">short</span>) <span class="number">400</span>);</span><br><span class="line">        cellStyle.setFont(font);</span><br><span class="line">        cell.setCellStyle(cellStyle);</span><br><span class="line">        sheet.addMergedRegionUnsafe(<span class="keyword">new</span> CellRangeAddress(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, lastCol));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里为该demo的全部代码，使用时新建一个项目，直接复制粘贴过去，运行即可。<br>借鉴了不少网上的资料，有部分内容本人还尚未搞明白，有不明白可以留言互相探讨。<br>借鉴连接：<br><a href="https://blog.csdn.net/qq_41514643/article/details/106993760">1、这老哥的文档帮了极大忙，感谢！/抱拳</a><br><a href="2%E3%80%81https://blog.csdn.net/Aeve_imp/article/details/104910080/">2、这老哥的文档也很详细</a><br><a href="https://www.yuque.com/easyexcel">3、语雀官网</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>easyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>情灭缘散</title>
    <url>/%E6%83%85%E7%81%AD%E7%BC%98%E6%95%A3/</url>
    <content><![CDATA[<blockquote>
<p>纪念那些神奇、摸不着头脑的岁月。</p>
<a id="more"></a>
</blockquote>
<p>时光漫步，足迹轻点</p>
<p>折翼天使，舞降尘世</p>
<p>世间纠缠，悲观离合</p>
<p>姻缘情愫，绕困于心</p>
<p>百年人生，梦过一场</p>
<p>只为一瞬</p>
<p>轮回百世，本以</p>
<p>看破红尘</p>
<p>却</p>
<p>复灭于情</p>
<p>夕阳西坠，昏黄天地</p>
<p>轻风吹拂，落花缤纷</p>
<p>笛声悠扬</p>
<p>只为 祭奠</p>
<p>那些曾经的</p>
<p>岁月</p>
<p>​                                ——2013.12.5 午</p>
<img src="/%E6%83%85%E7%81%AD%E7%BC%98%E6%95%A3/%E6%83%85%E7%81%AD%E7%BC%98%E6%95%A3.png" class="" title="This is an example image">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>诗</tag>
      </tags>
  </entry>
  <entry>
    <title>无论接下来如何，不要后悔今天的决定</title>
    <url>/%E6%97%A0%E8%AE%BA%E5%A6%82%E4%BD%95%EF%BC%8C%E4%B8%8D%E8%A6%81%E5%90%8E%E6%82%94%E4%BB%8A%E5%A4%A9%E7%9A%84%E5%86%B3%E5%AE%9A/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="652eec907d9121ec839723df4967bd614f984b65c30998b092e3fee85139ae2b">a756220a6413262c08d2e52bbc7378bf461d63a46ff4bc53720da8c2e41e55a9385c804cb2f3447cecf5b20b530fb73959be8b84a6e543422202c6dbc7509954ba2da1085e491fd2bb7fa5105db063f576f4d728154d02d1807354f5c091fe97bbf935dab67f4c75634c589c37c0dd5298f1d306739640e9e19addde182b873e5e9a621cff777f30eed37063ea82b39812cfcf38c5cc523bdc34467e1255be68767b8621b3fd2093d13a21e30e50a4372197d1d529eecd850ed4d65bb31183b97fb7df61bb2f2fa16a52a681faea72b465fbdf3076c1d261ca92d6ee0676c74de362b746d72b1fcb0b60d61532cbae4190d75f71f73a21deafec60b9d63fe31912b5d4a3088a6fe1211a67dc9b7a5e5f4153b91a833371dbed46066c35d12449f38ea1ca8552ab3741f8ca97d74732dc4546d4423bd3b4401e10d878f09f176daa0bef6fbbeee265fad7247021fa3dd319186da825103085fe9c3bed1e32018273235f5292eeddf6aaa5a149a84daeacaeb42e97b45f48b08d05998944cca03a788443f6ca47504c7c3161ede54fdaf1bc277dfc53f36911758d6d1ada3846038ca848aff2169591d26c52a8b49c1c9fcc28d2449220bcf1eb6696136406e33538c8da8737d8ac35365c86fbaeebe01b90fab53ceccda4da5b910514fbd70ee1bcaf38f9a37637b5fe25819c7d9656debad80ef24649175726f524e0f8e1b019c2ba4abc3810a897f42fea9a09156563e5f7868d96a43e27fd111767f14ec6cc886602a256edb31a4f6ceb9e0230c732e3bc34fa8da964201249e0450a0b12554a12829d797fa10e218bd8b37b385184aa43b767070ada29d0aa325a6fb8ec9c856155555104ce1fc5a85bce645b9309065f5e067c70c2ab1f72db076a407196876b48c517d828226363a4d53ab77d00f8509fc9fe11505f176ff6091e11bb4c4bdfe0710a2f2c021d5c17fe415dcdb67780851e314876b3e4419f0dc3216f9daeaf7741bfe2095f879729b449dd89f36db80d29f8cfe900b61ff959a3fa103ec983cdb74640525c4a5f7d58f696a412c6ca0ea6c804834f599b0bebbb398d7f4e96dcd8beee2d0add8dd20a278a3fd887af34a22d9f5189a7acccae682603a4f012bbe746ebfd80a0e8f47bc9b55b5ca68dd06338f18fb47a86f224e26a95ff3ae653f37811e5a0ea4f260b49e8885f4d7bc709b3e8d3aca109fcdf368b3a9d981221679f271fc06486c2be3b36ad100c22bf23e673aa50173750c9246d091dfea899235dfb1be759f90cd23c8e373bf1f0fa911f28acc0128dcac60f256d1d9f46752e91a4e7d88f4c162f57bfbec2f70f54b4385f16ef4de1abb8956a60210ac49bd0e1888fb9cda6bbb4929014a36cede83f00187590c9b8b1749aff49c3d41ff4c1a67d3c3cfa838d0eb439ae6eff50a84b662bc8a5dafa5955fabfbcf9acadb5ef1066cccffe55876ced8a8b9cb5546ba3091031733a870d0a9b42f62a8d3db7f72c964d5ac0a00c8c49e6cafc8f26779cc7d23986ddf4c70f3c17b00447c65fc6b75e5a9b7a8d17bba9220de06f63b8643303c84d7aff76bf6377707b4fa8a5264e59872774c0cc1e777a5e76bd5ec7741fdbbbc79a183befc6e4e4bdf80af08ab784870f1b28a76f090024b6246056fe8cefcea71fee5e7e5d39adb5192578623c773f38ac2f8f7c50b78f1c6efd6212d623090c49eaebb20502bff5c768707e4b857ba27490822941deb07a4dd0f731d7aaf08a5c696eb31a7784c6453108348e50048a707867e71f059364c4fb9afcecc80611524f265cc9a1e3f6bfc6fdf4a2c484589ad34809b0fc268a2a1ac9d5695ce1a10ac545a8f31595f3e4a6560445aa14575d5db950455d9e9702360e81cafcf6cd3fecb7b010e6d8deb876071479ea0ef8be64f5f618a5474165dc04a087289a0fe1ab80636c7f82b1b9f6585c06c0272a32c0543ad21f2ea9585ff6762fdf1521ad143b73f70f2a20dc8288ad4a81ef3b1b5160a0ce2a2c2415e9b3b55e5c820dda751f420f27351ee6bea7cae4446848115209256f15cde6b3ae5cbcd4083af674adb2ade54eca2cf5e67af6b2cc7b027875d64e9f4c395c68b70ac5fa18b219e85da92935fcc2ad88e554ca47a9335cfe01d519f0d91728ca7b5c7fdfec46f6e1faeab39821f0f02251fa56542c6d1b4e50e9b4900e8c3a5c600a8baf43bf5b3052b7fcad093d39ef6116cacbf8c8b7800c0b5e496fad6face1e747bf9c2f80aab9e57435714b8a591b196853cf5c4f275f50f08c6a33d773733504ea6ccd2a8649b7ded85b823e045ffbaade55b9b0c80ebc0806742a6377d73c789fbc823e17571da0a0fab84d3fbd9ed0a0c5589811902d3beb946fc00cf550c0635b86850319bd203dc7177e8eafaaef7670c46f9c5120afd7062be1fbfdcad35e465f6375b44928887392df1da73ac2489921f48c811c945bb954dd9b8dd5dac44598c780782f23d7b62b0a0917d769bf775f92cf2b485434dd4bc5b0a99d4a90663b7e9a432c29aa463bcc82304b47bb056bc0312d4a6f169d0b0daa30ed12e62ade87577bcd85efade93483ab0ccb3e3c73efa27fb48e84228ee13b08e47eab14d733a468068b82d371dde814239f6cb36ca3406cbd8ce0801f4df701311322ee08852c4619bec3b72cfd9b73f5098d7127b0af6975cd7296e236745fceaa63e88188a7a7109c172408046f0d8c13c34eb9b3e161ae1b08651977d7f93b633af0bc63e465755362060f8511f9f6dfaa8cb213fed8cf1cbf2fa1b9c252419130f94e9dbde8ebef39207c4a3dd2ec4ac984340450e2bba3888151826855e0679b6902303a2b65aa6fc4d71bad1d8426e57e5e05a3574be1a919ed76a28719864522f8160f53c9d13a752c54fec38524eac9386f84c278ae35a85e5ef53b78074b6672df5ec49b4adfce7809fdf18288c18c705a865a7adb3b3ed67662c2ab9739b34ae5d122ab42992f12e8975b23c9f70c1485f424c9d0d0d76e561ca40957666f8c7384727804d5122393b2d84cf415bf717f01909a5b7e28ec5281d2c9e91010a5758e4c6b43c2ce0c848281c718c1c8a738156f1ad12ab532336fa4f21767687e59a46861e94e465ed2d619e56d237d18d4b24b8a807cd975cca86e8606b910c868d7f7b47c9f53f8621e3cc132033b1ca45cf93edec043c11681778d227b46c6c45e0f70e69814f97ce5c23cbcf46c581a5c6916023d784ee4a7eeb4c95fbf58ccda6fca4c12349097c582bf6e12847ae90dda378f48c583e55292a2402f2860aca61d36f7f2846760f863f1a2742198cfc4a954cae85ccc368e088a1fd6b650c1558b190afd48b7162b8df22c928966001d12361d12e4e411297798108be86a15c2cf74c73225aede13f5428ddbb14cc2a662aa031efca24c1342f361667d1f7fd2bb5daaf1a325561f4ef207741a63c72eaef6d442a847a86f919a87cf0a618729aaa9921a82445df7b9282ee15c22f8edb91de105d6a7d5cba98e90d16c2b511563feec2218c7ed6758b5440ab55247fc783fd54bb531274c2ff9fa90dc7fbad0f78c1119d73ddb4ab8acfd16a8e446464464bf4c548b5dbe7d9af160567bfb8a7596bc880e0c9b6c9bfdb25fc108e56dcc5a32b3886223b47380eeaece3c2df9b68ad7258a99609ab9544241699d01826c97f4a3c49e1191352f78ad98390d8977f246ad4088848e0124517399158568cd24c0bc15627bdf4d74ad846bd8c0a5916aa90463b93561290ddfff14bc12d82ed35f1217e2712fa92b188a2f5018c889cb1aaf656fd2118fd2cad0f2369e78bbc1ed01efd88c87a7163bcbfa0d4046e5dc3c27d89f10271aaf074d656f64e1bbf74713758cbcd81ffb58e2cf20afa2efdb45d5b1d3f00a8934e7cdcb6e5227e128ddbc75d2e9f75bb23efe39d31300caabd3188bb8783f23742e12b30a70b11611c8a385b8d4463cce9471191338296e04de10f3a87bd2aa01a15687806918187110493cf179f09e35173d4711b44b476fdf642ebce69d56ef1b89c6e28f3bb7ea0e954a7b59653fb50969613e80c878ce6dc340a539b87244d139316036cac82b65b820b83a2b18fee0cfc569b88a4d72b691cac7ab6d220ecbda63e3443fa805b4cf554da8bca7d241a5f4857395bc36a890dc993ab7941cedb5534905a26fb84a30ff9a2c58ceabb6980fa6588b454a6b827f501604b395c6e4e582571ae66225fd594cc7cf25a4c85350a37787af370a18edd7097b669816395870f317d665fad2bfdc7436170a52c72b3431ae8caf93a52dfe4f50643954d25c1ba3820dea2d37193bbf9b346dc4c190ce5b3e3501ab1550288fef24cf38bd03d1f3d738e04cd2d06582414beda39bf8137287d476a0cde5b997e2b46118eeac0b062b11ba3f11a8c9f6f625f79ad65d4ae0b9203090f30db9cdd143f5c3eedb0506da084008919b686fcd9620cb3b7c025d7b73e1aa45a9b7444ceefa998a92676eb60b3fc6ea5103bc6e45a6446c87ff75aef32bd938ecef0461e6c247c16e4a8f261f527a2997591fa28490fbf5f14a7ee3d7c794981c03ea8e9a3c00d4f1d6f3f5150b5aab1c26b13b7abd329a7762dba18aaf09b3651e7a0984c754f7b640cf5c0cadb751de40425c92e6e029e8c71c6ba516a3dad9a3e00df11912aab6160f04be93c593410b1b6ae268138b1f00d22eb946fcf9b15eb422cbf0b8646685a417d63d5fce27ba18</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入阅读密码~</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>辞职</tag>
        <tag>北漂</tag>
      </tags>
  </entry>
  <entry>
    <title>查找算法</title>
    <url>/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="二分查找法（折半查找法）"><a href="#二分查找法（折半查找法）" class="headerlink" title="二分查找法（折半查找法）"></a>二分查找法（折半查找法）</h2><blockquote>
<p>数据是有序的。</p>
<a id="more"></a>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span>: 二分查找算法，查到返回数据下标，查不到返回-1。 </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span> 吴焕业</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">int</span> high = arr.length - <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">           <span class="keyword">int</span> mid = (low + high)/<span class="number">2</span>;</span><br><span class="line">           <span class="keyword">if</span> (target &lt; arr[mid]) &#123;</span><br><span class="line">               high = mid - <span class="number">1</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &gt; arr[mid]) &#123;</span><br><span class="line">               low = mid + <span class="number">1</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> mid;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>满纸荒唐言</title>
    <url>/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/</url>
    <content><![CDATA[<blockquote>
<p>写一亩三分地，</p>
<p>写刹那所思，</p>
<p>写井底天空，</p>
<p>写胡言乱语，</p>
<a id="more"></a>

<p>写不知天高地厚，</p>
<p>写年少时的兵荒马乱，</p>
<p>亦写童言无忌海边漫步，</p>
<p>写夜幕沉睡万籁俱寂。</p>
</blockquote>
<img src="/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/%E9%81%AE%E5%A4%A9.png" class="" title="This is an example image">

<img src="/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/%E8%BF%BD%E6%A2%A6.png" class="" title="This is an example image">

<img src="/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/%E6%B1%9F%E6%B9%96.png" class="" title="This is an example image">

<img src="/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/%E6%95%99%E7%88%B6.png" class="" title="This is an example image">

<img src="/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/%E9%9D%99%E6%80%9D.png" class="" title="This is an example image">

<img src="/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/%E9%BE%99%E8%A1%8C%E5%A4%A9%E4%B8%8B1.png" class="" title="This is an example image">

<img src="/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/%E6%B8%85%E6%98%8E.png" class="" title="This is an example image">

<img src="/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/%E4%BA%BA%E7%94%9F%E5%93%AA%E8%83%BD%E9%83%BD%E5%A6%82%E6%84%8F.png" class="" title="This is an example image">

<img src="/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/%E6%97%A0%E4%BA%89.png" class="" title="This is an example image">

]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>字</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈ElasticSearch</title>
    <url>/%E6%B5%85%E8%B0%88ElasticSearch/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>Elaticsearch，简称为es， es是一个开源的<strong>高扩展</strong>的<strong>分布式全文检索引擎</strong>，它可以近乎<strong>实时的存储、检索数据</strong>；<strong>本身扩展性很好</strong>，可以扩展到上百台服务器，处理PB级别（大数据时代）的数据。es也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是<strong>通过简单的RESTfulAPI来隐藏Lucene的复杂性，从而让全文搜索变得简单</strong>。</p>
</blockquote>
<a id="more"></a>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>官网：<a href="https://www.elastic.co/">https://www.elastic.co/</a></p>
<p>下载地址：<a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目录结构</span></span><br><span class="line">bin 启动文件</span><br><span class="line">config 配置文件</span><br><span class="line">	log4j2 日志配置文件</span><br><span class="line">	jvm.options java 虚拟机相关的配置</span><br><span class="line">	elasticsearch.yml  elasticsearch 的配置文件！ 默认 9200 端口！ 跨域！</span><br><span class="line">lib   相关jar包</span><br><span class="line">logs   日志！</span><br><span class="line">modules 功能模块</span><br><span class="line">plugins 插件！</span><br></pre></td></tr></table></figure>

<h3 id="1-解压启动"><a href="#1-解压启动" class="headerlink" title="1.解压启动"></a>1.解压启动</h3><blockquote>
<p>windows 下进入bin目录，运行elasticsearch.bat,，访问127.0.0.1:9200</p>
</blockquote>
<img src="/%E6%B5%85%E8%B0%88ElasticSearch/9200.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\9200.png" alt="image-20210502183733343"></p>
<h3 id="2-安装可视化界面-es-head插件（要先装node-js）"><a href="#2-安装可视化界面-es-head插件（要先装node-js）" class="headerlink" title="2.安装可视化界面 es head插件（要先装node.js）"></a>2.安装可视化界面 es head插件（要先装node.js）</h3><ul>
<li><p>下载地址：<a href="https://github.com/mobz/elasticsearch-head/">https://github.com/mobz/elasticsearch-head/</a></p>
</li>
<li><p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install <span class="comment">#安装依赖</span></span><br><span class="line">npm run start <span class="comment">#正式启动</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>连接测试发现，存在跨域问题，配置es</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure>

<p>重启es服务器，然后再次连接</p>
<img src="/%E6%B5%85%E8%B0%88ElasticSearch/9100.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\9100.png" alt="image-20210502200832019"></p>
<p><strong>注意</strong>：存在<strong>跨域问题</strong>，解决方案：在elasticsearch.yml配置文件上添加</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解决跨域问题</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-Kinbanna"><a href="#3-Kinbanna" class="headerlink" title="3.Kinbanna"></a>3.Kinbanna</h3><blockquote>
<p>官网：<a href="https://www.elastic.co/cn/kibana">https://www.elastic.co/cn/kibana</a><br>Kibana 版本要和 Es 一致！</p>
</blockquote>
<h4 id="3-1-了解ELK"><a href="#3-1-了解ELK" class="headerlink" title="3.1 了解ELK"></a>3.1 了解ELK</h4><p>ELK是Elasticsearch、Logstash、Kibana三大开源框架首字母大写简称。市面上也被成为ElasticStack。其中Elasticsearch是一个基于Lucene、分布式、通过Restful方式进行交互的近实时搜索平台框架。像类似百度、谷歌这种大数据全文搜索引擎的场景都可以使用Elasticsearch作为底层支持框架，可见Elasticsearch提供的搜索能力确实强大,市面上很多时候我们简称Elasticsearch为es。Logstash是ELK的中央数据流引擎，用于从不同目标（文件/数据存储/MQ）收集的不同格式数据，经过过滤后支持输出到不同目的地（文件/MQ/redis/elasticsearch/kafka等）。<strong>Kibana可以将elasticsearch的数据通过友好的页面展示出来，提供实时分析的功能</strong>。<br>市面上很多开发只要提到ELK能够一致说出它是一个<strong>日志分析架构技术栈</strong>总称，但实际上ELK不仅仅适用于日志分析，它还可以支持其它任何数据分析和收集的场景，日志分析和收集只是更具有代表性。并非唯一性。</p>
<h4 id="3-2-了解Kibanna"><a href="#3-2-了解Kibanna" class="headerlink" title="3.2 了解Kibanna"></a>3.2 了解Kibanna</h4><p>Kibana是一个针对Elasticsearch的开源分析及可视化平台，用来搜索、查看交互存储在Elasticsearch索<br>引中的数据。使用Kibana，可以通过各种图表进行高级数据分析及展示。Kibana让海量数据更容易理<br>解。它操作简单，基于浏览器的用户界面可以快速创建仪表板（dashboard）实时显示Elasticsearch查<br>询动态。设置Kibana非常简单。无需编码或者额外的基础架构，几分钟内就可以完成Kibana安装并启动<br>Elasticsearch索引监测。</p>
<h4 id="3-3-安装启动"><a href="#3-3-安装启动" class="headerlink" title="3.3 安装启动"></a>3.3 安装启动</h4><p>官网下载，直接启动，访问localhost:5601即可</p>
<img src="/%E6%B5%85%E8%B0%88ElasticSearch/kibanna.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\kibanna.png" alt="image-20210502205110512"></p>
<p>使用kibanna的开发工具</p>
<img src="/%E6%B5%85%E8%B0%88ElasticSearch/kiabana%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\kiabana开发工具.png" alt="image-20210502211723241"></p>
<h4 id="3-4-汉化"><a href="#3-4-汉化" class="headerlink" title="3.4 汉化"></a>3.4 汉化</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在config.yml添加</span></span><br><span class="line"><span class="attr">i18n.locale:</span> <span class="string">&quot;zh-CN&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote>
<p>暂时将索引当做数据库来看待。索引 对应数据库，文档对应 库中的数据。<strong>面向文档，一切皆JSON</strong></p>
</blockquote>
<h3 id="1-新建索引概览"><a href="#1-新建索引概览" class="headerlink" title="1.新建索引概览"></a>1.新建索引概览</h3><img src="/%E6%B5%85%E8%B0%88ElasticSearch/%E7%B4%A2%E5%BC%95%E6%A6%82%E8%A7%88.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\索引概览.png" alt="image-20210502202031314"></p>
<h3 id="2-与数据库的映射关系"><a href="#2-与数据库的映射关系" class="headerlink" title="2.与数据库的映射关系"></a>2.与数据库的映射关系</h3><blockquote>
<p>elasticsearch(集群)中可以包含多个索引(数据库)，每个索引中可以包含多个类型(表)，每个类型下又包含多 个文档(行)，每个文档中又包含多个字段(列)。</p>
</blockquote>
<img src="/%E6%B5%85%E8%B0%88ElasticSearch/%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%AF%94%E8%BE%83.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\和数据库的比较.png" alt="image-20210502213357552"></p>
<h3 id="3-设计"><a href="#3-设计" class="headerlink" title="3. 设计"></a>3. 设计</h3><ul>
<li><p>物理设计</p>
<p>elasticsearch 在后台把每个索引划分成多个分片，每分分片可以在集群中的不同服务器间迁移一个人就是一个集群！默认的集群名称就是elaticsearh。</p>
</li>
<li><p>逻辑设计</p>
<p>一个索引类型中，包含多个文档，比如说文档1，文档2。 当我们索引一篇文档时，可以通过这样的一各顺序找到 它: 索引 ▷ 类型 ▷ 文档ID ，通过这个组合我们就能索引到某个具体的文档。 注意:ID不必是整数，实际上它是个字 符串。</p>
</li>
</ul>
<h3 id="4-倒排索引"><a href="#4-倒排索引" class="headerlink" title="4. 倒排索引"></a>4. 倒排索引</h3><p>elasticsearch使用的是一种称为<strong>倒排索引</strong>的结构，采用Lucene倒排索作为底层。这种结构<strong>适用于快速的全文搜索</strong>， 一个<strong>索引由文档中所有不重复的列表构成</strong>，对于每一个词，都有一个包含它的文档列表。</p>
<ul>
<li><p>例子</p>
<img src="/%E6%B5%85%E8%B0%88ElasticSearch/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\倒排索引.png" alt="image-20210502214814967"></p>
</li>
</ul>
<h3 id="5-安装ik分词插件"><a href="#5-安装ik分词插件" class="headerlink" title="5.安装ik分词插件"></a>5.安装ik分词插件</h3><blockquote>
<p>1、<a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a><br>2、下载完毕之后，放入到我们的elasticsearch 插件目录plugins下即可！(注：版本要和elasticsearch一致)</p>
</blockquote>
<p>ik提供了两个分词算法：</p>
<ul>
<li>ik_smart:最少切分</li>
<li>ik_max_word:最细粒度切分（穷尽词库的去划分）  字典</li>
</ul>
<h3 id="6-使用kibana测试分词效果"><a href="#6-使用kibana测试分词效果" class="headerlink" title="6. 使用kibana测试分词效果"></a>6. 使用kibana测试分词效果</h3><h4 id="6-1效果"><a href="#6-1效果" class="headerlink" title="6.1效果"></a>6.1效果</h4><ul>
<li><p><strong>ik_smart</strong>分词效果</p>
<img src="/%E6%B5%85%E8%B0%88ElasticSearch/ik_smart%E5%88%86%E8%AF%8D%E6%95%88%E6%9E%9C.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\ik_smart分词效果.png" alt="image-20210502233716287"></p>
</li>
<li><p><strong>ik_max_word</strong> 分词效果</p>
<img src="/%E6%B5%85%E8%B0%88ElasticSearch/ik_max_word%E5%88%86%E8%AF%8D%E6%95%88%E6%9E%9C.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\ik_max_word分词效果.png" alt="image-20210502233830186"></p>
</li>
</ul>
<h4 id="6-2问题"><a href="#6-2问题" class="headerlink" title="6.2问题"></a>6.2问题</h4><p>有些字的组成不能被称之为词，比如人名（张三、千仞雪）等，但是我们希望它能当做词来处理，这个时候我们就需要将它放入我们的字典中。</p>
<h5 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h5><ul>
<li>新建自己的字典文件，my.dic</li>
<li>在my.dic 文件添加自己的分词，比如千仞雪</li>
<li>在IKAnalyzer.cfg.xml中添加自己的字典文件 my.dic到扩展字典中</li>
</ul>
<h2 id="Restful风格操作"><a href="#Restful风格操作" class="headerlink" title="Restful风格操作"></a>Restful风格操作</h2><img src="/%E6%B5%85%E8%B0%88ElasticSearch/rest%E9%A3%8E%E6%A0%BC.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\rest风格.png" alt="image-20210502235417964"></p>
<h2 id="SpingBoot整合ES-实战"><a href="#SpingBoot整合ES-实战" class="headerlink" title="SpingBoot整合ES(实战)"></a>SpingBoot整合ES(实战)</h2><blockquote>
<p>官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html</a></p>
</blockquote>
<h3 id="获得原生依赖"><a href="#获得原生依赖" class="headerlink" title="获得原生依赖"></a>获得原生依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><img src="/%E6%B5%85%E8%B0%88ElasticSearch/%E5%88%9D%E5%A7%8B%E5%8C%96.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\初始化.png" alt="image-20210503114252881"></p>
<h3 id="熟悉一些API"><a href="#熟悉一些API" class="headerlink" title="熟悉一些API"></a>熟悉一些API</h3><p>restful风格</p>
<p>创建 put</p>
<p>编辑 post</p>
<p>查询 get    查询体query</p>
<p>分页 form size</p>
<p>…</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>结合着<strong>jsoup</strong>爬虫去使用</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>技术栈</tag>
        <tag>es</tag>
      </tags>
  </entry>
  <entry>
    <title>算法题</title>
    <url>/%E7%AE%97%E6%B3%95%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>记录一些遇到的算法。</p>
</blockquote>
<a id="more"></a>

<h3 id="题1"><a href="#题1" class="headerlink" title="题1"></a>题1</h3><p>小明去买评估，商店做活动，提供捆绑打包销售，例如每袋3个和每袋5个的形式出售。现小明只想购买n个苹果，同时想购买尽量少的袋数⽅便携带。如果不能购买恰好n个苹果，就不会购买（可返回-1），求解输出最少的袋数。（例如：18）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先通过列举法找到其中的规律</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZHYTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">1</span>;n &lt; <span class="number">100</span> ;n++)&#123;</span><br><span class="line">            System.out.println(n + <span class="string">&quot;==》&quot;</span> + bagCount(n));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bagCount</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">3</span> || n == <span class="number">4</span> || n == <span class="number">7</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">5</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> n / <span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 通过规律，我们得知从8及8以后的数字一定能够被3和5整分掉</span></span><br><span class="line">        <span class="keyword">int</span> a = n / <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> remain3 = n % <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">while</span> (remain3 % <span class="number">3</span> != <span class="number">0</span>)&#123;</span><br><span class="line">            a--;</span><br><span class="line">            remain3 += <span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a + remain3 / <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>经典排序算法</title>
    <url>/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>编程不只是一门技术，更是一门艺术。        ——雷军</p>
<a id="more"></a>
</blockquote>
<h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1.冒泡排序"></a>1.冒泡排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 1.冒泡排序</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(arr==<span class="keyword">null</span>||arr.length&lt;<span class="number">2</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ;j&lt;arr.length-i-<span class="number">1</span>;j++)&#123;</span><br><span class="line">               <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                   <span class="keyword">int</span> temp=arr[j];</span><br><span class="line">                   arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">                   arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式（一）</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>思想很重要！</p>
</blockquote>
<p>浅谈<strong>单例模式</strong>、<strong>代理模式</strong>、<strong>工厂模式</strong>。</p>
<a id="more"></a>

<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><blockquote>
<p>保证被创建一次，节省系统的开销。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 省略 get set</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalDataMgr</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> GlobalDataMgr MGR = <span class="keyword">new</span> GlobalDataMgr();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> String userName;</span><br><span class="line">	<span class="keyword">private</span> String passWord;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GlobalDataMgr <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> MGR;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><blockquote>
<p>就是相当于第三方，中介，比如在结婚中，我们关注的事只是结婚这一件事，但是结婚还有宴请宾客、组织会场、司仪主持等其他繁琐的事，这些事就可以交给婚介所处理，然后结婚的这个节点实际上婚介所是用我们的真实身份，也就是我们自己去完成的。所以这里的婚介所就相当于代理。（简而言之，使用代理就是为了帮我们做一些额外的事，我们只需要关注自己的事即可）</p>
<p><strong>注：代理 代理的是接口。</strong></p>
</blockquote>
<h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原始接口（真实角色，即我们）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">edit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">defaultMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是一个默认方法，实现接口时可重写，也可不重写&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 真实角色的实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoInterfaceImpl</span> <span class="keyword">implements</span> <span class="title">DemoInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">edit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;更新。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代理角色，在这里的作用相当于是加了一些 日志或者说是方法执行前的说明</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoInterfaceProxy</span> <span class="keyword">implements</span> <span class="title">DemoInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DemoInterfaceImpl demoInterface;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDemoInterface</span><span class="params">(DemoInterfaceImpl demoInterface)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == demoInterface)&#123;</span><br><span class="line">            demoInterface = <span class="keyword">new</span> DemoInterfaceImpl();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.demoInterface = demoInterface;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log();</span><br><span class="line">        demoInterface.add();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        demoInterface.del();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">edit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        demoInterface.edit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log();</span><br><span class="line">        demoInterface.query();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加日志功能&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//主类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DemoInterfaceImpl demoInterface = <span class="keyword">new</span> DemoInterfaceImpl();</span><br><span class="line">        DemoInterfaceProxy proxy =  <span class="keyword">new</span> DemoInterfaceProxy();</span><br><span class="line">        proxy.setDemoInterface(demoInterface);</span><br><span class="line">        proxy.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandle</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> DemoInterface demoInterface;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDemoInterface</span><span class="params">(DemoInterface demoInterface)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.demoInterface = demoInterface;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成得到代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),demoInterface.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理代理实例，并返回成功</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// 动态代理的本质，使用反射机制实现</span></span><br><span class="line">        before();</span><br><span class="line">        Object invoke = method.invoke(demoInterface, args);</span><br><span class="line">        after();</span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行前。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行后。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 真实角色</span></span><br><span class="line">        DemoInterface demoInterface = <span class="keyword">new</span> DemoInterfaceImpl();</span><br><span class="line">        <span class="comment">// 代理角色：无</span></span><br><span class="line">        ProxyInvocationHandle proxy = <span class="keyword">new</span> ProxyInvocationHandle();</span><br><span class="line">        <span class="comment">// 把真实角色赋给代理</span></span><br><span class="line">        proxy.setDemoInterface(demoInterface);</span><br><span class="line">        <span class="comment">// 获得代理角色</span></span><br><span class="line">        DemoInterface demoInterfaceProxy = (DemoInterface)proxy.getProxy();</span><br><span class="line">        <span class="comment">// 通过代理角色调用方法</span></span><br><span class="line">        demoInterfaceProxy.query();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><blockquote>
<p>工厂模式是我们最常用的实例化对象模式了，是用工厂方法代替new操作的一种模式。   ——百度百科</p>
<p>好处：<strong>解耦代码</strong>；给代码带来更好的一个<strong>可扩展性</strong>。</p>
</blockquote>
<h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标准规范类(AbstractProduct),用抽象类也行</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shoe</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">make</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两个实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SportsShoeImpl</span> <span class="keyword">implements</span> <span class="title">Shoe</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">make</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产运动鞋...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeisureShoeImpl</span> <span class="keyword">implements</span> <span class="title">Shoe</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">make</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生成休闲鞋。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>构造工厂</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShoeFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shoe <span class="title">makeShoe</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;sports&quot;</span>.equalsIgnoreCase(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SportsShoeImpl();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;leisure&quot;</span>.equalsIgnoreCase(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> LeisureShoe();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ShoeFactory shoeFactory = <span class="keyword">new</span> ShoeFactory();</span><br><span class="line">        <span class="comment">// 休闲鞋</span></span><br><span class="line">        LeisureShoe leisureShoe = (LeisureShoe) shoeFactory.makeShoe(<span class="string">&quot;leisure&quot;</span>);</span><br><span class="line">        <span class="comment">//运动鞋</span></span><br><span class="line">        Shoe sportsShoe = shoeFactory.makeShoe(<span class="string">&quot;sports&quot;</span>);</span><br><span class="line"></span><br><span class="line">        leisureShoe.make();</span><br><span class="line">        sportsShoe.make();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>韭菜成长记</title>
    <url>/%E9%9F%AD%E8%8F%9C%E6%88%90%E9%95%BF%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>投资有风险，入市需谨慎。</p>
<a id="more"></a>
</blockquote>
<h1 id="理财入门学习-韭菜养成记"><a href="#理财入门学习-韭菜养成记" class="headerlink" title="理财入门学习(韭菜养成记)"></a>理财入门学习(韭菜养成记)</h1><h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><blockquote>
<p>凡是涉及到跟钱的安排，都是理财。<br>摆脱穷人思维，建立富人思维。</p>
</blockquote>
<ol>
<li><strong>收入-支出 = 结余</strong></li>
<li>资产的内涵是 <strong>现金流</strong></li>
<li>如何实现财务自由</li>
</ol>
<ul>
<li>工资形成结余</li>
<li>用结余去换生钱资产</li>
<li>生钱资产产生非工资收入</li>
<li>非工资收入帮助我们实现财务自由</li>
</ul>
<ol start="4">
<li><strong>当你的生钱资产，产生的非工资收入，覆盖日常总支出，那么你就实现财务自由了。</strong></li>
<li>富人成功的两个秘密：</li>
</ol>
<ul>
<li><strong>生钱资产占总资产的80%以上</strong></li>
<li><strong>好支出占总支出的80%以上</strong></li>
</ul>
<ol start="6">
<li>一定要学会投资自己，务必让每一笔投资都是好支出</li>
</ol>
<hr>
<h2 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h2><blockquote>
<p><strong>量化思维</strong> 是富人最重要的思维之一。<br>存在银行的钱跑不过通货膨胀</p>
</blockquote>
<ol>
<li>用量化的思维看待事物，有时便宜的东西往往更贵，免费的东西或许贵的离谱，因为它们耗费了你大量的时间成本。</li>
<li>价值不是单一的衡量价格，而是背后带给我们的使用价值和回报价值。</li>
<li>无论何时，要让自己在心态建设上要像一个值得拥有那么多钱的人。（注：世间的一切美好你都值得拥有。）</li>
<li>给自己创造非工资收入，让自己不再为钱打工，而是让钱为自己打工，让钱为自己赚钱。</li>
<li>用<strong>量化思维</strong>助力财务自由三种方式</li>
</ol>
<ul>
<li>让自己的单位时间更加值钱（提高工作技能）。</li>
<li>把一份时间出售很多次（出书、版权、分红等）。</li>
<li>用钱买别人的时间，用别人的时间来为自己赚钱（最高级的方式）<ol start="6">
<li>富人珍藏优良（生钱）资产，穷人手里只有现金，劣币驱逐良币。</li>
<li>P2P理解：投资给放高利贷公司（一般达20%），高利贷公司通过放贷给借贷人，收取高额利息，而借贷人往往会还不起钱，这样放出去的钱不仅利息没收着，本金也收不回来，导致公司破产，投资人亏本。（<strong>你看中人家的利息，人家看中你的本金</strong>）<strong>注：P2P投资学相当于赌博，它不是国家交易所标准化的投资工具，==应当远离==</strong><h3 id="晚间学习"><a href="#晚间学习" class="headerlink" title="晚间学习"></a>晚间学习</h3><blockquote>
<p>理财能力决定复利最终效益<br>复利是人类的第八大奇迹。        ——爱因斯坦<br>投资的灵魂有两部分：理解复利的魔力；获取复利的能力。    ——查理·芒格<br><img src="https://img-blog.csdnimg.cn/20210109225930177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="关于复利"></p>
</blockquote>
<h4 id="关于复利"><a href="#关于复利" class="headerlink" title="关于复利"></a>关于复利</h4></li>
<li>复利是帮助普通人实现财务自由的法宝，复利通俗来说就是<strong>利滚利</strong>，<strong>今天的本金+利息=明天的本金</strong></li>
<li>复利的公式是： 最终收益 = 本金*（1 + 收益率）^时间</li>
<li>复利本质上是一种让钱高效生钱的思维方式。（富人财富都是复利积累起来的）</li>
<li><img src="https://img-blog.csdnimg.cn/20210109231202989.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="复利三大要素"></li>
<li>当前客观条件，拥有时间优势，缺乏本金，所以更要利用好本金，第一不要亏损，第二要高效的生钱。所以要<strong>找到优质的生钱资产并投资</strong>。另外，<strong>提高收益率才是最重要的。</strong></li>
<li>放在优质的生钱资产上使高效的钱生钱，无论价格涨跌，生钱资产都能赚到【现金流】，满足【高效生钱不亏损】的基本原则</li>
<li><strong>培养投资思维和理财能力</strong>，把握当下的机会，别让明天的自己后悔。</li>
<li><img src="https://img-blog.csdnimg.cn/20210109234755526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="复利三大要素对比"></li>
</ol>
</li>
</ul>
<h4 id="复利的反向作用"><a href="#复利的反向作用" class="headerlink" title="复利的反向作用"></a>复利的反向作用</h4><blockquote>
<p>复利的反向作用就是通货膨胀。<br>通货膨胀每天都在【收割】收益率低的人。<br>贫穷的原因很大一部分是因为懒惰，这种懒惰不是身体上的懒惰，而是思维上的懒惰。<br>不主动吃学习的苦，就得被迫吃生活的苦。<br><img src="https://img-blog.csdnimg.cn/20210109235111116.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="通货膨胀"><br><img src="https://img-blog.csdnimg.cn/20210109235610995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="巴菲特语录"></p>
</blockquote>
<ol>
<li>拥有了生钱资产，给你带来源源不断的现金流，在复利法则的作用下，帮助普通人实现财务自由。而你的理财能力高低决定了你收益率。</li>
<li>心疼投资大脑的钱，一直什么都不懂，不是被通货膨胀割韭菜，就是被投资市场割韭菜，一直穷下去。反之学习他人成功的方法，变成自己的技能，是最快的脱贫、升级之法！</li>
<li><strong>3142原则</strong>【资产分配的科学方法】<br> <strong>3【生活保障资金】</strong>：家庭年收入的30%用来作为应急金（包括日常消费，欲望消费），以备不时之需，可以通过无风险工具管理处置，灵活存取。（生活保障资金主要是日常开支，包含欲望消费）<br> <strong>1【风险保障资金】</strong>: 家庭年收入的10%用来配置家庭保险，作为家庭资产的后盾。（不要指望保险来赚钱。保险仅仅用来保障风险，而不是用来获得收益的。）<br> <strong>4【财务自由资金】</strong>：家庭年收入的40%用来养鹅，钱生钱。（可以拿出月收入的百分之十到二十的钱来养鹅，让钱生钱）<br> <strong>2【学习培训资金】</strong>：家庭年收入的20%用来投资自己，学习相关技巧，增加自己的工资和非工资收入。</li>
<li>建议：<ul>
<li>支付宝里是场外基金，收益低，一般跑不赢通胀，支付宝是第三方代理平台，代理为的是方便大家直接购买，因为你们暂时没有好的理财技能。支付宝，场外基金，有的收益看似高，但是卖出时会发现手续费特别高。（<strong>场外基金，简单来说就是，他代理了这个基金。卖给你，他拿点手续费，你挣一点钱</strong>）</li>
<li>银行的理财产品也不要买。</li>
<li>保险理财，更别买。<br>（<strong>理财型保险是远远跑不赢通胀的</strong>）</li>
</ul>
</li>
</ol>
<h5 id="总结：【关键富人思维-第四条】"><a href="#总结：【关键富人思维-第四条】" class="headerlink" title="总结：【关键富人思维-第四条】"></a>总结：【关键富人思维-第四条】</h5><p>⭐为什么说复利三要素中最容易掌控的是收益率？<br>复利三要素，本金、时间、收益率。把钱存在保险箱中，复利会发挥反向作用，把钱一口一口吃掉，长期来看1万元每年贬值1000元以上。投资开始的越早，时间要素发挥越大，复利的正向作用越早发挥作用。本金大的人，复利作用也比较大，但是投错了地方，本金再大也会亏完。如果本金和时间都不占优势，那么最有效的就是提高年化收益率，而提高年化收益率的关键在于自己的理财能力。</p>
<p>一句话总结：【时间无法改变，越早开始越好；本金依赖生钱资产；收益率源于理财能力，理财能力才是决定复利终值的关键】。</p>
<h5 id="【关键富人思维-第五条】"><a href="#【关键富人思维-第五条】" class="headerlink" title="【关键富人思维-第五条】"></a>【关键富人思维-第五条】</h5><p>为什么说投资自己的大脑、学会理财技能也是中产升级之法？<br>如同经典书籍《富爸爸》中说的，穷人卖时间换钱，其实本质是“卖命”。他们抱怨自己没有钱，其实本质是他们没有认识到投资自己的大脑是最快的脱贫致富之法。<br>比如一个专家花费一生写了一部巨著，我们花100元买了他的书回来看，其实某种意义上我们是买到了他一生的生命成果，学到了能获得成千上万的收益，这就叫“站在巨人的肩膀上”，贫穷的矮人站在“巨人的肩膀上”也会达到巨人的视野。</p>
<p>但很多人心疼这点投资大脑的钱，所以一直什么都不懂，一直贫穷下去。反之，穷人也能通过投资自己的头脑，学习他人成功的方法，买他人花了很多时间转化的成果，变成自己的东西，快速创造财富，这是最快的脱贫之法。</p>
<p>一句话总结：心疼投资大脑的钱，一直什么都不懂，不是被通货膨胀割韭菜，就是被投资市场割韭菜，一直穷下去。反之学习他人成功的方法，变成自己的技能，是最快的脱贫、升级之法。</p>
<hr>
<h2 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h2><h3 id="早间学习"><a href="#早间学习" class="headerlink" title="早间学习"></a>早间学习</h3><blockquote>
<p>我们常常高估了一天内可以做到的事情，却低估了一年里可以做到的事情。</p>
</blockquote>
<ol>
<li><strong>投资是长期行为</strong>，不是短期投机。</li>
<li>收入低、月光，可采取定投方式，勿小看长期小定投获得的收益。</li>
<li>理财思维越早建立越好；理财技能越早学习越好；理财，越早开始越好。</li>
<li>抛弃穷人思维，学习富人思维，做出正确选择，现在行动，改变未来。<br><img src="https://img-blog.csdnimg.cn/20210110130411507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="建立富人思维"><img src="https://img-blog.csdnimg.cn/20210110130518339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="人生手指曲线示意图"></li>
<li>做一个长期主义者，在学习中前进，坚持锻炼，相信复利和时间会带来正向的回报。</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20210110133325681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="个人资产配置"></p>
<h3 id="科学记账法"><a href="#科学记账法" class="headerlink" title="科学记账法"></a>科学记账法</h3><blockquote>
<p>了解账本对你没用，有用的是了解自己的财富增值速度并与之和平相处</p>
</blockquote>
<ol>
<li>第1步，就是要学会将自己的记下的帐转化为有用的资讯，从中解读自己的消费习惯，学习如何控管支出，增加资金的利用效率。</li>
<li>第2步：养成记账习惯后定时分析</li>
<li>第3步：不要沉湎于记录日常生活</li>
<li>第4步：了解你的财富才能控制你的欲望<blockquote>
<p>当一个人能够清楚看见未来的财务状态时，就会感受到身心平衡，上班工作也就更快乐，心情也比较容易满足。也许这听起来有些夸张，不过只要你也尝试跟着做，就一定能感同身受。<br>![sma<img src="https://img-blog.csdnimg.cn/20210110140804854.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="rt原则"></p>
</blockquote>
</li>
</ol>
<h3 id="晚间学习——学习理财工具"><a href="#晚间学习——学习理财工具" class="headerlink" title="晚间学习——学习理财工具"></a>晚间学习——学习理财工具</h3><blockquote>
<p>不懂不乱投，懂了放心投。<br>学好理财技能后再开始投资。</p>
</blockquote>
<ul>
<li><strong>晚间一读：</strong><a href="http://xiaobai.yaocaiwuziyou.com/index.php/Home/OldTest/NewWan?type=40&id=2092276&imid=10107060&num=3&isshow=1">财务自由的三大核心工具</a><h4 id="四种理财工具"><a href="#四种理财工具" class="headerlink" title="四种理财工具"></a>四种理财工具</h4></li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20210110212426594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="理财金字塔"></p>
<ol>
<li><strong>无风险理财工具</strong>：国债、定期存款、国债逆回购、货币基金、银行理财（保本型），年化收益率一般在3%~5%左右，可管理零钱，但是远低于通货率，不是事先财务自由的理财工具。</li>
</ol>
<ul>
<li>国债逆回购：本质是国债抵押借款，是无风险的（属于很好管理零钱的工具）<br><img src="https://img-blog.csdnimg.cn/20210110213053721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="国债逆回购"></li>
<li>货币基金： 也称“火鸡”，余额宝属于货币基金。<blockquote>
<p>捡钱小窍门：国债逆回购+货币基金，灵活运用你。比如：我们平时把钱买货币基金，每年可以获得3%左右的无风险收益。当国债逆回购收益高时，卖掉货币基金直接买入国债逆回购。等国债逆回购的钱到期后，当天再买进货币基金。因为买卖货币基金没有手续费。这样组合操作在保证资金方便使用的情况下，可以获得4%—6%的无风险年化收益率。但这个操作只适用于零钱管理，不适合长期理财，因为收益率是跑不过通胀率的，钱还是在贬值，【不是实现财务自由】选择的理财工具 。</p>
</blockquote>
</li>
</ul>
<ol start="2">
<li><strong>低风险的理财工具</strong>（目前而言，是重点，适合我们），分两类</li>
</ol>
<ul>
<li>一类是低风险中等收益，年化收益率一般6%—15%之间，主要包括【分级基金A】、【可转债】、【债券基金】、【股票指数基金】</li>
<li>另一类是低风险高收益，年化收益率一般在15%—30%之间，主要包括【生钱资产类型】的股票、REITs、房地产。</li>
</ul>
<p><strong>具体低风险的工具有：</strong><br>    - 【生钱资产类型的股票】就是持续分红的股票。<br>    &gt;股息率=股息除以股价<br>    - 生钱资产类型的REITs(瑞次)。【REITs】是房地产投资信托基金。投资REITs本质就是投资房地产（国外）。【生钱资产类型的REITs】就是持续高分红的REITs。其实一般的REITs都是持续高分红的。因为各国法律都规定REITs每年至少要把90%以上的净利润分配给投资者。（<strong>生钱资产类型的REITs也是一只持续下大金蛋的鹅。</strong>）<br>    - 【可转债】可以转换成股票的债券。在 100 元以下买进高信用等级的可转债没有风险。股市上涨的时候还能获得超额收益。是一种收益下有保底，上不封顶的投资工具。一般 90 元以下买进，年化收益率可达到 10%-20%。<br>    - 【股票指数基金】指数基金具有永生不死，长期上涨的特点。在合适的价位买入股票指数基金长期持有几乎没有风险。其年化收益率一般在10%—15%！（指数基金具有永生不死，长期上涨的特点。在合适的价位买入股票指数基金长期持有几乎没有风险。其年化收益率一般在10%—15%！）<br>3. <strong>中风险的理财工具</strong><br>4. <strong>高风险的理财工具（尽量别碰）</strong><br>    - P2P(网贷即属于p2p)<br>    - 私募资金<br>    - 比特币<br>    - 炒外汇<br>    - 收藏品<br>    - 期货<br>    - 耗钱资产类型的房地产</p>
<blockquote>
<p>中国这15 年中主要资产的收益率排名是： 股票 &gt;债券&gt;通胀&gt;房地产&gt;现金<br><img src="https://img-blog.csdnimg.cn/20210110220743152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="各类工具收益率排名"><br><img src="https://img-blog.csdnimg.cn/20210110220902742.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="实现财务自由三大核心工具"><br>用好了企业这个核心工具，你会成为企业家<br>用好了股票或REITs这两个核心工具，你会成为投资家<br>用好了企业、股票、REITs这三个工具，你会成为资本家</p>
</blockquote>
<blockquote>
<p>⭐正确系统的投资技能包括：<br>①理财的底层逻辑、富人思维<br>②股票的海选<br>③精选出好公司<br>④财务报表分析<br>⑤企业分析<br>⑥计算好价格<br>⑦制定买进标准<br>⑧制定持有标准<br>⑨制定卖出标准等</p>
</blockquote>
<h5 id="投资"><a href="#投资" class="headerlink" title="投资"></a>投资</h5><p>投机就是：所谓低买高卖。想着挣快钱，我投了就要挣钱。亏了怪这个理财工具风险大。不看本质，就想着挣钱。这和赌博没什么区别。</p>
<h5 id="价值投资"><a href="#价值投资" class="headerlink" title="价值投资"></a>价值投资</h5><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>⭐【重点一】：无风险投资工具，尤其关注逆回购、货币基金也就是捡钱小秘密<br>⭐【重点二】：低风险投资工具，尤其是生钱资产类型的股票、REITs<br>⭐【重点三】：我们实现财务自由的三大核心工具——股票、REITs、企业</p>
<p>【<strong>关键富人思维第六条</strong>】<br>⭐到底什么时候可以开始投资？<br>为什么有的人买股票必亏，看了几本书，学了几天课就急急忙忙要去股市里了，我们学车还要几个月，投资作为高度专业化、精细化的一个领域，不经过【系统的】学习就去“尝试”，这和训练了三天、看了几本武侠小说就上战场的士兵有什么区别呢？</p>
<p>士兵进行系统训练是为了保命，投资者进行系统的学习是为了保钱的“命”，反之，学个半瓶水就去投资市场，美其名为“试试”，这样的“试试”不会学到任何教训、经验，只会收获痛苦。</p>
<p>那些经过系统训练的人会把那些无知且自以为是的人收割的一滴血不剩</p>
<p>【这就是投资的真相】，不系统学习就想赚快钱就是送命。当你打算投资一个目标，有系统的分析方法，不再为了涨跌而心惊胆战的时候，这才是投资可以真正开始的时候。</p>
<p>一句话总结：投资第一原则：不懂不要投，懂了安心投，盲目“尝试”无疑送命，系统训练方可真正保住钱“命”。<br><img src="https://img-blog.csdnimg.cn/20210110221757562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h2><h3 id="早间阅读：《怎么才能越花越有钱》"><a href="#早间阅读：《怎么才能越花越有钱》" class="headerlink" title="早间阅读：《怎么才能越花越有钱》"></a>早间阅读：《怎么才能越花越有钱》</h3><ul>
<li>分清投资与消费</li>
<li>当下社会，仅靠勤劳也很难实现实现致富了。</li>
<li>今早<strong>工资收入</strong>和*<em>非工资收入</em>两条腿走路。**</li>
<li>始终相信自己是一个富人，别认为富人的世界我们一辈子无法企及。</li>
<li>一定要懂得投资自己，尤其是在收入少的时候。<h3 id="晚间学习-1"><a href="#晚间学习-1" class="headerlink" title="晚间学习"></a>晚间学习</h3><blockquote>
<p>学好财报是选出好公司的关键</p>
</blockquote>
<h4 id="财务报表"><a href="#财务报表" class="headerlink" title="财务报表"></a>财务报表</h4></li>
<li>含义：公司的流水。</li>
<li>作用：排雷，证伪而不是证实。<blockquote>
<p>资产负债率 = 负债 / 总资产<br>说明：资产负债率大于70%的公司，安全性差；资产负债率小于40%的公司，安全性很高</p>
</blockquote>
</li>
<li>理解应付和预收</li>
<li>应付：【先用货，后给钱】，牛！</li>
<li>预收：【先收钱，后发货】，牛！<blockquote>
<p>【应付+预收】是指我们占用别人的钱<br><img src="https://img-blog.csdnimg.cn/20210111213927531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="应付预收"><br>【应付预收】减去【应收预付】，可以看出这个企业的竞争力如何！⭐相减得出金额越大，说明公司的竞争力越强。⭐相减得出金额越小，竞争力越弱。</p>
</blockquote>
</li>
<li>【安全性】通过资产负债率来判断 </li>
<li>【竞争力】通过应付预收减去应收预付的大小来判断<blockquote>
<p>查看上市公司财报：<a href="http://www.cninfo.com.cn/new/index">http://www.cninfo.com.cn/new/index</a> （巨潮资讯网）</p>
</blockquote>
<ul>
<li>看财报步骤<br><img src="https://img-blog.csdnimg.cn/20210111223536842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="看财报步骤"><br><img src="https://img-blog.csdnimg.cn/20210111223848694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210111223930157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210111223950730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><blockquote>
<p>【成长有顺序，生活致富也有顺序】——先投资大脑，掌握理财的技能，然后再去生钱，负债不学习只会越来越穷。</p>
</blockquote>
</li>
<li>读懂财报的好处<blockquote>
<p>1.读懂财报可以让自己找工作的时候选到人均工资高的好公司，这样相同的时间努力可以获得更高的回报。<br>2.读懂财报可以更了解自己工作的公司，有利于升职加薪，做高管、做老板一定要能读懂财报才行。<br>3.读懂财报可以让自己找到更靠谱的伴侣，这个非常重要。<br>4.读懂财报可以让自己更了解家庭的财务状况，可以更有效的改善家庭的财务状况。<br>5.读懂财报可以让自己选出最好的生钱资产，通过好股票/好REITs会获得持续的现金流，会真正意义上实现拥有“会下金蛋的鹅”。</p>
</blockquote>
<h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><blockquote>
<p>【第一个重点】<br>通过财报看企业，用安全性和竞争力淘汰你手里的坏企业。<br>️【第二个重点】<br>中产与富人的关键区别在于是否能够识别生钱、耗钱、其他资产，并科学的持有他们。<br>️【第三个重点】<br>无产、中产、富人是可以相互转换的，学好理财技能就能由穷转成中产，由中产转成富人。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>【关键富人思维–第七条】<br>为什么月光、负债的人应该拿出一部分资金学习理财技能？<br>这里的负债主要指的是让自己的财务状况不断恶化的【坏负债】。<br>⭐️月光和负债只是不懂理财的结果，没有理财技能才是月光和负债的原因。很多人一方面不懂投资的骗局，一方面又眼红想赚一下，最终都入了骗局的“坑”，如果提前投资自己的大脑，难道还会犯这样的错误吗？还有很多人，本来钱就不多，贷款买了一堆耗钱资产，要么不断的刷信用卡、花呗、借呗，窟窿越来越大，要么生活拮据，每天人前风光，人后遭殃。<br>但对于投资自己，提升理财技能的好负债，他们却斤斤计较，错失了复利的好机会，这样的人生活只会越来越难过。<br>【成长有顺序，生活致富也有顺序】——先投资大脑，掌握理财的技能，然后再去生钱，月光、负债不学习只会越来越穷。<br>一句话总结：月光、负债是财务病，病根是缺少理财技能，忽视病因、不治病根，坏支出、坏负债只会越来越严重。</p>
</blockquote>
<hr>
<h2 id="第五天：价值投资的奥秘"><a href="#第五天：价值投资的奥秘" class="headerlink" title="第五天：价值投资的奥秘"></a>第五天：价值投资的奥秘</h2><h3 id="早读《无论投不投资，你都是在投资》"><a href="#早读《无论投不投资，你都是在投资》" class="headerlink" title="早读《无论投不投资，你都是在投资》"></a>早读《无论投不投资，你都是在投资》</h3><ol>
<li>拥有第一笔钱的时候，就已经是开始了投资。</li>
<li>在法定货币时代，现金可以说是少有的100%确定亏损的资产。</li>
<li>有大量的研究证明，A股公司的长期年华回报率大约12%。如果我们满足于10%左右的回报，投资其实很简单：定投股票指数基金即可；如果想要获得年化20%甚至更高的回报，就需要学习股票和REITs投资了。</li>
<li>投资股票的本质是投资企业，通过【分析财报】和【分析企业】才能了解企业的内在价值，进而选出优质的好企业。</li>
<li>财报是看过去，过去看着还不错还是不够，还得看未来，未来通过企业分析来看。</li>
<li>只有主动改变自己的理财能力，才会改变现状，获得好的收益。</li>
<li>理财并不是一味的省钱，而是合理的支配钱，学会创造更多的钱。</li>
<li>建立富人思维，增值自己，学习理财技能；用技能分析，选出优质生钱资产（选出好股票、好REITs）;每月的收入拿出一部分投资，购买优质省钱资产，长期持有积累，利用复利发挥威力获得收益。<h3 id="午间防骗：炒外汇投资骗局"><a href="#午间防骗：炒外汇投资骗局" class="headerlink" title="午间防骗：炒外汇投资骗局"></a>午间防骗：炒外汇投资骗局</h3><h3 id="晚间学习-2"><a href="#晚间学习-2" class="headerlink" title="晚间学习"></a>晚间学习</h3></li>
<li>创办不了公司，可以通过分析投资好的上市公司，成为股东，也是实现财务自由的一个方式。<blockquote>
<p>中国的GDP为6.5%左右，中国股市的年化收益率一定是远大于6.5%的。<br>据统计：中国的GDP大概6.5%以上；中国所欲上市公司的平均年化收益率大概12%以上；中国好公司的平均年化收益率24%以上。<br>买到了好企业，股价跌的越多，你的收益就越高！？</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>⭐定投优质股票指数基金大概可以获得年化10%以上的回报。<br>⭐而想要获得年化20%甚至更高的回报，就需要好好学习股票和REITs的投资了。</p>
</blockquote>
<ol start="2">
<li>【生钱资产类型的股票】就是持续分红的股票，每年分红收益率越高越优质。</li>
<li>.认识股票。</li>
</ol>
<ul>
<li>简单来说，股票是一个凭证，证明你拥有某一家公司的股份，即股票是股份的凭证。股票的本质是企业。</li>
<li>何为股份？    股份就是你对某家公司拥有的所有权。<blockquote>
<p>中国A股市场有两大交易所，分别为上交所和深交所。<br>A股就是以人民币交易的，在大陆上市的公司。<br>A股交易时间：每周一到周五，早上九点半到十一点半，下午一点到三点，周末休市。</p>
</blockquote>
</li>
</ul>
<ol start="4">
<li>投资好公司的股票赚的是什么钱？</li>
</ol>
<ul>
<li>公司持续的现金分红；</li>
<li>股票价格上涨带来的价差收益。</li>
</ul>
<blockquote>
<p>股价下跌并不一定是风险，利润减少才是风险。<br>5. 为什么【好公司的股票】越跌收益反而越大呢？？？<br>首先，好公司的盈利是持续的，所以分红也是持续的，并不是一会儿分，一会儿不分；好公司定期会拿出净利润的30%到70%分红，这就是你的持续现金流入，也就是非工资收入。（生钱资产的定义是【持续的现金流入】）。好公司股价越跌，它的公家就变得越低，这时你可以那这分红的钱再以较低的股价买入更多的股票，此时你得到的股票数量也越多，而分红是按照你持有的股票数量分的<br>6. 公司的【市值】反映了市场在某个时期对这个公司的看法，也就是股价的表现；公司【价值】就是这个公司到底值多少钱，和公司利润相关。</p>
</blockquote>
<blockquote>
<p>【关键富人思维-第八条】<br>⭐股票价格大跌能跌出什么？<br>我们【投资股票正确的方法】可以分为两大步：<br>第一步：选出内在价值高的好企业<br>第二步：在好的价格及时买入<br>这两步是不能颠倒的。<br>【当股市的价格出现下跌时】，好企业代表的好股票会出现好的买入价格，但是坏企业会跌出让投机者眼红的“陷阱”。如果在选择企业这一步错了，不管是多便宜的价格都徒劳无功，反而损失惨重。<br>【理性的投资者】对自己无法预测股票价格有自知之明，因为价格的波动总是难以预测的，因此他们将主要精力放在好企业的选择上，当好价格出现的时候果断出手，而后不管是继续跌还是涨，都是任凭风浪起稳坐钓鱼船。他们一般很少看股票，却获得了很高的收益。<br>一句话总结：股票大跌既有机会也有陷阱，机会的识别需要眼力，机会的把握需要技能，当眼力和技能配不上这个机会的时候，往往会步入陷阱之中。</p>
</blockquote>
<h2 id="第六天"><a href="#第六天" class="headerlink" title="第六天"></a>第六天</h2><h3 id="早间阅读"><a href="#早间阅读" class="headerlink" title="早间阅读"></a>早间阅读</h3><blockquote>
<p>做父母的，给孩子设立一个成长账户，分两部分：<br>一部分是孩子成长储备的钱；一部分是孩子提高财商用的钱。</p>
</blockquote>
<blockquote>
<p>思维一：明白不做什么比明白要做什么更重要；<br>思维二：少犯错，更不要做可能让自己一无所有的事</p>
</blockquote>
<ol>
<li>轻资产:可以理解为资源、时间、技术、知识、服务，也可以理解成无形资产，一种运营模式。</li>
<li>重资产：有形资产，土地、厂房、设备等，需要较大资金投入，回报率低<h3 id="午间防骗"><a href="#午间防骗" class="headerlink" title="午间防骗"></a>午间防骗</h3></li>
</ol>
<p><strong>虚拟货币投资骗局</strong></p>
<h3 id="晚间学习：越了解企业，我就会越富有"><a href="#晚间学习：越了解企业，我就会越富有" class="headerlink" title="晚间学习：越了解企业，我就会越富有"></a>晚间学习：越了解企业，我就会越富有</h3><p><img src="https://img-blog.csdnimg.cn/20210113214336880.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="强大企业模型"></p>
<blockquote>
<p>上班者用企业分析模型看透工作，投资者用企业分析模型看透股票。</p>
</blockquote>
<blockquote>
<p>【关键富人思维第十条】<br>为什么工作者、投资者都需要通晓企业分析技能？<br>⭐并不是创业者 、大老板才需要了解企业。<br>【投资中】，股票本质是企业，只有把9大要素都分析清楚，才能分析出好企业，才能给企业估值.<br>【工作中】，干工作的时候要有企业经营的思维，这样才更容易升职加薪。<br>⭐即便不为升职，干工作的时候也要有企业经营的思维。因为当你站在更高层去看自己的工作内容的时候你才能更好的理解自己的工作内容，这样你可以把工作做成老板真正想要的样子。<br>而那些只盯着自己的岗位的“井底之蛙”，有的时候挨了骂都不知道为什么，因为他缺乏跳出自己的框框看企业的技能，这就是他自己工作干不好的原因。<br>所以无论投资、工作，都需要通晓企业分析技能。<br>总结一句话：工作者用企业分析模型看透工作，投资者用企业分析模型看透股票。</p>
</blockquote>
<blockquote>
<p>从长期来说，一只股票的回报率跟公司的发展是环环相扣的，如果一家公司 40 年来的盈利一直是它资本的 6%（ROE），那在长期持有 40 年后，你的年均收益率不会和 6%有什么区别，即便你当初买的是便宜货。如果该公司在 20-30 年间盈利都是资本的 18%（ROE），即便你当初出价过高，回报依然会令你满意！<br>——查理•芒格</p>
</blockquote>
<blockquote>
<p><a href="http://www.iwencai.com/unifiedwap/home/index">http://www.iwencai.com/unifiedwap/home/index</a></p>
</blockquote>
<h2 id="了解REITS"><a href="#了解REITS" class="headerlink" title="了解REITS"></a>了解REITS</h2><ol>
<li>含义：REITs是一种依照法律程序成立的，以发行股票或基金单位的方式汇集投资者的资金，由专业机构进行房地产的经营管理，并将90%以上的税后收入净额分配给投资者的一种信托组织。简单说，REITs就是代理投资者投资房地产的上市企业，面临着系统的、严格的监管，这样更能保障中小投资者的利益。<br><img src="https://img-blog.csdnimg.cn/2021011420582171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="REITs定义"></li>
<li>优点</li>
</ol>
<ul>
<li>定期强制高分红。</li>
<li>投资门槛低。一般千元甚至更低就可以投。</li>
<li>交易成本低。一般REITs会免企业所得税。投资者买卖REITs只需要支付交易佣金，和买卖股票一样，不用支付其他高额税费。</li>
<li>流动性强。买卖REITs像买卖股票一样方便。在交易时间内随时可以卖掉。</li>
<li>专业化管理。REITs的管理团队都是房地产领域的专业人士。他们管理物业的能力一般会比个人强很多。</li>
<li>REITs收益率相对较高。<br><img src="https://img-blog.csdnimg.cn/20210114210401640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ul>
<ol start="3">
<li>投资REITs收益来源<blockquote>
<p>一部分是【分红】带来的收益<br>一部分是资产【价格上涨】的收益</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>【关键富人思维第十一条】<br>为什么要自己掌握理财技能才是最可靠的？<br>很多之前学员都表示跟着自己的家人、朋友投资，当赚了的时候会特别感激对方，但是亏的了时候又怨恨对方不靠谱。其实他们的家人、朋友很多也真的是好心，但是他们没有掌握投资技能，靠着小道消息，本质是投机，赚了是运气好，长期亏损是必然。<br>理财投资这么重要的事情，如果交给别人，就像把自己的“财富之命”交给了别人，如果遇上的是一个没有扎实理财技能的人，那就对自己的“财富之命”太不负责了。因为缺乏理财技能的人，是根本拿不住好股票的，他们无法分析企业，就无法正确面对价格的波动，最终还是逃不过亏损的命运。<br>而听信银行经理的话，选择银行理财，长期看收益连通货膨胀的贬值都跑不赢。特别是【中产家庭】，与其听信他人的小道消息，【最可靠的】还是自己通过学习成为家庭资产理财师，为自己的家人打理财产，创造更多非工资收入，这才是最安全可靠的方法。<br>【一句话总结】：最重要的本事需要掌握在自己手中，就像企业要把核心竞争力掌握在自己的手中一样，理财——事关自己和家庭的财富之命，只有自己掌握了，才是对自己的负责。</p>
</blockquote>
<blockquote>
<p>【关键富人思维–第十二条】<br>我们最应该为孩子留下什么财富呢？<br>我们总想为孩子留下一笔钱、一套房等，这并没有错，但我们给孩子留下的最重要财富却不是金钱。如果给孩子留下了金钱，但孩子缺乏理财的意识和能力，金山也会吃空，正如我们前面讲到的前山西首富李兆会一样。<br>【聪明的父母】会选择在孩子很小的时候就开始正确的财商教育，让孩子从小就养成正确的金钱观，从很小的时候就享受理财能力带来的复利。而这都取决于【父母的理财能力】，如果父母对理财一无所知，或者学个半瓶水，看似明白实则跑偏，那么不仅教不好孩子，还会把孩子带到错误的认知方向。<br>【不要让孩子像我们父辈和自己走过的路一样】，那样又要陷入“无知”—“试错”—“损失”得穷人思维里，耗费大量的时间成本、试错成本，又错失了大量的机会成本。我们走错的路，就不要让孩子再走一遍了。<br>【一句话总结】：我们最应该留给孩子的财富是可贵的品格和可靠的理财能力，身教重于言教，用我们的行为带动孩子品格的养成，用我们的理财能力让孩子的财商有一个好基础</p>
</blockquote>
<blockquote>
<p><strong>投资步骤</strong><br>①理财的底层逻辑、富人思维<br>②股票的海选<br>③精选出好公司<br>④财报分析<br>⑤企业分析<br>⑥计算好价格<br>⑦制定买进标准<br>⑧制定持有标准<br>⑨制定卖出标准等</p>
</blockquote>
]]></content>
      <tags>
        <tag>理财</tag>
      </tags>
  </entry>
</search>
