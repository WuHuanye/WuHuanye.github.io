<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021书目</title>
    <url>/2021%E4%B9%A6%E7%9B%AE/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="d72608620c6599b3d84ccd72096f8bc624dcdb099b4dd14af78166532c09298b">a756220a6413262c08d2e52bbc7378bf4e656ee4729e1645685e19410990e5e9e947a43c197d19fec0cce78353791127a0f059bd9b784d76febcfea45703212ffc89c60ff585211da4d0baa15413c9f633a1c872b560599a8fabc5e9216f46d8b885b5745e0fdb4710c9814371a5fd8b0a63703e296afe2741f218ca1a16b69e37b12a196c5a415dce5f71da9b363065afcc089585de57734455b3e8d93226ae99bbf7a7aa844e997ef779954405f7eb21a0af793db209319724aab0a11c9bff00d6b90f563b38efbe2662851a5f5fa7ca6afb9fe1278f9c6d504b4768bfdbb116cd0e5321f3cd706ecd1fda6312847df8dc89f15f5329724b16acff459051c3c2b5e7ea7d88cc4ab6b44fc14a35e415c88d95368618fb2da39dc168ad7b3f557232c77ff44490d376996ab348506d1ee9192aee14f3429d133e3f68bdfa7fe803158bead11637d641b168bb8aaf1c0bee528c93143734c4da8289aadb26dda8b914ddf73695770c4198959077bbc31b3ba9b53d7476ef2478b81bbb02df8ed2a827ec8312633438f5f2dfd24b5f7a07094a15efc7ea983f7cbb812f4515ad45d912e17d7441353dd448ee9601e2a3c8649a50bcfa0c0cbd08722af0b9babe85a8c45bd65bc7d11ab7a0419ab5ab45b747fa2ed7c312088ed1be88f589f7769013176433366b293a075d9f9bfadeb5ecada92ff17dbc58c3c3dcee16964da1e90e31c1080fe257d7b7af1a6c2956ce22d352596823f0da4068cf9a5248cd07ba30755dd3fe60f99376c054a5f083732cb40b002a1472749f137fc9fb6efe64b59dddbfb8f1f6922272ce64fc387be5dbc04910310bf7d93625a6aeac423975d29fbac9a969b0d0772b6e0de8c4e4bc9be16abbf4a0ab6ad962680ab178ca5215a67a8982b9f926162ea3d2a79e27126c30b60c4a9517d4420d32850b47f007ce74c9ec15c42124889f8c26071612c4a9914d552fddd9d0d4b395b4e283a0659de8471adba1132b01eacd3aa5c20774c47280042e932a77619c203df0cf4dce6dbf0a183a31db5d4aad72f95a4094a8bb701b693cc25abc61d9fe950f8422718691e267a7ebee995c43626da526fe575070abea18155702d0e0cf994a47225c55c77e73ed6d4704314ccff9e60473890c75394db3dc5039f932199ecaa951a571141e21f59c5f4ce0134b1f33af8b1c01e01b7121ea2385c0579010de416f5c2dcaaab93e7c431916b5334f6be0269a162c00cf81c5b42a65be60ce7c33e1b8d1f0dd8677fec7d5e93f0faf164deeff585f20b35f6ecdef7c11415d4df0fac1bee9d85958bc2f1e369c6b23a1beb8786c49a352b5eeef23a037ec1d76affc9d81915987e904f33ca57445a320c061ab652889be97460e62ed3e693346b858649e9abea588fd588c9b472cebc12b2f70a84f1f6ff8e780bc7466aba5567c44b56fdd8827b093d9d4e8030f9bd493d3b31f21ab38596547fc1b305470293a03cdbfcaa1ca4f3c70480f30c5e6045b800db734e130e1815f84aa1aae60570d848efbfaedb8b673a64673d9e3569017bf418b155a4d8d67c8f37137926b5f51fbf7e317501c0e857458de5cc46eb1b637d7f606f791277be99149ac8bdea909fc2dcac5e506766a6d82ca2426360909016870dd8683792b14376ab6a5d3b7fabde9b161e00366204a2942bcdcf2ada595728edbc1d781b49a565dd68b8cb006cf96cce6699e4e3730cc125ceba8bdddaabf93ab81d8770a5d3440b3ebf1c0de7e311487de94a1da060f7f62adf962b451b19ef70bb3d69cc02f287106d4dc6e469d109f27bb6bb15c8e6f9799b0da87894feb146ea3910bf86014c4f8fbec6ad217e15e7187b06f44985e8bc2ebcfaa98b729110123085dcda4ab8d03124a16ad6337e42eaae61939c5a9532d00caecb58214445d4137f69deb73ec9431369efb7635685d663343a44f25750249eb871f932d0d69f3962607450963b81b2bafdbc2398cdf1c21997d215718c7fed212dbb27c28f8bc4387444657457d2bd9146a591794631cea833070b790656ec5104fa51f2bd4179ba358568be86c7062df49c39b7563b49ba969d54c8fa80874e66b00f7097a020f5310cc4ab71a1c892ecda3cccc31ce2ad595a68cbecb60d10b34b4a568dde2714f7adc3d806cf04cb3bda18bb0a3704f6e0ff7cce2d18d01aac9775b4f10ac9b4f724f5a5cd5263c2db48d92e6b9af4f5bd7173c1c55557516523b5d172e39d512c0b0d891e1f41fd62d0ee92c321678aec092b6590e17bc86e209582095b3a925bb951a1d82178d375dabbd2548b89e3a7716b8d90c252ef48023f54637f2e1da16d6fe264ae317bbc16193e774e6596fd4d9567a7fd62f0e07e07e8963923ad412b11a602802e02dde8a6bd776fa5b89fef0b35104e99295f4cb8398bdefb4634d58d5f50e6e93f7b6f32e91a2025961965a5ec96c94dede659b9c9616bc6106760a97ab73763686916468db2510ec019a13ba88c4eb10596dc1754e03066f3c7ce1ff14b24e0097988acd1b34fef11f17757975498393eafa34793a27aa4d15816b9866fc57e1129ab07dbb0e91c91a22f3d333d3148482ce306d2b016765a0b6327f211c42628f73263f33b3012d79480a351abd64a7460652d3ee6ef57e2a690d12f3b29a009ad44ec8c2daf4da65627e841be468026f63f84db055f1fbe0c8dfdda86ed42460ba9d05429c34d376a02a5d88996d5b0309b064a7a2dc8896cbbed2b93f1f4562293bb6224bb1f65e01f1422b366c0ae620adaaaed87302e10f7a331e71c82dc67a7a1292be40cd275fa67bfca26c8f34e53e60c3f8765b2161599695fec1d9bb21504314ad34b77f7f4e71b0b6f7c0a2a8376b0238bb308635645d7bd09537c451938ae5c3697e1a730ae530aa3bcb6622f0b4742760805f19207e9097d4eb702aeb8bbfc3099a14d636b537e2092923d52e808e6517d0dfcb91d23e98d6912677c20d84eef9fa41ffdd209fc383e80e36dd6ad03db0e70ce187a838ebfefacc92fdc7c3a8dbc1954c6ed9feeab36d263dd64e9df034e428b4c4765c0c7d832c89aec24989d9e195c8b345b5b79fcb0a53fd3476b3e35f7ebf8af65cf57f94b2e0a76169e53343a7efce3ec90251e8314afd65ccacad4b6c9e6d8962bc16cbb51f24cbaff1c4ae6acfb45dabea3272cd3944d588d5fdf4304a868c4e849505cb9c64eec5cc20c94744cda5e3deb2031b2ea6b2150a10aa628583f7d22c84d0e3e95f8d800e712a5d2374bd406df9601bcb57629295eecb55cbc69e0890b6ef5567bc77def2d33963ce1497aa03ba1d0e9bb78c88c891d9dd011f52d3204df77a24b2c2a0207e9f01d06d25dd33ae6ae8bb58dbb9c391a772af11e25972457eac1e538984f9fd42616e35dc627b805b47631ae81a0fdb40cc310a759bcce0bbf7371fb5e830f849e2f04139fa4e9afb31dbffbcb57f05037c78aeedf801f6f14f9037595c04138c940797a5c1aada5942171c62ebb622482e5d6b88155726ebbf353d7b60b5fe8057b12272df694e0e662d5b89bb9bb9f3a5755fd17f8c47b6f4ca121890e3e0cade4b15772ab09f7cc587aeea449b61eee46f2f7ec4b4b86a1ad11fc062e35a5589945e2de8cc6931ce80f647c9a6114af668283c2702c8196479c5ab5901478ea7fff7d08fb2e386dbf65291fbe7a7eab87776c9efc216f1c6c81bac8e07cb65409eb5ec51fafcf8c42e5e6728f9fc20028fba5eec1b9d15f65f1eb0bc9e05803de7e53447af4028ab380eff3aab7d0d53d8ccbe6d2d7e4c77c69855da4216061d9c4decc204f84fb514965c8826323cac665f02076eee3d8455715bfa86fdb503167212b0071a09c7f030650bbf72a1572ef5e40415c0af56a6695bf17db57a2e359c025e34a8b0302c6c478c1c63951765395178df330da60f1cac902b8f9aed9c35ed7c4eb788fee744372ee60174ad779eb330c65b09fd540bbdbd4c9edc71d36e30272524e279f81c36f41e0ffabd66c5c4351cb21a2fcd0e8bc03e76f2fc95d3060617e382da9d5a6b9e3b9423c19fee41eaecc740e38d7e390b3658c6ad9a7d440417c6eebf3ee367d9cf988a6f264a1afe9a3609ee6a41ef3e131dc1f851c41f2e99b39f92d2181ec2b9b467459b9d464989fbb64bfebdc5595f0feea070c0bc7fb576e0eac3348c44a0702445b1df08576fcf87c07c95cfd34819bdd08587cf35db57888e6655fb13315529f9dd668f6277c11b693155fee94d9ae08519b3988fa365ddeef135b8dddf7349824d9862f3181fc6009ff1aae9095f88ebfeebe0716e35abe31de890cb742b0c3179fab2cf93c9baf45974adba87db325fed30eeb0b2920fd44af152bf9d9b7b235c2d775c318f1e4c33518af15e638b81f22fa53eaae4befe85886b8cdfd9dc20abaf0a41079a23553bcf5e8865f2a9b91685a70e1fac91f7e052590689483cdbd228eda1c4a3c83c2d818f9950bd404c302afe77e50e61f193b9b2d0160753501d63e7c0d20da9d9b9be9e1e1822223fe4ae59ff5df3f34c911c12269ead19660203575311060e9603fb9ba74c9f50b6e95b14c546d2c789d418e120124bc433cc3df348447dcbfde5bc5ec00dc507ff03fdc7272403834bbf852c6473a64ccd7a3045e71f37bc14b5344f17392eb3836665b463fa102c4ead6f9116b6d715ed752a71c19d95bee1ad92e3f6d6c76b0e812de46992016a09e851ffe00b7564821a5f8dd08046f0564a89fcd1ed9d02aaa140c078b836179665a58d4f44528720d2daa3fe5d5ac0d84956eb4026360e506bedaf100fc83c5d206c95</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入阅读密码~</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>北漂</tag>
        <tag>阅读</tag>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>java构建树</title>
    <url>/java%E6%9E%84%E5%BB%BA%E6%A0%91/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote>
<p>在项目中，我们经常涉及单张表数据进行树形目录结构展示（即具有层级关系的数据结构），比如菜单层级展示、商品分类展示等。</p>
</blockquote>
<a id="more"></a>

<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><blockquote>
<p>单张表之间要具备层级关系，必然会有能体现父子之间的字段，比如常见的<strong>id</strong>和<strong>parentId</strong><br>比如这样一张表<br><img src="https://img-blog.csdnimg.cn/20210417122242878.png" alt="表结构"><br>pid为0时即为最高层级，pid为 1366的是id为1366的孩子，在上面的体现是<strong>裤子和上衣都在衣服这一个分类下面</strong><br>要实现这张表树形结构的展示，我们一方面得在该表对应的实体类里添加一个自身的集合childList作为其孩子的集合。</p>
</blockquote>
<h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><blockquote>
<p>这里我是将它封装成一个工具类使用。<br>注意：这里默认表里的父级字段为 <strong>parentId</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 构建树的时候需要实体继承此类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 吴焕业</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/15 17:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">C</span> <span class="keyword">extends</span> <span class="title">TreeNode</span>&lt;?&gt;&gt;</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 父id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String parentId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  子节点j集合</span></span><br><span class="line"><span class="comment">     * 	非数据库字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;TreeNode&gt; children;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>工具类实现树形结构的展示（递归思想找子节点）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span>: 生成树工具(根节点可有多个)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span> 吴焕业</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> treeNodes 所有节点（所有数据）</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> parentId  指定根节点的唯一标识</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 2020/10/15 18:01</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span>  <span class="keyword">static</span> &lt;T extends TreeNode&gt;<span class="function">List&lt;T&gt; <span class="title">build</span><span class="params">(List&lt;T&gt; treeNodes, String parentId)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (parentId == <span class="keyword">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       List&lt;T&gt; rootNodes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span> (T t : treeNodes)&#123;</span><br><span class="line">           <span class="keyword">if</span> (parentId.equals(t.getParentId()))&#123;</span><br><span class="line">               <span class="comment">//得到根节点</span></span><br><span class="line">               rootNodes.add(t);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (T t : rootNodes)&#123;</span><br><span class="line">           t.setChildren(getChildNodes(t,treeNodes));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> rootNodes;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span>: 获得子节点</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span> 吴焕业</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> t</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> treeNodes</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 2020/10/6 18:27</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> &lt;T extends TreeNode&gt;<span class="function">List&lt;TreeNode&gt; <span class="title">getChildNodes</span><span class="params">(TreeNode t,List&lt;T&gt; treeNodes)</span></span>&#123;</span><br><span class="line">       List&lt;TreeNode&gt; childNodes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span> (TreeNode t1 : treeNodes)&#123;</span><br><span class="line">           <span class="keyword">if</span> (t1.getParentId().equals(t.getId()))&#123;</span><br><span class="line">               childNodes.add(t1);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (childNodes.size() == <span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (TreeNode t1 : childNodes)&#123;</span><br><span class="line">           t1.setChildren(getChildNodes(t1,treeNodes));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> childNodes;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote>
<p>要实现树形结构的步骤：</p>
<ul>
<li>表设计要有父子级关系（一般用 id 和 parentId）</li>
<li>实体要新增 子节点 的集合变量，一般用List接收</li>
<li>查找获得所有符合要求的数据，通过遍历得到 <strong>父节点集合</strong>，遍历<strong>父节点集合</strong>，遍历<strong>子节点结合</strong>，父节点的id和子节点的父id相等时，说明该节点数属于当前父节点的孩子，将其放入父节点的孩子集合中，遍历结束后，将子节点集合赋值给 <strong>集合变量</strong>。（这里用递归思想实现）</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>utils</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot面向切面AOP</title>
    <url>/SpringBoot%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2AOP/</url>
    <content><![CDATA[<blockquote>
<p>你要成为想象中的样子，这件事，一步也不能退。</p>
</blockquote>
<a id="more"></a>

<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>AOP是动态代理思想实现的典型例子，一般在项目中主要是做一些统一性的日志或者错误的处理。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Action &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot; </span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注解式切点（侵入式，需要在方法上添加自定义注解）</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.stack.config.annotation.Action)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logPointCut</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义切点表达式(非侵入式，一般企业开发更推荐使用这样的方式)</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.stack.config.controller.TaskController.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">controllerPointCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 注解式环绕方法</span></span><br><span class="line">    <span class="meta">@Around(&quot;logPointCut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span> <span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object result = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;方法执行开始。。。&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取方法名</span></span><br><span class="line">            Signature signature = point.getSignature();</span><br><span class="line">            System.out.println(<span class="string">&quot;方法名：&quot;</span>+signature.getName());</span><br><span class="line">            Object[] args = point.getArgs();</span><br><span class="line">            System.out.println(<span class="string">&quot;请求参数：&quot;</span>+ JSON.toJSONString(args));</span><br><span class="line">            <span class="comment">// 执行方法</span></span><br><span class="line">            result = point.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 切点表达式的环绕方法</span></span><br><span class="line">    <span class="meta">@Around(&quot;controllerPoint()&amp;&amp; args(arg)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">controllerMethodAround</span><span class="params">(ProceedingJoinPoint point,String arg)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(arg);</span><br><span class="line">        Signature signature = point.getSignature();</span><br><span class="line">        System.out.println(signature.getName());</span><br><span class="line">        Object result = point.proceed();</span><br><span class="line"></span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountImpl</span> <span class="keyword">implements</span> <span class="title">ICount</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 注解式的实现</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Action</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 切点表达式的实现</span></span><br><span class="line"><span class="comment">//@Pointcut(&quot;execution(* com.stack.config.controller.TaskController.*(..))&quot;)</span></span><br><span class="line"><span class="comment">// 符合该(* com.stack.config.controller.TaskController.*(..))条件下的方法都会被做切面处理，当然这个再继续定制化，例如</span></span><br><span class="line"><span class="comment">//根据有无参或者是参数的类型进行是否做切面</span></span><br></pre></td></tr></table></figure>

<h1 id="切点表达式"><a href="#切点表达式" class="headerlink" title="切点表达式"></a>切点表达式</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">execution (* com.sample.service.impl..*.*(..))</span><br></pre></td></tr></table></figure>

<p>整个表达式可以分为五个部分：</p>
<ul>
<li><p>execution(): 表达式主体。</p>
</li>
<li><p>第一个<em>号：表示返回类型，</em>号表示所有的类型。</p>
</li>
<li><p>包名：表示需要拦截的包名，后面的两个句点表示当前包和当前包的所有子包，com.sample.service.impl包、子孙包下所有类的方法。</p>
</li>
<li><p>第二个<em>号：表示类名，</em>号表示所有的类。</p>
</li>
<li><p>*<em>(..):最后这个星号表示方法名，</em>号表示所有的方法，后面括弧里面表示方法的参数，两个句点表示任何参数。</p>
</li>
</ul>
<p><a href="https://blog.csdn.net/lang_niu/article/details/51559994">https://blog.csdn.net/lang_niu/article/details/51559994</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>aop</tag>
      </tags>
  </entry>
  <entry>
    <title>回首山河已秋</title>
    <url>/%E5%9B%9E%E9%A6%96%E5%B1%B1%E6%B2%B3%E5%B7%B2%E7%A7%8B/</url>
    <content><![CDATA[<blockquote>
<p>忽有故人心上过，回首，山河已秋。</p>
<p>——2021立秋</p>
</blockquote>
<a id="more"></a>

<img src="/%E5%9B%9E%E9%A6%96%E5%B1%B1%E6%B2%B3%E5%B7%B2%E7%A7%8B/%E4%B9%B1%E4%B8%AD%E6%B1%82%E6%97%A0.jpg" class="" title="This is an example image">

<img src="/%E5%9B%9E%E9%A6%96%E5%B1%B1%E6%B2%B3%E5%B7%B2%E7%A7%8B/%E4%BA%89%E6%97%A0.jpg" class="" title="This is an example image">

<img src="/%E5%9B%9E%E9%A6%96%E5%B1%B1%E6%B2%B3%E5%B7%B2%E7%A7%8B/%E5%A4%A9%E8%A1%8C%E5%81%A5.jpg" class="" title="This is an example image">

<img src="/%E5%9B%9E%E9%A6%96%E5%B1%B1%E6%B2%B3%E5%B7%B2%E7%A7%8B/%E6%9C%9D%E5%9C%A3.jpg" class="" title="This is an example image">
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>字</tag>
        <tag>满纸荒唐言</tag>
      </tags>
  </entry>
  <entry>
    <title>复盘</title>
    <url>/%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ad2be610087a10dc00b32d1b3a754e6274534b0f2a0ad9dcaa88e006ab505858"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入阅读密码~</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>复盘</tag>
      </tags>
  </entry>
  <entry>
    <title>复盘二</title>
    <url>/%E5%A4%8D%E7%9B%98%E4%BA%8C/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2df53a5ef74624e7dafe2d7b66bec2e92d85454f341f2e82c05a03f2926220c9"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入阅读密码~</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>复盘</tag>
      </tags>
  </entry>
  <entry>
    <title>工具类</title>
    <url>/%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<blockquote>
<p>积累一下有意思的工具</p>
</blockquote>
<a id="more"></a>

<h3 id="名字随机生成器"><a href="#名字随机生成器" class="headerlink" title="## 名字随机生成器"></a>## 名字随机生成器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        String[] Surname = &#123;<span class="string">&quot;赵&quot;</span>,<span class="string">&quot;钱&quot;</span>,<span class="string">&quot;孙&quot;</span>,<span class="string">&quot;李&quot;</span>,<span class="string">&quot;周&quot;</span>,<span class="string">&quot;吴&quot;</span>,<span class="string">&quot;郑&quot;</span>,<span class="string">&quot;王&quot;</span>,<span class="string">&quot;冯&quot;</span>,<span class="string">&quot;陈&quot;</span>,<span class="string">&quot;褚&quot;</span>,<span class="string">&quot;卫&quot;</span>,<span class="string">&quot;蒋&quot;</span>,<span class="string">&quot;沈&quot;</span>,<span class="string">&quot;韩&quot;</span>,<span class="string">&quot;杨&quot;</span>,<span class="string">&quot;朱&quot;</span>,<span class="string">&quot;秦&quot;</span>,<span class="string">&quot;尤&quot;</span>,<span class="string">&quot;许&quot;</span>,             <span class="string">&quot;何&quot;</span>,<span class="string">&quot;吕&quot;</span>,<span class="string">&quot;施&quot;</span>,<span class="string">&quot;张&quot;</span>,<span class="string">&quot;孔&quot;</span>,<span class="string">&quot;曹&quot;</span>,<span class="string">&quot;严&quot;</span>,<span class="string">&quot;华&quot;</span>,<span class="string">&quot;金&quot;</span>,<span class="string">&quot;魏&quot;</span>,<span class="string">&quot;陶&quot;</span>,<span class="string">&quot;姜&quot;</span>,<span class="string">&quot;戚&quot;</span>,<span class="string">&quot;谢&quot;</span>,<span class="string">&quot;邹&quot;</span>,<span class="string">&quot;喻&quot;</span>,<span class="string">&quot;柏&quot;</span>,<span class="string">&quot;水&quot;</span>,<span class="string">&quot;窦&quot;</span>,<span class="string">&quot;章&quot;</span>,<span class="string">&quot;云&quot;</span>,<span class="string">&quot;苏&quot;</span>,<span class="string">&quot;潘&quot;</span>,<span class="string">&quot;葛&quot;</span>,<span class="string">&quot;奚&quot;</span>,<span class="string">&quot;范&quot;</span>,<span class="string">&quot;彭&quot;</span>,<span class="string">&quot;郎&quot;</span>,     <span class="string">&quot;鲁&quot;</span>,<span class="string">&quot;韦&quot;</span>,<span class="string">&quot;昌&quot;</span>,<span class="string">&quot;马&quot;</span>,<span class="string">&quot;苗&quot;</span>,<span class="string">&quot;凤&quot;</span>,<span class="string">&quot;花&quot;</span>,<span class="string">&quot;方&quot;</span>,<span class="string">&quot;俞&quot;</span>,<span class="string">&quot;任&quot;</span>,<span class="string">&quot;袁&quot;</span>,<span class="string">&quot;柳&quot;</span>,<span class="string">&quot;酆&quot;</span>,<span class="string">&quot;鲍&quot;</span>,<span class="string">&quot;史&quot;</span>,<span class="string">&quot;唐&quot;</span>,<span class="string">&quot;费&quot;</span>,<span class="string">&quot;廉&quot;</span>,<span class="string">&quot;岑&quot;</span>,<span class="string">&quot;薛&quot;</span>,<span class="string">&quot;雷&quot;</span>,<span class="string">&quot;贺&quot;</span>,<span class="string">&quot;倪&quot;</span>,<span class="string">&quot;汤&quot;</span>,<span class="string">&quot;滕&quot;</span>,<span class="string">&quot;殷&quot;</span>,             <span class="string">&quot;罗&quot;</span>,<span class="string">&quot;毕&quot;</span>,<span class="string">&quot;郝&quot;</span>,<span class="string">&quot;邬&quot;</span>,<span class="string">&quot;安&quot;</span>,<span class="string">&quot;常&quot;</span>,<span class="string">&quot;乐&quot;</span>,<span class="string">&quot;于&quot;</span>,<span class="string">&quot;时&quot;</span>,<span class="string">&quot;傅&quot;</span>,<span class="string">&quot;皮&quot;</span>,<span class="string">&quot;卞&quot;</span>,<span class="string">&quot;齐&quot;</span>,<span class="string">&quot;康&quot;</span>,<span class="string">&quot;伍&quot;</span>,<span class="string">&quot;余&quot;</span>,<span class="string">&quot;元&quot;</span>,<span class="string">&quot;卜&quot;</span>,<span class="string">&quot;顾&quot;</span>,<span class="string">&quot;孟&quot;</span>,<span class="string">&quot;平&quot;</span>,<span class="string">&quot;黄&quot;</span>,<span class="string">&quot;和&quot;</span>,    <span class="string">&quot;穆&quot;</span>,<span class="string">&quot;萧&quot;</span>,<span class="string">&quot;尹&quot;</span>,<span class="string">&quot;姚&quot;</span>,<span class="string">&quot;邵&quot;</span>,<span class="string">&quot;湛&quot;</span>,<span class="string">&quot;汪&quot;</span>,<span class="string">&quot;祁&quot;</span>,<span class="string">&quot;毛&quot;</span>,<span class="string">&quot;禹&quot;</span>,<span class="string">&quot;狄&quot;</span>,<span class="string">&quot;米&quot;</span>,<span class="string">&quot;贝&quot;</span>,<span class="string">&quot;明&quot;</span>,<span class="string">&quot;臧&quot;</span>,<span class="string">&quot;计&quot;</span>,<span class="string">&quot;伏&quot;</span>,<span class="string">&quot;成&quot;</span>,<span class="string">&quot;戴&quot;</span>,<span class="string">&quot;谈&quot;</span>,<span class="string">&quot;宋&quot;</span>,<span class="string">&quot;茅&quot;</span>,<span class="string">&quot;庞&quot;</span>,<span class="string">&quot;熊&quot;</span>,<span class="string">&quot;纪&quot;</span>,<span class="string">&quot;舒&quot;</span>, <span class="string">&quot;屈&quot;</span>,<span class="string">&quot;项&quot;</span>,<span class="string">&quot;祝&quot;</span>,<span class="string">&quot;董&quot;</span>,<span class="string">&quot;梁&quot;</span>,<span class="string">&quot;杜&quot;</span>,<span class="string">&quot;阮&quot;</span>,<span class="string">&quot;蓝&quot;</span>,<span class="string">&quot;闵&quot;</span>,<span class="string">&quot;席&quot;</span>,<span class="string">&quot;季&quot;</span>&#125;;</span><br><span class="line">        String girl = <span class="string">&quot;秀娟英华慧巧美娜静淑惠珠翠雅芝玉萍红娥玲芬芳燕彩春菊兰凤洁梅琳素云莲真环雪荣爱妹霞香月莺媛艳瑞凡佳嘉琼勤珍贞莉桂娣叶璧璐娅琦晶妍茜秋珊莎锦黛青倩婷姣婉娴瑾颖露瑶怡婵雁蓓纨仪荷丹蓉眉君琴蕊薇菁梦岚苑婕馨瑗琰韵融园艺咏卿聪澜纯毓悦昭冰爽琬茗羽希宁欣飘育滢馥筠柔竹霭凝晓欢霄枫芸菲寒伊亚宜可姬舒影荔枝思丽&quot;</span> ;</span><br><span class="line">        String boy = <span class="string">&quot;伟刚勇毅俊峰强军平保东文辉力明永健世广志义兴良海山仁波宁贵福生龙元全国胜学祥才发武新利清飞彬富顺信子杰涛昌成康星光天达安岩中茂进林有坚和彪博诚先敬震振壮会思群豪心邦承乐绍功松善厚庆磊民友裕河哲江超浩亮政谦亨奇固之轮翰朗伯宏言若鸣朋斌梁栋维启克伦翔旭鹏泽晨辰士以建家致树炎德行时泰盛雄琛钧冠策腾楠榕风航弘&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> index = random.nextInt(Surname.length - <span class="number">1</span>);</span><br><span class="line">        String name = Surname[index]; <span class="comment">//获得一个随机的姓氏</span></span><br><span class="line">        <span class="keyword">int</span> i = random.nextInt(<span class="number">3</span>);<span class="comment">//可以根据这个数设置产生的男女比例</span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = random.nextInt(girl.length() - <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (j % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//   name = 女- + name + girl.substring(j, j + 2);</span></span><br><span class="line">                name = name + girl.substring(j, j + <span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                name = name + girl.substring(j, j + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> j = random.nextInt(girl.length() - <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (j % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                name = name + boy.substring(j, j + <span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                name = name + boy.substring(j, j + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>奮鬥，給自己一個答案</title>
    <url>/%E5%A5%AE%E9%AC%A5%EF%BC%8C%E7%B5%A6%E8%87%AA%E5%B7%B1%E4%B8%80%E5%80%8B%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6a6c6b543130fdf6f285dd7205810739266497e6707a01629efa09ff1eb0dc74">6710a5a406ebe6fbdc684609212d456adb3ae5ea1c656f5c356da941a68fa832c0dcc1cba929a87fa9a55ef04605de8295454cbd3d983c6310efa148fa664eccff73c9b38b79740ecabee9fc60b8e6608605931cad97dea0ccad32e650eb0f1a139b634b77998a0358ee2d3d975a1fbd1559fa00066c63ac588a4e66337095be7ec7df0030c69908bbbb61cca448b010716abfdc93674635ed601ef970ce240795f1f849dbb40c6566947f5456b1ecc581cd344904d891a82329659adefc8e538e500df353a183881146a041dcd6af2032594df230ea21118384903c918c8c71419fd11a8db35aba3de61740218fd2e0967501bc73e008a58b15c2cc30856a5bcafa4d8690c33045d0392c8cbdf9b0cb575772d199a8373ce380ad34e242f2ab2672daddff788b02fc854125901a217d7c52c69fcd38be213ec46971416651e05204b00ccaacd9261dd7171038db48a2bd16baa225a767706bc69985affa3d2adc57de24e69fdae48b3d6c2ec8fd4f9fc56a39479de5830632aa27e711f0512cb53b13d5a0e1dad3414b3d0ce3762190d3d458cb806eb67f0a5b78ae65f43478b9ea42a92f1ccede9d1f69bc4c75b9ad594960232ea720e1a7acb24d4b7886690e52d55703d12f171a77f7b6f396d61c79f160112920be410782a03fc274e704ccac24eb6f66ddc026bbe8c5c37d9863711663dc933aace40db4a165018147e875124b210ca4575b598fe046d9718208c466c7f524dfccfc28ab1fd26fa5d6cb22cfc1399df43ff455e2bb95d2dff0e48c3b60e93310d6f6106f0e8ce11c854953ea25659118efb738a35101771388c34ee5525f58deb208d2444e138cc73000f07efa691c6b33b5d3854a386770ce0cd01dd0e82e2acaffb6fc468b9c3f4257717ccb315eb977a7eeefc94d4298ef18b6d5eb06ae818a8275a18b64233a964b3fd7c8f10afd48f5739b9b0d8de4cdb47325e72a7884934fa3edffc8d9d2ccb7b288c47d3497e445c55e22fbfc60cc15b0416657ecf72250fca046a64eb489c5fadd8ac9bf5234492920e0ad130bb86db4795937b0bdf3d755ddc552e85740aac4b46964475380bbb6d280748c45fbe12f8ed10493ba992f0b2e5f9183e9a7186eeaf6829c63dc7174e20baea5aed4a49429d956d39e6e459ad13b02dad1ffb06bd800f5ac1092c4202ae2adc8c7056bdcffaae4dc1d7b757e7b665489a323665d6c2cb68e52a3aff8231da3f4c0db6045290b2dc4abcab1eb51394e0f185904641011098e14fe0e1334186428a745b5737f94dfdf4b9014c09b2b6afdc5538cc9b81c57b4ccaf9e5b0a5cc8a1b2c75d61055610a552d211c1e9ceee1f027d4a6ff02da176be984d6194043fb4f9854d5c980d7f53680ef614faf8ba7d5d8cec77f0b7b307f8f948ddbc3be65b78cb046f45db8013c3100271cb356d8f3772e89f0e8e67bb8556b7004f90c2a8466c076e81f31e597cead5eac5c46329a050bb74f1539692bed3883104db190dbfeb4dfffcd2095bf205a7ea67b6ae7f0df196f9cf05921923792e1390b46f3b1f50946902dba961384581aa5c57663fe4f620c8ea33a56f18898110055c90935d8bac7aa5a86762b74ac2deee5fc9d0d35a894c33377dc67d96ecb17c268159909cbeaa4aef882198ff941871b7c2758e64437be7d5605401c4ed0a37c3e8c3a54e6e232ad8b2ca16238771522914e5f7c66674dbe7fe3ece14a789a84ea39fa99032371ba0cc31194db89a34b4ddcd30bd70c8c5ac5bec86ebbc883dacf4edf825e41f32dc4d9c1e179231733f1fafd55194e00c3c4cec2c6bd50fb568193259af8f026ec16ef3866401a289fc1d944c7a25a3a5cdf3b7fc2b44b16360983e93c68292b698494ba48963472976bdaa0d937780c345e346a6a4d828eae132375df4c314a4f798271f3164040ec4ab997ad26f9b1805bd481329b2d481ccb36f8e520e12f113138fd5cc10846e8f73d5e62281e12af0a63bfbbb8f92c563e89f25369678d2c5237549309fe4b59bd20a3ce3e4335be04c51759850bb9e315e5005c687d675c6c1c0eac4066dbc7c36778ae51196095676341a39863bf6ec1229c899db9e4220e07d52650f6f5b0e6d379f972ba7806b7eb37136bc27c497d914a56159d789493049b68c52e6fbd1fffb98aa9b8285f2a103dc3e875c71127939925efa644712d02760e8b829f808d2422ccd0a3364a023e5c325986e458acc9c73fafa80e54f964f1acc4f62fcaa73694bf7c828454aa9ecc8f05fe09043fb97428f3d22b88e3c3f70813117ff43b57a9dcd01281ad61bc4d8ef1981bf78a833586af033fb08407ac7238dcb3ad4dfb3fe3d286210ac4832c05adec636ff87332496b49b5da8b2480460734ea63c66f68cd0671ab799eb82333d10bb064e92b06ae78ab588961110d3e4f322d0f6703ba7e4da6bc9f68563937699f3158bcc7659fe851a2fe238f0b14a5ad2f3536d647310d3a7f287c7930828a1136d0f7b6678263a907a972b4b7778ea22ca130820d10f6e559758f1b14d552d2b7c9a7f89eba0f4b97e2f60fa9ebc0e95dc02d7acaa652b269f2e01ed3b7203f331773291ac3df849e32d7f210f0c70e7b657a06268fd3909c7ee75cbd296e0a7fa9c0c5cd502eacfd255bf12a061ffdb3574d5fd0b695ff1ab05b67efb7d3c0ce4872418354685fafdabfd52df98cc55a5bf87e5e0fa4513d962b80d1c25ee8de960ac8a94ac6b95dbff60aa02a15d24b1c4ec509ea32cc1a5a1f719a1921a5c7f06674ef11c71fe31f7eaa64f84a2fd30c4d40a9a25bac0879ded293940ad00393a7b13d0555483ef8cd37e47f49c0deed98eb3151f35efb145688fd1fdc63941bf7ee7189510826281bae3db999963d682481d312cccd51a3eeea49e77fdb2b7ebfd83c9081d663986574b7156c82213b55119df5cb1049cb1875a81347774385cce196e83518df970b8ae20589a93f632ceb2d0f4112290e21e13cc541656e196f5c1156618e5840d160bd38d3706fac92078cb05ead6ae66d0b4867f7a9f1cd8b54f74c93214e797644a0051a4f0be89c6100035914c75b98da475b348371547ce6f43198f3f0ccf4b7e1225e97786e1a870993dd98897c73c1bdc34d004e009fc48b1689458d4462d998857379ee485b6cf7a7aef71933abbb8f70ca3f010e9391f105ab6cbab0c37e95ebcb1cb540bc9e8f0edb2254e9488fb72329b9e6bc6747e91aa7e28554f3358db8b25adb23ef73174fd6f7566e0dfd67ceea4ff92b3737a6129a9</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入阅读密码~</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>北漂</tag>
      </tags>
  </entry>
  <entry>
    <title>带标题及单元格合并的easyExcel导出表格</title>
    <url>/%E5%B8%A6%E6%A0%87%E9%A2%98%E5%8F%8A%E5%8D%95%E5%85%83%E6%A0%BC%E5%90%88%E5%B9%B6%E7%9A%84easyExcel%E5%AF%BC%E5%87%BA%E8%A1%A8%E6%A0%BC/</url>
    <content><![CDATA[<h1 id="easyExcel导出表格（有标题、单元格合并）"><a href="#easyExcel导出表格（有标题、单元格合并）" class="headerlink" title="easyExcel导出表格（有标题、单元格合并）"></a>easyExcel导出表格（有标题、单元格合并）</h1><blockquote>
<p>如何过一天，就如何过一生。</p>
</blockquote>
<a id="more"></a>

<h3 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h3><p>最近工作上遇到了xlsx格式报表的导出，导出的数据存在父子关系，即相当于树形数据，有单元格合并和标题形式的要求，查阅了一些资料，总算是弄出来了，这里另写一个小样简单分享一下关于easyExcel导出具有合并单元格和标题的小结 代码，也算记录一下自己的工作学习。</p>
<h3 id="2、代码"><a href="#2、代码" class="headerlink" title="2、代码"></a>2、代码</h3><p><img src="https://img-blog.csdnimg.cn/20201123150059385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70#pic_center" alt="demo目录格式"><br>（目录及代码仅为实现，勿纠结格式和规范问题/捂脸）</p>
<h4 id="easyExcel依赖"><a href="#easyExcel依赖" class="headerlink" title="easyExcel依赖"></a>easyExcel依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> easyexceldemo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.EasyExcel;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.support.ExcelTypeEnum;</span><br><span class="line"><span class="keyword">import</span> easyexceldemo.dto.BizMergeStrategy;</span><br><span class="line"><span class="keyword">import</span> easyexceldemo.dto.RowRangeDto;</span><br><span class="line"><span class="keyword">import</span> easyexceldemo.dto.TitleSheetWriteHandler;</span><br><span class="line"><span class="keyword">import</span> easyexceldemo.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 该类的描述</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/23 11:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EasyExcelController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/excel&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excel</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Map&lt;String, List&lt;RowRangeDto&gt;&gt; strategyMap = BizMergeStrategy.addAnnualMerStrategy(data());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">            String filename = URLEncoder.encode(<span class="string">&quot;用户表测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + filename + <span class="string">&quot;.xlsx&quot;</span>);</span><br><span class="line"></span><br><span class="line">            EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                    .excelType(ExcelTypeEnum.XLSX).head(User.class)</span><br><span class="line">                    .registerWriteHandler(<span class="keyword">new</span> TitleSheetWriteHandler(<span class="string">&quot;我是一个小标题&quot;</span>,<span class="number">2</span>)) <span class="comment">// 标题及样式，lastCol为标题第0列到底lastCol列的宽度</span></span><br><span class="line">                    <span class="comment">//设置默认样式及写入头信息开始的行数</span></span><br><span class="line">                    .relativeHeadRowIndex(<span class="number">1</span>)</span><br><span class="line">                    .registerWriteHandler(<span class="keyword">new</span> BizMergeStrategy(strategyMap))    <span class="comment">// 注册合并策略</span></span><br><span class="line">                    .registerWriteHandler(BizMergeStrategy.CellStyleStrategy()) <span class="comment">// 设置样式</span></span><br><span class="line">                    .sheet(<span class="string">&quot;测试&quot;</span>)</span><br><span class="line">                    .doWrite(data());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            response.reset();</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            response.getWriter().println(<span class="string">&quot;打印失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;User&gt; <span class="title">data</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;总裁&quot;</span>);</span><br><span class="line">        User user1 = <span class="keyword">new</span> User(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;总经理&quot;</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;技术员&quot;</span>);</span><br><span class="line">        User user3 = <span class="keyword">new</span> User(<span class="string">&quot;4&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;技术员&quot;</span>);</span><br><span class="line"></span><br><span class="line">        list.add(user);</span><br><span class="line">        list.add(user1);</span><br><span class="line">        list.add(user2);</span><br><span class="line">        list.add(user3);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> easyexceldemo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.ExcelProperty;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.write.style.ColumnWidth;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 该类的描述</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/23 11:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ColumnWidth(10)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &#123;&quot;id&quot;&#125;, index = 0)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnWidth(20)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &#123;&quot;名字&quot;&#125;, index = 1)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnWidth(20)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &#123;&quot;职位&quot;&#125;, index = 2)</span></span><br><span class="line">    <span class="keyword">private</span> String postion; <span class="comment">//职位</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String id,String name,String postion)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.postion = postion;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPostion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> postion;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPostion</span><span class="params">(String postion)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.postion = postion;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="策略及其他"><a href="#策略及其他" class="headerlink" title="策略及其他"></a>策略及其他</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> easyexceldemo.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.metadata.Head;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.merge.AbstractMergeStrategy;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.metadata.style.WriteCellStyle;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.metadata.style.WriteFont;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.style.HorizontalCellStyleStrategy;</span><br><span class="line"><span class="keyword">import</span> easyexceldemo.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.util.CellRangeAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 合并策略和样式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/20 17:24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BizMergeStrategy</span> <span class="keyword">extends</span> <span class="title">AbstractMergeStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, List&lt;RowRangeDto&gt;&gt; strategyMap;</span><br><span class="line">    <span class="keyword">private</span> Sheet sheet;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BizMergeStrategy</span><span class="params">(Map&lt;String, List&lt;RowRangeDto&gt;&gt; strategyMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategyMap = strategyMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Sheet sheet, Cell cell, Head head, Integer integer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sheet = sheet;</span><br><span class="line">        <span class="comment">//如果没有标题，只有表头的话，这里的 cell.getRowIndex() == 1</span></span><br><span class="line">        <span class="keyword">if</span> (cell.getRowIndex() == <span class="number">2</span> &amp;&amp; cell.getColumnIndex() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 保证每个cell被合并一次，如果不加上面的判断，因为是一个cell一个cell操作的，</span></span><br><span class="line"><span class="comment">             * 例如合并A2:A3,当cell为A2时，合并A2,A3，但是当cell为A3时，又是合并A2,A3，</span></span><br><span class="line"><span class="comment">             * 但此时A2,A3已经是合并的单元格了</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, List&lt;RowRangeDto&gt;&gt; entry : strategyMap.entrySet()) &#123;</span><br><span class="line">                Integer columnIndex = Integer.valueOf(entry.getKey());</span><br><span class="line">                entry.getValue().forEach(rowRange -&gt; &#123;</span><br><span class="line">                    <span class="comment">//添加一个合并请求</span></span><br><span class="line">                    sheet.addMergedRegionUnsafe(<span class="keyword">new</span> CellRangeAddress(rowRange.getStart(),</span><br><span class="line">                            rowRange.getEnd(), columnIndex, columnIndex));</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, List&lt;RowRangeDto&gt;&gt; addAnnualMerStrategy(List&lt;User&gt; projectDtoList) &#123;</span><br><span class="line">        Map&lt;String, List&lt;RowRangeDto&gt;&gt; strategyMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        User preUser = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; projectDtoList.size(); i++) &#123;</span><br><span class="line">            User curUser = projectDtoList.get(i);</span><br><span class="line">            <span class="comment">//如果名字一样，将名字合并（真正开发中一般不会通过名字这样字段，而是通过一些关联的唯一值，比如父id）</span></span><br><span class="line">            <span class="keyword">if</span> (preUser != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (curUser.getName() == preUser.getName())&#123;    <span class="comment">// 名字相同则合并第一列</span></span><br><span class="line"><span class="comment">//                    BizMergeStrategy.fillStrategyMap(strategyMap, &quot;0&quot;, i+1);</span></span><br><span class="line">                    <span class="comment">//如果没有标题，只有表头的话，这里为 BizMergeStrategy.fillStrategyMap(strategyMap, &quot;1&quot;, i);</span></span><br><span class="line">                    BizMergeStrategy.fillStrategyMap(strategyMap, <span class="string">&quot;1&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            preUser = curUser;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strategyMap;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: 新增或修改合并策略map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> strategyMap</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2020/11/17 17:32</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fillStrategyMap</span><span class="params">(Map&lt;String, List&lt;RowRangeDto&gt;&gt; strategyMap, String key, <span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        List&lt;RowRangeDto&gt; rowRangeDtoList = strategyMap.get(key) == <span class="keyword">null</span> ? <span class="keyword">new</span> ArrayList&lt;&gt;() : strategyMap.get(key);</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (RowRangeDto dto : rowRangeDtoList) &#123;</span><br><span class="line">            <span class="comment">//分段list中是否有end索引是上一行索引的，如果有，则索引+1</span></span><br><span class="line">            <span class="keyword">if</span> (dto.getEnd() == index) &#123;</span><br><span class="line">                dto.setEnd(index + <span class="number">1</span>);</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果没有，则新增分段</span></span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            rowRangeDtoList.add(<span class="keyword">new</span> RowRangeDto(index, index + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        strategyMap.put(key, rowRangeDtoList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: 表格样式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2020/11/20 9:40</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HorizontalCellStyleStrategy <span class="title">CellStyleStrategy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        WriteCellStyle headWriteCellStyle = <span class="keyword">new</span> WriteCellStyle();</span><br><span class="line">        <span class="comment">//设置背景颜色</span></span><br><span class="line">        headWriteCellStyle.setFillForegroundColor(IndexedColors.WHITE.getIndex());</span><br><span class="line">        <span class="comment">//设置头字体</span></span><br><span class="line">        WriteFont headWriteFont = <span class="keyword">new</span> WriteFont();</span><br><span class="line">        headWriteFont.setFontHeightInPoints((<span class="keyword">short</span>)<span class="number">13</span>);</span><br><span class="line">        headWriteFont.setBold(<span class="keyword">true</span>);</span><br><span class="line">        headWriteCellStyle.setWriteFont(headWriteFont);</span><br><span class="line">        <span class="comment">//设置头居中</span></span><br><span class="line">        headWriteCellStyle.setHorizontalAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">        <span class="comment">//内容策略</span></span><br><span class="line">        WriteCellStyle contentWriteCellStyle = <span class="keyword">new</span> WriteCellStyle();</span><br><span class="line">        <span class="comment">//设置 水平居中</span></span><br><span class="line">        contentWriteCellStyle.setHorizontalAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">        contentWriteCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class="line">        HorizontalCellStyleStrategy horizontalCellStyleStrategy = <span class="keyword">new</span> HorizontalCellStyleStrategy(headWriteCellStyle, contentWriteCellStyle);</span><br><span class="line">        <span class="keyword">return</span> horizontalCellStyleStrategy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> easyexceldemo.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RowRangeDto</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RowRangeDto</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStart</span><span class="params">(<span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnd</span><span class="params">(<span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> easyexceldemo.dto;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.handler.SheetWriteHandler;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.metadata.holder.WriteSheetHolder;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.metadata.holder.WriteWorkbookHolder;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.util.CellRangeAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TitleSheetWriteHandler</span> <span class="keyword">implements</span> <span class="title">SheetWriteHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> lastCol;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TitleSheetWriteHandler</span><span class="params">(String title,<span class="keyword">int</span> lastCol)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.lastCol = lastCol;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeSheetCreate</span><span class="params">(WriteWorkbookHolder writeWorkbookHolder, WriteSheetHolder writeSheetHolder)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterSheetCreate</span><span class="params">(WriteWorkbookHolder writeWorkbookHolder, WriteSheetHolder writeSheetHolder)</span> </span>&#123;</span><br><span class="line">        Workbook workbook = writeWorkbookHolder.getWorkbook();</span><br><span class="line">        Sheet sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//设置标题</span></span><br><span class="line">        Row row = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">        row.setHeight((<span class="keyword">short</span>) <span class="number">800</span>);</span><br><span class="line">        Cell cell = row.createCell(<span class="number">0</span>);</span><br><span class="line">        cell.setCellValue(title);</span><br><span class="line">        CellStyle cellStyle = workbook.createCellStyle();</span><br><span class="line">        cellStyle.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class="line">        cellStyle.setAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">        Font font = workbook.createFont();</span><br><span class="line">        font.setBold(<span class="keyword">true</span>);</span><br><span class="line">        font.setFontHeight((<span class="keyword">short</span>) <span class="number">400</span>);</span><br><span class="line">        cellStyle.setFont(font);</span><br><span class="line">        cell.setCellStyle(cellStyle);</span><br><span class="line">        sheet.addMergedRegionUnsafe(<span class="keyword">new</span> CellRangeAddress(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, lastCol));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里为该demo的全部代码，使用时新建一个项目，直接复制粘贴过去，运行即可。<br>借鉴了不少网上的资料，有部分内容本人还尚未搞明白，有不明白可以留言互相探讨。<br>借鉴连接：<br><a href="https://blog.csdn.net/qq_41514643/article/details/106993760">1、这老哥的文档帮了极大忙，感谢！/抱拳</a><br><a href="2%E3%80%81https://blog.csdn.net/Aeve_imp/article/details/104910080/">2、这老哥的文档也很详细</a><br><a href="https://www.yuque.com/easyexcel">3、语雀官网</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>easyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>情灭缘散</title>
    <url>/%E6%83%85%E7%81%AD%E7%BC%98%E6%95%A3/</url>
    <content><![CDATA[<blockquote>
<p>纪念那些神奇、摸不着头脑的岁月。</p>
</blockquote>
<a id="more"></a>

<p>时光漫步，足迹轻点</p>
<p>折翼天使，舞降尘世</p>
<p>世间纠缠，悲观离合</p>
<p>姻缘情愫，绕困于心</p>
<p>百年人生，梦过一场</p>
<p>只为一瞬</p>
<p>轮回百世，本以</p>
<p>看破红尘</p>
<p>却</p>
<p>复灭于情</p>
<p>夕阳西坠，昏黄天地</p>
<p>轻风吹拂，落花缤纷</p>
<p>笛声悠扬</p>
<p>只为 祭奠</p>
<p>那些曾经的</p>
<p>岁月</p>
<p>​                                ——2013.12.5 午</p>
<img src="/%E6%83%85%E7%81%AD%E7%BC%98%E6%95%A3/%E6%83%85%E7%81%AD%E7%BC%98%E6%95%A3.png" class="" title="This is an example image">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>诗</tag>
      </tags>
  </entry>
  <entry>
    <title>无题</title>
    <url>/%E6%97%A0%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>因为挑战，才有进步。加油，自己！</p>
</blockquote>
<a id="more"></a>

<p>看了两个多小时的技术课程，然而觉得专注的程度总是不够，也许是夏季的到来让我的心绪不免躁动，又或者是想到了今天下午咬着雪糕时经过了两个被父母抱在怀里的孩子的干巴巴目光，又或者是疑惑刚刚回来路上那坐在马路沿子的阿叔在想些什么，总之，脑子里飘忽更多的游离于技术之外的，于是，还是选择了顺从灵魂，由工作转向了更加纯粹的生活。</p>
<p>此刻，窗外继续下着雨，已经下了两个多小时了，但貌似没有为空气带来丝毫的一丝清凉，不过这淅沥沥的雨声为这夜色带来了更空灵的宁静，但此刻我更愿意戴上耳机，随机放一些自己喜欢的类型的音乐，说来也奇怪，身在北京，给我推荐的第一首竟是《兰州》，难道是在诱惑我去兰州看一看吗~</p>
<p>其实，在外面的时候时就多次有写东西的冲动，也在记事本上做过一些记录，但奈何一回到宿舍，当时的那种冲动或者说是心境便不复存在了，即便是看着之前的记录，提笔仍旧无从着落，这也是近几年来让我略微难受的一件事，总感觉自己失去了文字叙述的能力，想想自己曾经也是获得过省作文赛一等奖的人呀。不过，细究其中原因，还是有迹可循的，大学以前经常写作文，自己也偶尔有手写记录生活的习惯，然而，大学后，各种原因，动笔变得少了，然后，就出现了现在这样的局面，心中有话，却无从下笔表达。</p>
<p>近期个人的大事便是上周一入职了第二家公司，一切如同全新开始且具有挑战。</p>
<p>公司位于国贸附近，早上十点上班，自己基本七点半起床，八点出门，九点二十左右到公司。来北京快一年了，第一份工作的公司离住宿很近，不堵车的情况下半个钟之内就能到达，路上偶尔也挤，但也还能接受，虽也见识过西二旗早高峰的场景，但终究未曾亲历，因而对北漂的挤尚未有过深刻的印象，直到第一天来现在的公司上班的路上，才发现平日同事或者网友的描述并没有夸张一分一毫。自己坐的315路公交转10号线地铁，地铁倒也还可以接受，但是公交的挤那真是让人有点无奈。上公交之后几乎是只能一动不动，生怕碰着踩着了他人，也几次见识了车上乘客间因为拥挤而产生的口水摩擦，不过好的是，因为这一路走的是专有路线，即便早高峰，也并不是特别堵。</p>
<p>路上的奔波倒无关紧要，不足挂齿，项目上的事才是让自己觉得颇具挑战。入职第一天，公司给配了苹果系统的笔记本，下周也会配上额外的大屏显示器。上家公司的时候是用的个人的笔记本，然后公司每月补贴100元，我也曾幻想过拥有一个大屏的显示器来分屏办公，如今这一愿望将要实现，而且还是配的多数人所向往的苹果，想想心中还是有些许激动，这才是我事业路上最基本的标配吧。</p>
<p>公司对于项目的管理还有分工上更加的规范，管理的工具上也用了许多我未曾接触过的，目前而言，自己还是有点压力，不过幸好有个同事热情指点帮助。说来也惭愧，同事和我是同一年毕业的，目前也才工作一年，来公司也比我早了一个多月而已，但却发现和他还是有些差距，无论是对项目的理解上，亦或是在团队中的沟通交流上。</p>
<p>总而言之，需要学习的东西很多，在接下来的日子中，不惧挑战，每天进步，争取早点跟上组织的步伐与节奏，加油，小伙子！！</p>
<p>（行文至此，本以为能滔滔不绝，行云流水，但仍旧磕磕绊绊且抓不住自己要表达的重点，流水账的叙述也不尽人意，至此停笔，望这个能力今后也应当加强）</p>
<hr>
<p>附：</p>
<p>​    深切悼念二位国之栋梁，</p>
<p>​    袁老、吴院士，二位走好！</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>北漂</tag>
      </tags>
  </entry>
  <entry>
    <title>无论接下来如何，不要后悔今天的决定</title>
    <url>/%E6%97%A0%E8%AE%BA%E5%A6%82%E4%BD%95%EF%BC%8C%E4%B8%8D%E8%A6%81%E5%90%8E%E6%82%94%E4%BB%8A%E5%A4%A9%E7%9A%84%E5%86%B3%E5%AE%9A/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="652eec907d9121ec839723df4967bd614f984b65c30998b092e3fee85139ae2b">a756220a6413262c08d2e52bbc7378bf461d63a46ff4bc53720da8c2e41e55a9385c804cb2f3447cecf5b20b530fb73959be8b84a6e543422202c6dbc7509954ba2da1085e491fd2bb7fa5105db063f576f4d728154d02d1807354f5c091fe97bbf935dab67f4c75634c589c37c0dd5298f1d306739640e9e19addde182b873e5e9a621cff777f30eed37063ea82b39812cfcf38c5cc523bdc34467e1255be68767b8621b3fd2093d13a21e30e50a4372197d1d529eecd850ed4d65bb31183b97fb7df61bb2f2fa16a52a681faea72b465fbdf3076c1d261ca92d6ee0676c74de362b746d72b1fcb0b60d61532cbae4190d75f71f73a21deafec60b9d63fe31912b5d4a3088a6fe1211a67dc9b7a5e5f4153b91a833371dbed46066c35d12449f38ea1ca8552ab3741f8ca97d74732dc4546d4423bd3b4401e10d878f09f176daa0bef6fbbeee265fad7247021fa3dd319186da825103085fe9c3bed1e32018273235f5292eeddf6aaa5a149a84daeacaeb42e97b45f48b08d05998944cca03a788443f6ca47504c7c3161ede54fdaf1bc277dfc53f36911758d6d1ada3846038ca848aff2169591d26c52a8b49c1c9fcc28d2449220bcf1eb6696136406e33538c8da8737d8ac35365c86fbaeebe01b90fab53ceccda4da5b910514fbd70ee1bcaf38f9a37637b5fe25819c7d9656debad80ef24649175726f524e0f8e1b019c2ba4abc3810a897f42fea9a09156563e5f7868d96a43e27fd111767f14ec6cc886602a256edb31a4f6ceb9e0230c732e3bc34fa8da964201249e0450a0b12554a12829d797fa10e218bd8b37b385184aa43b767070ada29d0aa325a6fb8ec9c856155555104ce1fc5a85bce645b9309065f5e067c70c2ab1f72db076a407196876b48c517d828226363a4d53ab77d00f8509fc9fe11505f176ff6091e11bb4c4bdfe0710a2f2c021d5c17fe415dcdb67780851e314876b3e4419f0dc3216f9daeaf7741bfe2095f879729b449dd89f36db80d29f8cfe900b61ff959a3fa103ec983cdb74640525c4a5f7d58f696a412c6ca0ea6c804834f599b0bebbb398d7f4e96dcd8beee2d0add8dd20a278a3fd887af34a22d9f5189a7acccae682603a4f012bbe746ebfd80a0e8f47bc9b55b5ca68dd06338f18fb47a86f224e26a95ff3ae653f37811e5a0ea4f260b49e8885f4d7bc709b3e8d3aca109fcdf368b3a9d981221679f271fc06486c2be3b36ad100c22bf23e673aa50173750c9246d091dfea899235dfb1be759f90cd23c8e373bf1f0fa911f28acc0128dcac60f256d1d9f46752e91a4e7d88f4c162f57bfbec2f70f54b4385f16ef4de1abb8956a60210ac49bd0e1888fb9cda6bbb4929014a36cede83f00187590c9b8b1749aff49c3d41ff4c1a67d3c3cfa838d0eb439ae6eff50a84b662bc8a5dafa5955fabfbcf9acadb5ef1066cccffe55876ced8a8b9cb5546ba3091031733a870d0a9b42f62a8d3db7f72c964d5ac0a00c8c49e6cafc8f26779cc7d23986ddf4c70f3c17b00447c65fc6b75e5a9b7a8d17bba9220de06f63b8643303c84d7aff76bf6377707b4fa8a5264e59872774c0cc1e777a5e76bd5ec7741fdbbbc79a183befc6e4e4bdf80af08ab784870f1b28a76f090024b6246056fe8cefcea71fee5e7e5d39adb5192578623c773f38ac2f8f7c50b78f1c6efd6212d623090c49eaebb20502bff5c768707e4b857ba27490822941deb07a4dd0f731d7aaf08a5c696eb31a7784c6453108348e50048a707867e71f059364c4fb9afcecc80611524f265cc9a1e3f6bfc6fdf4a2c484589ad34809b0fc268a2a1ac9d5695ce1a10ac545a8f31595f3e4a6560445aa14575d5db950455d9e9702360e81cafcf6cd3fecb7b010e6d8deb876071479ea0ef8be64f5f618a5474165dc04a087289a0fe1ab80636c7f82b1b9f6585c06c0272a32c0543ad21f2ea9585ff6762fdf1521ad143b73f70f2a20dc8288ad4a81ef3b1b5160a0ce2a2c2415e9b3b55e5c820dda751f420f27351ee6bea7cae4446848115209256f15cde6b3ae5cbcd4083af674adb2ade54eca2cf5e67af6b2cc7b027875d64e9f4c395c68b70ac5fa18b219e85da92935fcc2ad88e554ca47a9335cfe01d519f0d91728ca7b5c7fdfec46f6e1faeab39821f0f02251fa56542c6d1b4e50e9b4900e8c3a5c600a8baf43bf5b3052b7fcad093d39ef6116cacbf8c8b7800c0b5e496fad6face1e747bf9c2f80aab9e57435714b8a591b196853cf5c4f275f50f08c6a33d773733504ea6ccd2a8649b7ded85b823e045ffbaade55b9b0c80ebc0806742a6377d73c789fbc823e17571da0a0fab84d3fbd9ed0a0c5589811902d3beb946fc00cf550c0635b86850319bd203dc7177e8eafaaef7670c46f9c5120afd7062be1fbfdcad35e465f6375b44928887392df1da73ac2489921f48c811c945bb954dd9b8dd5dac44598c780782f23d7b62b0a0917d769bf775f92cf2b485434dd4bc5b0a99d4a90663b7e9a432c29aa463bcc82304b47bb056bc0312d4a6f169d0b0daa30ed12e62ade87577bcd85efade93483ab0ccb3e3c73efa27fb48e84228ee13b08e47eab14d733a468068b82d371dde814239f6cb36ca3406cbd8ce0801f4df701311322ee08852c4619bec3b72cfd9b73f5098d7127b0af6975cd7296e236745fceaa63e88188a7a7109c172408046f0d8c13c34eb9b3e161ae1b08651977d7f93b633af0bc63e465755362060f8511f9f6dfaa8cb213fed8cf1cbf2fa1b9c252419130f94e9dbde8ebef39207c4a3dd2ec4ac984340450e2bba3888151826855e0679b6902303a2b65aa6fc4d71bad1d8426e57e5e05a3574be1a919ed76a28719864522f8160f53c9d13a752c54fec38524eac9386f84c278ae35a85e5ef53b78074b6672df5ec49b4adfce7809fdf18288c18c705a865a7adb3b3ed67662c2ab9739b34ae5d122ab42992f12e8975b23c9f70c1485f424c9d0d0d76e561ca40957666f8c7384727804d5122393b2d84cf415bf717f01909a5b7e28ec5281d2c9e91010a5758e4c6b43c2ce0c848281c718c1c8a738156f1ad12ab532336fa4f21767687e59a46861e94e465ed2d619e56d237d18d4b24b8a807cd975cca86e8606b910c868d7f7b47c9f53f8621e3cc132033b1ca45cf93edec043c11681778d227b46c6c45e0f70e69814f97ce5c23cbcf46c581a5c6916023d784ee4a7eeb4c95fbf58ccda6fca4c12349097c582bf6e12847ae90dda378f48c583e55292a2402f2860aca61d36f7f2846760f863f1a2742198cfc4a954cae85ccc368e088a1fd6b650c1558b190afd48b7162b8df22c928966001d12361d12e4e411297798108be86a15c2cf74c73225aede13f5428ddbb14cc2a662aa031efca24c1342f361667d1f7fd2bb5daaf1a325561f4ef207741a63c72eaef6d442a847a86f919a87cf0a618729aaa9921a82445df7b9282ee15c22f8edb91de105d6a7d5cba98e90d16c2b511563feec2218c7ed6758b5440ab55247fc783fd54bb531274c2ff9fa90dc7fbad0f78c1119d73ddb4ab8acfd16a8e446464464bf4c548b5dbe7d9af160567bfb8a7596bc880e0c9b6c9bfdb25fc108e56dcc5a32b3886223b47380eeaece3c2df9b68ad7258a99609ab9544241699d01826c97f4a3c49e1191352f78ad98390d8977f246ad4088848e0124517399158568cd24c0bc15627bdf4d74ad846bd8c0a5916aa90463b93561290ddfff14bc12d82ed35f1217e2712fa92b188a2f5018c889cb1aaf656fd2118fd2cad0f2369e78bbc1ed01efd88c87a7163bcbfa0d4046e5dc3c27d89f10271aaf074d656f64e1bbf74713758cbcd81ffb58e2cf20afa2efdb45d5b1d3f00a8934e7cdcb6e5227e128ddbc75d2e9f75bb23efe39d31300caabd3188bb8783f23742e12b30a70b11611c8a385b8d4463cce9471191338296e04de10f3a87bd2aa01a15687806918187110493cf179f09e35173d4711b44b476fdf642ebce69d56ef1b89c6e28f3bb7ea0e954a7b59653fb50969613e80c878ce6dc340a539b87244d139316036cac82b65b820b83a2b18fee0cfc569b88a4d72b691cac7ab6d220ecbda63e3443fa805b4cf554da8bca7d241a5f4857395bc36a890dc993ab7941cedb5534905a26fb84a30ff9a2c58ceabb6980fa6588b454a6b827f501604b395c6e4e582571ae66225fd594cc7cf25a4c85350a37787af370a18edd7097b669816395870f317d665fad2bfdc7436170a52c72b3431ae8caf93a52dfe4f50643954d25c1ba3820dea2d37193bbf9b346dc4c190ce5b3e3501ab1550288fef24cf38bd03d1f3d738e04cd2d06582414beda39bf8137287d476a0cde5b997e2b46118eeac0b062b11ba3f11a8c9f6f625f79ad65d4ae0b9203090f30db9cdd143f5c3eedb0506da084008919b686fcd9620cb3b7c025d7b73e1aa45a9b7444ceefa998a92676eb60b3fc6ea5103bc6e45a6446c87ff75aef32bd938ecef0461e6c247c16e4a8f261f527a2997591fa28490fbf5f14a7ee3d7c794981c03ea8e9a3c00d4f1d6f3f5150b5aab1c26b13b7abd329a7762dba18aaf09b3651e7a0984c754f7b640cf5c0cadb751de40425c92e6e029e8c71c6ba516a3dad9a3e00df11912aab6160f04be93c593410b1b6ae268138b1f00d22eb946fcf9b15eb422cbf0b8646685a417d63d5fce27ba18</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入阅读密码~</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>北漂</tag>
        <tag>辞职</tag>
      </tags>
  </entry>
  <entry>
    <title>查找算法</title>
    <url>/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="二分查找法（折半查找法）"><a href="#二分查找法（折半查找法）" class="headerlink" title="二分查找法（折半查找法）"></a>二分查找法（折半查找法）</h2><blockquote>
<p>数据是有序的。</p>
</blockquote>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span>: 二分查找算法，查到返回数据下标，查不到返回-1。 </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span> 吴焕业</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">int</span> high = arr.length - <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">           <span class="keyword">int</span> mid = (low + high)/<span class="number">2</span>;</span><br><span class="line">           <span class="keyword">if</span> (target &lt; arr[mid]) &#123;</span><br><span class="line">               high = mid - <span class="number">1</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &gt; arr[mid]) &#123;</span><br><span class="line">               low = mid + <span class="number">1</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> mid;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈ElasticSearch</title>
    <url>/%E6%B5%85%E8%B0%88ElasticSearch/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>Elaticsearch，简称为es， es是一个开源的<strong>高扩展</strong>的<strong>分布式全文检索引擎</strong>，它可以近乎<strong>实时的存储、检索数据</strong>；<strong>本身扩展性很好</strong>，可以扩展到上百台服务器，处理PB级别（大数据时代）的数据。es也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是<strong>通过简单的RESTfulAPI来隐藏Lucene的复杂性，从而让全文搜索变得简单</strong>。</p>
</blockquote>
<a id="more"></a>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>官网：<a href="https://www.elastic.co/">https://www.elastic.co/</a></p>
<p>下载地址：<a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目录结构</span></span><br><span class="line">bin 启动文件</span><br><span class="line">config 配置文件</span><br><span class="line">	log4j2 日志配置文件</span><br><span class="line">	jvm.options java 虚拟机相关的配置</span><br><span class="line">	elasticsearch.yml  elasticsearch 的配置文件！ 默认 9200 端口！ 跨域！</span><br><span class="line">lib   相关jar包</span><br><span class="line">logs   日志！</span><br><span class="line">modules 功能模块</span><br><span class="line">plugins 插件！</span><br></pre></td></tr></table></figure>

<h3 id="1-解压启动"><a href="#1-解压启动" class="headerlink" title="1.解压启动"></a>1.解压启动</h3><blockquote>
<p>windows 下进入bin目录，运行elasticsearch.bat,，访问127.0.0.1:9200</p>
</blockquote>
<img src="/%E6%B5%85%E8%B0%88ElasticSearch/9200.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\9200.png" alt="image-20210502183733343"></p>
<h3 id="2-安装可视化界面-es-head插件（要先装node-js）"><a href="#2-安装可视化界面-es-head插件（要先装node-js）" class="headerlink" title="2.安装可视化界面 es head插件（要先装node.js）"></a>2.安装可视化界面 es head插件（要先装node.js）</h3><ul>
<li><p>下载地址：<a href="https://github.com/mobz/elasticsearch-head/">https://github.com/mobz/elasticsearch-head/</a></p>
</li>
<li><p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install <span class="comment">#安装依赖</span></span><br><span class="line">npm run start <span class="comment">#正式启动</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>连接测试发现，存在跨域问题，配置es</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure>

<p>重启es服务器，然后再次连接</p>
<img src="/%E6%B5%85%E8%B0%88ElasticSearch/9100.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\9100.png" alt="image-20210502200832019"></p>
<p><strong>注意</strong>：存在<strong>跨域问题</strong>，解决方案：在elasticsearch.yml配置文件上添加</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解决跨域问题</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-Kinbanna"><a href="#3-Kinbanna" class="headerlink" title="3.Kinbanna"></a>3.Kinbanna</h3><blockquote>
<p>官网：<a href="https://www.elastic.co/cn/kibana">https://www.elastic.co/cn/kibana</a><br>Kibana 版本要和 Es 一致！</p>
</blockquote>
<h4 id="3-1-了解ELK"><a href="#3-1-了解ELK" class="headerlink" title="3.1 了解ELK"></a>3.1 了解ELK</h4><p>ELK是Elasticsearch、Logstash、Kibana三大开源框架首字母大写简称。市面上也被成为ElasticStack。其中Elasticsearch是一个基于Lucene、分布式、通过Restful方式进行交互的近实时搜索平台框架。像类似百度、谷歌这种大数据全文搜索引擎的场景都可以使用Elasticsearch作为底层支持框架，可见Elasticsearch提供的搜索能力确实强大,市面上很多时候我们简称Elasticsearch为es。Logstash是ELK的中央数据流引擎，用于从不同目标（文件/数据存储/MQ）收集的不同格式数据，经过过滤后支持输出到不同目的地（文件/MQ/redis/elasticsearch/kafka等）。<strong>Kibana可以将elasticsearch的数据通过友好的页面展示出来，提供实时分析的功能</strong>。<br>市面上很多开发只要提到ELK能够一致说出它是一个<strong>日志分析架构技术栈</strong>总称，但实际上ELK不仅仅适用于日志分析，它还可以支持其它任何数据分析和收集的场景，日志分析和收集只是更具有代表性。并非唯一性。</p>
<h4 id="3-2-了解Kibanna"><a href="#3-2-了解Kibanna" class="headerlink" title="3.2 了解Kibanna"></a>3.2 了解Kibanna</h4><p>Kibana是一个针对Elasticsearch的开源分析及可视化平台，用来搜索、查看交互存储在Elasticsearch索<br>引中的数据。使用Kibana，可以通过各种图表进行高级数据分析及展示。Kibana让海量数据更容易理<br>解。它操作简单，基于浏览器的用户界面可以快速创建仪表板（dashboard）实时显示Elasticsearch查<br>询动态。设置Kibana非常简单。无需编码或者额外的基础架构，几分钟内就可以完成Kibana安装并启动<br>Elasticsearch索引监测。</p>
<h4 id="3-3-安装启动"><a href="#3-3-安装启动" class="headerlink" title="3.3 安装启动"></a>3.3 安装启动</h4><p>官网下载，直接启动，访问localhost:5601即可</p>
<img src="/%E6%B5%85%E8%B0%88ElasticSearch/kibanna.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\kibanna.png" alt="image-20210502205110512"></p>
<p>使用kibanna的开发工具</p>
<img src="/%E6%B5%85%E8%B0%88ElasticSearch/kiabana%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\kiabana开发工具.png" alt="image-20210502211723241"></p>
<h4 id="3-4-汉化"><a href="#3-4-汉化" class="headerlink" title="3.4 汉化"></a>3.4 汉化</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在config.yml添加</span></span><br><span class="line"><span class="attr">i18n.locale:</span> <span class="string">&quot;zh-CN&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote>
<p>暂时将索引当做数据库来看待。索引 对应数据库，文档对应 库中的数据。<strong>面向文档，一切皆JSON</strong></p>
</blockquote>
<h3 id="1-新建索引概览"><a href="#1-新建索引概览" class="headerlink" title="1.新建索引概览"></a>1.新建索引概览</h3><img src="/%E6%B5%85%E8%B0%88ElasticSearch/%E7%B4%A2%E5%BC%95%E6%A6%82%E8%A7%88.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\索引概览.png" alt="image-20210502202031314"></p>
<h3 id="2-与数据库的映射关系"><a href="#2-与数据库的映射关系" class="headerlink" title="2.与数据库的映射关系"></a>2.与数据库的映射关系</h3><blockquote>
<p>elasticsearch(集群)中可以包含多个索引(数据库)，每个索引中可以包含多个类型(表)，每个类型下又包含多 个文档(行)，每个文档中又包含多个字段(列)。</p>
</blockquote>
<img src="/%E6%B5%85%E8%B0%88ElasticSearch/%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%AF%94%E8%BE%83.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\和数据库的比较.png" alt="image-20210502213357552"></p>
<h3 id="3-设计"><a href="#3-设计" class="headerlink" title="3. 设计"></a>3. 设计</h3><ul>
<li><p>物理设计</p>
<p>elasticsearch 在后台把每个索引划分成多个分片，每分分片可以在集群中的不同服务器间迁移一个人就是一个集群！默认的集群名称就是elaticsearh。</p>
</li>
<li><p>逻辑设计</p>
<p>一个索引类型中，包含多个文档，比如说文档1，文档2。 当我们索引一篇文档时，可以通过这样的一各顺序找到 它: 索引 ▷ 类型 ▷ 文档ID ，通过这个组合我们就能索引到某个具体的文档。 注意:ID不必是整数，实际上它是个字 符串。</p>
</li>
</ul>
<h3 id="4-倒排索引"><a href="#4-倒排索引" class="headerlink" title="4. 倒排索引"></a>4. 倒排索引</h3><p>elasticsearch使用的是一种称为<strong>倒排索引</strong>的结构，采用Lucene倒排索作为底层。这种结构<strong>适用于快速的全文搜索</strong>， 一个<strong>索引由文档中所有不重复的列表构成</strong>，对于每一个词，都有一个包含它的文档列表。</p>
<ul>
<li><p>例子</p>
<img src="/%E6%B5%85%E8%B0%88ElasticSearch/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\倒排索引.png" alt="image-20210502214814967"></p>
</li>
</ul>
<h3 id="5-安装ik分词插件"><a href="#5-安装ik分词插件" class="headerlink" title="5.安装ik分词插件"></a>5.安装ik分词插件</h3><blockquote>
<p>1、<a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a><br>2、下载完毕之后，放入到我们的elasticsearch 插件目录plugins下即可！(注：版本要和elasticsearch一致)</p>
</blockquote>
<p>ik提供了两个分词算法：</p>
<ul>
<li>ik_smart:最少切分</li>
<li>ik_max_word:最细粒度切分（穷尽词库的去划分）  字典</li>
</ul>
<h3 id="6-使用kibana测试分词效果"><a href="#6-使用kibana测试分词效果" class="headerlink" title="6. 使用kibana测试分词效果"></a>6. 使用kibana测试分词效果</h3><h4 id="6-1效果"><a href="#6-1效果" class="headerlink" title="6.1效果"></a>6.1效果</h4><ul>
<li><p><strong>ik_smart</strong>分词效果</p>
<img src="/%E6%B5%85%E8%B0%88ElasticSearch/ik_smart%E5%88%86%E8%AF%8D%E6%95%88%E6%9E%9C.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\ik_smart分词效果.png" alt="image-20210502233716287"></p>
</li>
<li><p><strong>ik_max_word</strong> 分词效果</p>
<img src="/%E6%B5%85%E8%B0%88ElasticSearch/ik_max_word%E5%88%86%E8%AF%8D%E6%95%88%E6%9E%9C.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\ik_max_word分词效果.png" alt="image-20210502233830186"></p>
</li>
</ul>
<h4 id="6-2问题"><a href="#6-2问题" class="headerlink" title="6.2问题"></a>6.2问题</h4><p>有些字的组成不能被称之为词，比如人名（张三、千仞雪）等，但是我们希望它能当做词来处理，这个时候我们就需要将它放入我们的字典中。</p>
<h5 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h5><ul>
<li>新建自己的字典文件，my.dic</li>
<li>在my.dic 文件添加自己的分词，比如千仞雪</li>
<li>在IKAnalyzer.cfg.xml中添加自己的字典文件 my.dic到扩展字典中</li>
</ul>
<h2 id="Restful风格操作"><a href="#Restful风格操作" class="headerlink" title="Restful风格操作"></a>Restful风格操作</h2><img src="/%E6%B5%85%E8%B0%88ElasticSearch/rest%E9%A3%8E%E6%A0%BC.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\rest风格.png" alt="image-20210502235417964"></p>
<h2 id="SpingBoot整合ES-实战"><a href="#SpingBoot整合ES-实战" class="headerlink" title="SpingBoot整合ES(实战)"></a>SpingBoot整合ES(实战)</h2><blockquote>
<p>官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html</a></p>
</blockquote>
<h3 id="获得原生依赖"><a href="#获得原生依赖" class="headerlink" title="获得原生依赖"></a>获得原生依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><img src="/%E6%B5%85%E8%B0%88ElasticSearch/%E5%88%9D%E5%A7%8B%E5%8C%96.png" class="" title="This is an example image">

<p><img src="D:\hexo\blog\source_posts\浅谈ElasticSearch\初始化.png" alt="image-20210503114252881"></p>
<h3 id="熟悉一些API"><a href="#熟悉一些API" class="headerlink" title="熟悉一些API"></a>熟悉一些API</h3><p>restful风格</p>
<p>创建 put</p>
<p>编辑 post</p>
<p>查询 get    查询体query</p>
<p>分页 form size</p>
<p>…</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>结合着<strong>jsoup</strong>爬虫去使用</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>技术栈</tag>
        <tag>es</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈java8</title>
    <url>/%E6%B5%85%E8%B0%88java8/</url>
    <content><![CDATA[<blockquote>
<p>天上乌飞兔走，人间古往今来。万般回忆化尘埃，只有青山不改。</p>
</blockquote>
<a id="more"></a>

<h2 id="一、java历史及发展"><a href="#一、java历史及发展" class="headerlink" title="一、java历史及发展"></a>一、java历史及发展</h2><p>起源：</p>
<ul>
<li><p>1995年5月23日，Java语言正式诞生。</p>
</li>
<li><p>1996年1月，第一个JDK-JDK1.0诞生。</p>
<ul>
<li>Sun Classic VM（虚拟机）</li>
<li>Applet（java小应用程序）</li>
<li>AWT（java图形设计）</li>
</ul>
</li>
<li><p>1996年4月，10个最主要的操作系统供应商申明将在其产品中嵌入Java技术。</p>
</li>
<li><p>1996年9月，约8.3万个网页应用了Java技术来制作。</p>
</li>
<li><p>1997年2月18日，JDK1.1发布。　</p>
<ul>
<li>JAR（jar包）</li>
<li>JDBC(Java DataBase Connectivity)（连接数据库）</li>
<li>JavaBeans（java规范）</li>
<li>RMI（远程调用）</li>
<li>Inner Class（内部类）</li>
<li>Reflection（反射）</li>
</ul>
</li>
<li><p>1997年4月2日，JavaOne会议召开，参与者超过万人，创造当时全球同类会议规模之纪录。</p>
</li>
<li><p>1997年9月，JavaDeveloperConnection社区成员超过十万。</p>
</li>
<li><p>1998年2月，JDK1.1被下载超过2,000,000次。</p>
</li>
<li><p>1998年12月8，Java的企业平台Java EE正式发布。</p>
</li>
<li><p>1999年6月，Sun公司发布Java的三大版本：标准版（Java SE）、企业版（Java EE）、微型版（Java ME）。</p>
</li>
<li><p>2000年5月8日，JDK1.3发布。</p>
<ul>
<li>数学运算</li>
<li>Timer API（时间）</li>
<li>Java Sound API（声音）</li>
<li>CORBA IIOP实现RMI的通信协议</li>
<li>Java 2D新特性</li>
<li>jar文件索引</li>
</ul>
</li>
<li><p>2000年5月29日，JDK1.4发布。</p>
</li>
<li><p>2001年6月5日，NOKIA宣布，到2003年将出售1亿部支持Java的手机。</p>
</li>
<li><p>2001年9月24日，Java EE 1.3发布。</p>
</li>
<li><p>2002年2月26日，J2SE1.4发布，自此Java的计算能力有了大幅提升。</p>
</li>
<li><p>2004年9月30日，J2SE1.5发布，是Java语言发展史上的又一里程碑事件。为了表示这个版本的重要性，Java SE 1.5正式更名为Java SE 5.0。</p>
<ul>
<li>自动装箱拆箱 </li>
<li>泛型 </li>
<li>元数据</li>
<li>Introspector（内省）</li>
<li>enum（枚举）</li>
<li>静态引入</li>
<li>可变长参数（Varargs）</li>
<li>foreach（高级虚幻）</li>
<li>JMM（内存模型）</li>
<li>concurrent（并发包）</li>
</ul>
</li>
<li><p>2006年12月，Sun公司发布了JDK1.6（也被称为Java SE 6）。一直以来，Sun公司维持着大约2年发布一次JDK新版本的习惯。</p>
</li>
<li><p>2009年4月20日，Oracle宣布将以每股9.5美元的价格收购Sun，该交易的总价值约为74亿美元。但Oracle通过收购Sun公司获得了两项软件资产：Java和Solaris。2007年11月，Java语言作为服务器端编程语言，已经取得了极大地成功；而Android平台的流行，则让Java语言获得了在客户端程序上大展拳脚的机会。</p>
</li>
<li><p>2011年7月28日，Oracle公司发布了Java SE 7，这次版本升级经过了将近5年时间。Java SE 7也是Oracle发布的第一个Java版本，引入了二进制整数、支持字符串的switch语句、多异常捕捉、自动关闭资源的try语句等新特性。</p>
</li>
<li><p>2014年3月18日，Oracle公司发布了Java SE 8，这次版本升级为Java带来了全新的Lambda表达式。除此之外，Java 8还增加了大量新特性，这些新特性使得Java变得更加强大。</p>
<ul>
<li>Lambda表达式</li>
<li>函数式接口</li>
<li>方法引用和构造器调用</li>
<li>Stream API</li>
<li>接口中的默认方法和静态方法</li>
<li>新时间日期API</li>
</ul>
</li>
<li><p>…　　　　</p>
</li>
</ul>
<h2 id="二、Lambda表达式（来源于C-和Scala语言）"><a href="#二、Lambda表达式（来源于C-和Scala语言）" class="headerlink" title="二、Lambda表达式（来源于C#和Scala语言）"></a>二、Lambda表达式（来源于C#和Scala语言）</h2><h3 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h3><p>可以把Lambda表达式理解为简洁地表示可传递的匿名函数的一种方式：它没有名称，但它有参数列表、函数主体、返回类型，可能还有一个可以抛出的异常列表。</p>
<ul>
<li><p>匿名——我们说匿名，是因为它不像普通的方法那样有一个明确的名称：写得少而想得多！</p>
</li>
<li><p>函数——我们说它是函数，是因为Lambda函数不像方法那样属于某个特定的类。但和方法一样，Lambda有参数列表、函数主体、返回类型，还可能有可以抛出的异常列表。</p>
</li>
<li><p>传递——Lambda表达式可以作为参数传递给方法或存储在变量中。</p>
</li>
<li><p>简洁——无需像匿名类那样写很多模板代码。</p>
</li>
</ul>
<h3 id="2、组成"><a href="#2、组成" class="headerlink" title="2、组成"></a>2、组成</h3><ul>
<li>参数列表</li>
<li>箭头</li>
<li>Lambda主体</li>
</ul>
<h4 id="2-1-例子说明"><a href="#2-1-例子说明" class="headerlink" title="2.1 例子说明"></a>2.1 例子说明</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一个Lambda表达式具有一个String类型的参数并返回一个int。Lambda没有return语句，因为已经隐含了return</span></span><br><span class="line">(String s) -&gt; s.length() ;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 第二个Lambda表达式有一个Apple 类型的参数并返回一个boolean（苹果的重量是否超过150克）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">(Apple a) -&gt; a.getWeight() &gt; <span class="number">150</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 第三个Lambda表达式具有两个int类型的参数而没有返回值（void返回）。注意Lambda表达式可以包含多行语句，这里 *是两行.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">(<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; &#123; </span><br><span class="line"> System.out.println(<span class="string">&quot;Result:&quot;</span>); </span><br><span class="line"> System.out.println(x+y); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 第四个Lambda表达式没有参数，返回一个int</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">() -&gt; <span class="number">42</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 第五个Lambda表达式具有两个Apple类型的参数，返回一个int：比较两个Apple的重量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">(Apple a1, Apple a2) -&gt; a1.getWeight().compareTo(a2.getWeight());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解答</span></span><br><span class="line">答案：只有<span class="number">4</span>和<span class="number">5</span>是无效的Lambda。</span><br><span class="line">(<span class="number">1</span>) 这个Lambda没有参数，并返回<span class="keyword">void</span>。它类似于主体为空的方法：<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;&#125;。</span><br><span class="line">(<span class="number">2</span>) 这个Lambda没有参数，并返回String作为表达式。</span><br><span class="line">(<span class="number">3</span>) 这个Lambda没有参数，并返回String（利用显式返回语句）。</span><br><span class="line">(<span class="number">4</span>) <span class="keyword">return</span>是一个控制流语句。要使此Lambda有效，需要使花括号，如下所示：</span><br><span class="line">(Integer i) -&gt; &#123;<span class="keyword">return</span> <span class="string">&quot;Alan&quot;</span> + i;&#125;。</span><br><span class="line">(<span class="number">5</span>)“Iron Man”是一个表达式，不是一个语句。要使此Lambda有效，你可以去除花括号和分号，如下所示：(String s) -&gt; <span class="string">&quot;Iron Man&quot;</span>。或者如果你喜欢，可以使用显式返回语</span><br><span class="line">句，如下所示：(String s)-&gt;&#123;<span class="keyword">return</span> <span class="string">&quot;IronMan&quot;</span>;&#125;。</span><br></pre></td></tr></table></figure>



<h4 id="2-2-小试牛刀"><a href="#2-2-小试牛刀" class="headerlink" title="2.2 小试牛刀"></a>2.2 小试牛刀</h4><p>根据上述语法规则，以下哪个不是有效的Lambda表达式？</p>
<p>(1) () -&gt; {}</p>
<p>(2) () -&gt; “Raoul”</p>
<p>(3) () -&gt; {return “Mario”;}</p>
<p>(4) (Integer i) -&gt; return “Alan” + i;</p>
<p>(5) (String s) -&gt; {“IronMan”;}</p>
<h3 id="3-函数式接口"><a href="#3-函数式接口" class="headerlink" title="3.函数式接口"></a>3.函数式接口</h3><p>含义：接口中只有一个抽象方法。</p>
<p>Lambda表达式需要函数式接口的支持，可以通过在接口上方添加@FunctionInterface来判断接口是否是函数式接口。</p>
<p>jVM可以通过上下文推断出参数类型，“类型推断”。</p>
<img src="/%E6%B5%85%E8%B0%88java8/1.png" class="" title="This is an example image">

<h2 id="三、java8内置四大函数式接口"><a href="#三、java8内置四大函数式接口" class="headerlink" title="三、java8内置四大函数式接口"></a>三、java8内置四大函数式接口</h2><h3 id="1、Consumer-消费型接口"><a href="#1、Consumer-消费型接口" class="headerlink" title="1、Consumer:消费型接口"></a>1、Consumer<T>:消费型接口</h3><img src="/%E6%B5%85%E8%B0%88java8/2.png" class="" title="This is an example image">

<p>2、Supplier<T>:供给型接口</p>
<img src="/%E6%B5%85%E8%B0%88java8/3.png" class="" title="This is an example image">

<p>3、Function&lt;T,R&gt;:函数型接口</p>
<img src="/%E6%B5%85%E8%B0%88java8/4.png" class="" title="This is an example image">

<p>4、Predicate<T>:断言型接口</p>
<img src="/%E6%B5%85%E8%B0%88java8/5.png" class="" title="This is an example image">

<h2 id="四、Stream流"><a href="#四、Stream流" class="headerlink" title="四、Stream流"></a>四、Stream流</h2><h3 id="1、引入"><a href="#1、引入" class="headerlink" title="1、引入"></a>1、引入</h3><p>案例：实体Food,属性有热量值calories和食物名称name,现有一食物集合foodList,实现返回低热量的菜肴名称的，并按照卡路里排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传统实现（非java8）</span></span><br><span class="line">List&lt;Dish&gt; lowCaloricDishes = <span class="keyword">new</span> ArrayList&lt;&gt;(); </span><br><span class="line"><span class="keyword">for</span>(Dish d: foodList)&#123; </span><br><span class="line"> <span class="keyword">if</span>(d.getCalories() &lt; <span class="number">400</span>)&#123; </span><br><span class="line"> lowCaloricDishes.add(d); </span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br><span class="line">Collections.sort(lowCaloricDishes, <span class="keyword">new</span> Comparator&lt;Dish&gt;() &#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Dish d1, Dish d2)</span></span>&#123; </span><br><span class="line"> <span class="keyword">return</span> Integer.compare(d1.getCalories(), d2.getCalories()); </span><br><span class="line"> &#125; </span><br><span class="line">&#125;); </span><br><span class="line">List&lt;String&gt; lowCaloricDishesName = <span class="keyword">new</span> ArrayList&lt;&gt;(); </span><br><span class="line"><span class="keyword">for</span>(Dish d: lowCaloricDishes)&#123; </span><br><span class="line"> lowCaloricDishesName.add(d.getName()); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Java8实现</span></span><br><span class="line">List&lt;String&gt; lowCaloricDishesName = </span><br><span class="line">foodList.stream() </span><br><span class="line"> .filter(d -&gt; d.getCalories() &lt; <span class="number">400</span>) </span><br><span class="line"> .sorted(comparing(Dish::getCalories))</span><br><span class="line"> .map(Dish::getName) </span><br><span class="line"> .collect(toList());</span><br></pre></td></tr></table></figure>

<h3 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h3><ul>
<li>筛选（filter）、切片（limit）和匹配</li>
<li>流的扁平化flatMap</li>
<li>归约<ul>
<li>获取最值</li>
<li>求和</li>
</ul>
</li>
</ul>
<h3 id="3、查找与匹配"><a href="#3、查找与匹配" class="headerlink" title="3、查找与匹配"></a>3、查找与匹配</h3><img src="/%E6%B5%85%E8%B0%88java8/6.png" class="" title="This is an example image">

<h3 id="4、归约与收集"><a href="#4、归约与收集" class="headerlink" title="4、归约与收集"></a>4、归约与收集</h3><img src="/%E6%B5%85%E8%B0%88java8/7.png" class="" title="This is an example image">

<h2 id="四、Optional"><a href="#四、Optional" class="headerlink" title="四、Optional"></a>四、Optional</h2><img src="/%E6%B5%85%E8%B0%88java8/8.png" class="" title="This is an example image">





]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>海口夜景</title>
    <url>/%E6%B5%B7%E5%8F%A3%E5%A4%9C%E6%99%AF/</url>
    <content><![CDATA[<blockquote>
<p>家人拍的一些夜景，看着挺好看的</p>
</blockquote>
<a id="more"></a>

<img src="/%E6%B5%B7%E5%8F%A3%E5%A4%9C%E6%99%AF/(1).jpg" class="" title="This is an example image">



<img src="/%E6%B5%B7%E5%8F%A3%E5%A4%9C%E6%99%AF/(2).jpg" class="" title="This is an example image">



<img src="/%E6%B5%B7%E5%8F%A3%E5%A4%9C%E6%99%AF/(3).jpg" class="" title="This is an example image">



<img src="/%E6%B5%B7%E5%8F%A3%E5%A4%9C%E6%99%AF/(4).jpg" class="" title="This is an example image">



<img src="/%E6%B5%B7%E5%8F%A3%E5%A4%9C%E6%99%AF/(5).jpg" class="" title="This is an example image">



<img src="/%E6%B5%B7%E5%8F%A3%E5%A4%9C%E6%99%AF/(6).jpg" class="" title="This is an example image">



<img src="/%E6%B5%B7%E5%8F%A3%E5%A4%9C%E6%99%AF/(7).jpg" class="" title="This is an example image">



<img src="/%E6%B5%B7%E5%8F%A3%E5%A4%9C%E6%99%AF/(8).jpg" class="" title="This is an example image">



<img src="/%E6%B5%B7%E5%8F%A3%E5%A4%9C%E6%99%AF/(9).jpg" class="" title="This is an example image">



<img src="/%E6%B5%B7%E5%8F%A3%E5%A4%9C%E6%99%AF/(10).jpg" class="" title="This is an example image">



<img src="/%E6%B5%B7%E5%8F%A3%E5%A4%9C%E6%99%AF/(11).jpg" class="" title="This is an example image">



<img src="/%E6%B5%B7%E5%8F%A3%E5%A4%9C%E6%99%AF/(12).jpg" class="" title="This is an example image">



<img src="/%E6%B5%B7%E5%8F%A3%E5%A4%9C%E6%99%AF/(13).jpg" class="" title="This is an example image">



<img src="/%E6%B5%B7%E5%8F%A3%E5%A4%9C%E6%99%AF/(14).jpg" class="" title="This is an example image">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>满纸荒唐言</title>
    <url>/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/</url>
    <content><![CDATA[<blockquote>
<p>写一亩三分地，</p>
<p>写刹那所思，</p>
<p>写井底天空，</p>
<p>写胡言乱语，</p>
<a id="more"></a>

<p>写不知天高地厚，</p>
<p>写年少时的兵荒马乱，</p>
<p>亦写童言无忌海边漫步，</p>
<p>写夜幕沉睡万籁俱寂。</p>
</blockquote>
<img src="/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/%E8%BF%BD%E6%A2%A6.png" class="" title="This is an example image">

<img src="/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/%E9%81%AE%E5%A4%A9.png" class="" title="This is an example image">

<img src="/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/%E6%B1%9F%E6%B9%96.png" class="" title="This is an example image">

<img src="/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/%E6%97%A0%E4%BA%89.png" class="" title="This is an example image">

<img src="/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/%E6%95%99%E7%88%B6.png" class="" title="This is an example image">

<img src="/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/%E9%9D%99%E6%80%9D.png" class="" title="This is an example image">

<img src="/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/%E9%BE%99%E8%A1%8C%E5%A4%A9%E4%B8%8B1.png" class="" title="This is an example image">

<img src="/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/%E6%B8%85%E6%98%8E.png" class="" title="This is an example image">

<img src="/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/%E8%87%AA%E5%8F%A4%E7%BE%8E%E4%BA%BA%E5%A6%82%E5%90%8D%E5%B0%86.png" class="" title="This is an example image">

<img src="/%E6%BB%A1%E7%BA%B8%E8%8D%92%E5%94%90%E8%A8%80/%E4%BA%BA%E7%94%9F%E5%93%AA%E8%83%BD%E9%83%BD%E5%A6%82%E6%84%8F.png" class="" title="This is an example image">
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>字</tag>
      </tags>
  </entry>
  <entry>
    <title>漂一年</title>
    <url>/%E6%BC%82%E4%B8%80%E5%B9%B4/</url>
    <content><![CDATA[<blockquote>
<p>做个正能量的人，不要给他人带来负能。</p>
</blockquote>
<a id="more"></a>

<p>2021年7月10日 00点43分。</p>
<p>还记得是去年的七月四号进的京，那时正值北京疫情爆发，原计划是六月三十号入京，结果迫于疫情，拿了毕业证书后，在秦皇岛旅馆里待了四天，最后因为工作，没办法还是在人人惶恐的情况下坐上了开往北京的列车。清楚的记得，那天的列车上，整趟车估摸着不到二十人，就我坐的那节车厢加上我才仅有两人。</p>
<p>时间一晃，这都一年过去了，当时租的房子在8号那天也到期了，趁着明天周末，得搬家咯。</p>
<p>这个房子地处西三旗桥东上奥小区，小区环境还是很好的，只是房子很小，是合租房，一个屋里住了五户，我这间属于最小的一间，窗户朝向东南，按理说是可以看到广阔的天空和明媚的阳光的，无奈是窗户的对面又是一栋高楼，虽说并不是挨着的，但还是霸占了不小的视野和光照。没办法，这个地段，这个价钱，不能奢求太多，好的是距离我第一份工作距离很近且开往的车辆不少，每天的交通也很是方便。（房价1400，加上其他杂七杂八的费用，一个月下来差不多1600吧）。</p>
<p>身边的同事朋友都习惯把现在住的这个房子称之为“家”，比如“我要回家了”、“我在家”，他们都是这么说的，我一般都是以“宿舍”或者“屋”为称，其实并不是习惯成自然吧，而是刻意的去把它当成一个“宿舍”来看待，我不愿称之为“家”，原因有两方面，一是我不是很满意这个房子，另一个的话还是对于“家”这个概念的谨慎性与保守性或者说是较真性。</p>
<blockquote>
<p>我住在这里，但这并不是我的家，这里没有我的家人，它仅仅只是我一个容身的场所，当然，它也不会认为我是它的主人。</p>
</blockquote>
<p>明天搬家，搬到通州那边去。在自如租的房，两居室，和一朋友住，租金两千出头，没有去看房，直接通过视频看完就预订了，工作的强度已经让我没有力气去看那么多了，看到价钱合适，位置合适就直接预订了，通过视频，感觉挺不错，70平，两个熟识的人，下次回宿舍或者周末我可以放纵的接着奏乐接着舞，可以搞把吉他撸一撸，不用再顾忌那么多，哇想想还是爽歪歪的，但是一想到房租，哎，还是贵了些。</p>
<p>明天起床收拾行李，告别“小破屋（~~）”，不想叫搬家公司，太费钱了，距离远，太费钱了，今天首期交了一万多的房租，卡里又将归零了，难受。</p>
<p>睡觉，明天踏上新世界。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>北漂</tag>
        <tag>瞎扯</tag>
      </tags>
  </entry>
  <entry>
    <title>诗选</title>
    <url>/%E7%A9%86%E6%97%A6-%E8%AF%97%E9%80%89/</url>
    <content><![CDATA[<blockquote>
<p>穆旦（1918年4月5日—1977年2月26日），原名查良铮。</p>
</blockquote>
<a id="more"></a>

<h1 id="冥想"><a href="#冥想" class="headerlink" title="冥想"></a>冥想</h1><p><strong>1</strong></p>
<p>为什么万物之灵的我们，</p>
<p>遭遇还比不上一棵小树？</p>
<p>今天你摇摇它，优越地微笑，</p>
<p>明天就化为根下的泥土。</p>
<p>为什么由手写出的这些字，</p>
<p>竟比这只手更长久，健壮？</p>
<p>它们会把腐烂的手抛开，</p>
<p>而默默生存在一张破纸上。</p>
<p>因此，我傲然生活了几十年，</p>
<p>仿佛曾做着万物的导演，</p>
<p>实则在它们长久的秩序下</p>
<p>我只当一会小小的演员。</p>
<p><strong>2</strong></p>
<p>把生命的突泉捧在我手里，</p>
<p>我只觉得它来得新鲜，</p>
<p>是浓烈的酒，清新的泡沫，</p>
<p>注入我的奔波、劳作、冒险。</p>
<p>仿佛前人从未经临的园地</p>
<p>就要展现在我的面前。</p>
<p>但如今，突然面对着坟墓，</p>
<p>我冷眼向过去稍稍回顾，</p>
<p>只见它曲折灌溉的悲喜</p>
<p>都消失在一片亘古的荒漠，</p>
<p>这才知道我的全部努力</p>
<p>不过完成了普通的生活。</p>
<h1 id="智慧之歌"><a href="#智慧之歌" class="headerlink" title="智慧之歌"></a>智慧之歌</h1><p>我已走到了幻想底尽头，</p>
<p>这是一片落叶飘零的树林，</p>
<p>每一片叶子标记着一种欢喜，</p>
<p>现在都枯黄地堆积在内心。</p>
<p>有一种欢喜是青春的爱情，</p>
<p>那是遥远天边的灿烂的流星，</p>
<p>有的不知去向，永远消逝了，</p>
<p>有的落在脚前，冰冷而僵硬。</p>
<p>另一种欢喜是喧腾的友谊，</p>
<p>茂盛的花不知道还有秋季，</p>
<p>社会的格局代替了血的沸腾，</p>
<p>生活的冷风把热情铸为实际。</p>
<p>另一种欢喜是迷人的理想，</p>
<p>它使我在荆棘之途走得够远，</p>
<p>为理想而痛苦并不可怕，</p>
<p>可怕的是看它终于成笑谈。</p>
<p>只有痛苦还在，它是日常生活</p>
<p>每天在惩罚自己过去的傲慢，</p>
<p>那绚烂的天空都受到谴责，</p>
<p>还有什么彩色留在这片荒原？</p>
<p>但惟有一棵智慧之树不凋，</p>
<p>我知道它以我的苦汁为营养，</p>
<p>它的碧绿是对我无情的嘲弄，</p>
<p>我诅咒它每一片叶的滋长 。</p>
<blockquote>
<p>那天加班到深夜，打车回来路上，无意在推送中看到了穆旦的《冥想》，也不知是当时的何种契机，让我深深沦陷，反复阅读了几次，之后又查了他的其他诗，也百度了穆旦这位诗人，不查不知道，一查又给了我几个惊喜，也才发现自己以前片面了，只知道出现在教科书上的那几位我国现代诗人：冰心、徐志摩等人，竟然到现在才知道还有穆旦这么棒的一位诗人。<br>原来穆旦本名查良铮，是金庸老爷子的亲戚（金庸本名查良镛）。才刚刚看完了老爷子的《神雕侠侣》，竟让我又在不知情的情况下深陷其亲戚的诗，所以说，有时候，缘分妙不可言呀。</p>
</blockquote>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>诗</tag>
        <tag>摘抄</tag>
      </tags>
  </entry>
  <entry>
    <title>算法题</title>
    <url>/%E7%AE%97%E6%B3%95%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>记录一些遇到的算法。</p>
</blockquote>
<a id="more"></a>

<h3 id="题1"><a href="#题1" class="headerlink" title="题1"></a>题1</h3><p>小明去买评估，商店做活动，提供捆绑打包销售，例如每袋3个和每袋5个的形式出售。现小明只想购买n个苹果，同时想购买尽量少的袋数⽅便携带。如果不能购买恰好n个苹果，就不会购买（可返回-1），求解输出最少的袋数。（例如：18）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先通过列举法找到其中的规律</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZHYTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">1</span>;n &lt; <span class="number">100</span> ;n++)&#123;</span><br><span class="line">            System.out.println(n + <span class="string">&quot;==》&quot;</span> + bagCount(n));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bagCount</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">3</span> || n == <span class="number">4</span> || n == <span class="number">7</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">5</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> n / <span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 通过规律，我们得知从8及8以后的数字一定能够被3和5整分掉</span></span><br><span class="line">        <span class="keyword">int</span> a = n / <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> remain3 = n % <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">while</span> (remain3 % <span class="number">3</span> != <span class="number">0</span>)&#123;</span><br><span class="line">            a--;</span><br><span class="line">            remain3 += <span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a + remain3 / <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>经典排序算法</title>
    <url>/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>编程不只是一门技术，更是一门艺术。        ——雷军</p>
</blockquote>
<a id="more"></a>

<h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1.冒泡排序"></a>1.冒泡排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 1.冒泡排序</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(arr==<span class="keyword">null</span>||arr.length&lt;<span class="number">2</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ;j&lt;arr.length-i-<span class="number">1</span>;j++)&#123;</span><br><span class="line">               <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                   <span class="keyword">int</span> temp=arr[j];</span><br><span class="line">                   arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">                   arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式（一）</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>思想很重要！</p>
</blockquote>
<p>浅谈<strong>单例模式</strong>、<strong>代理模式</strong>、<strong>工厂模式</strong>。</p>
<a id="more"></a>

<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><blockquote>
<p>保证被创建一次，节省系统的开销。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 省略 get set</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalDataMgr</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> GlobalDataMgr MGR = <span class="keyword">new</span> GlobalDataMgr();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> String userName;</span><br><span class="line">	<span class="keyword">private</span> String passWord;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GlobalDataMgr <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> MGR;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><blockquote>
<p>就是相当于第三方，中介，比如在结婚中，我们关注的事只是结婚这一件事，但是结婚还有宴请宾客、组织会场、司仪主持等其他繁琐的事，这些事就可以交给婚介所处理，然后结婚的这个节点实际上婚介所是用我们的真实身份，也就是我们自己去完成的。所以这里的婚介所就相当于代理。（简而言之，使用代理就是为了帮我们做一些额外的事，我们只需要关注自己的事即可）</p>
<p><strong>注：代理 代理的是接口。</strong></p>
</blockquote>
<h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原始接口（真实角色，即我们）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">edit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">defaultMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是一个默认方法，实现接口时可重写，也可不重写&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 真实角色的实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoInterfaceImpl</span> <span class="keyword">implements</span> <span class="title">DemoInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">edit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;更新。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代理角色，在这里的作用相当于是加了一些 日志或者说是方法执行前的说明</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoInterfaceProxy</span> <span class="keyword">implements</span> <span class="title">DemoInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DemoInterfaceImpl demoInterface;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDemoInterface</span><span class="params">(DemoInterfaceImpl demoInterface)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == demoInterface)&#123;</span><br><span class="line">            demoInterface = <span class="keyword">new</span> DemoInterfaceImpl();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.demoInterface = demoInterface;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log();</span><br><span class="line">        demoInterface.add();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        demoInterface.del();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">edit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        demoInterface.edit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log();</span><br><span class="line">        demoInterface.query();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加日志功能&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//主类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DemoInterfaceImpl demoInterface = <span class="keyword">new</span> DemoInterfaceImpl();</span><br><span class="line">        DemoInterfaceProxy proxy =  <span class="keyword">new</span> DemoInterfaceProxy();</span><br><span class="line">        proxy.setDemoInterface(demoInterface);</span><br><span class="line">        proxy.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandle</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> DemoInterface demoInterface;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDemoInterface</span><span class="params">(DemoInterface demoInterface)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.demoInterface = demoInterface;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成得到代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),demoInterface.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理代理实例，并返回成功</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// 动态代理的本质，使用反射机制实现</span></span><br><span class="line">        before();</span><br><span class="line">        Object invoke = method.invoke(demoInterface, args);</span><br><span class="line">        after();</span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行前。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行后。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 真实角色</span></span><br><span class="line">        DemoInterface demoInterface = <span class="keyword">new</span> DemoInterfaceImpl();</span><br><span class="line">        <span class="comment">// 代理角色：无</span></span><br><span class="line">        ProxyInvocationHandle proxy = <span class="keyword">new</span> ProxyInvocationHandle();</span><br><span class="line">        <span class="comment">// 把真实角色赋给代理</span></span><br><span class="line">        proxy.setDemoInterface(demoInterface);</span><br><span class="line">        <span class="comment">// 获得代理角色</span></span><br><span class="line">        DemoInterface demoInterfaceProxy = (DemoInterface)proxy.getProxy();</span><br><span class="line">        <span class="comment">// 通过代理角色调用方法</span></span><br><span class="line">        demoInterfaceProxy.query();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><blockquote>
<p>工厂模式是我们最常用的实例化对象模式了，是用工厂方法代替new操作的一种模式。   ——百度百科</p>
<p>好处：<strong>解耦代码</strong>；给代码带来更好的一个<strong>可扩展性</strong>。</p>
</blockquote>
<h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标准规范类(AbstractProduct),用抽象类也行</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shoe</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">make</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两个实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SportsShoeImpl</span> <span class="keyword">implements</span> <span class="title">Shoe</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">make</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产运动鞋...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeisureShoeImpl</span> <span class="keyword">implements</span> <span class="title">Shoe</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">make</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生成休闲鞋。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>构造工厂</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShoeFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shoe <span class="title">makeShoe</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;sports&quot;</span>.equalsIgnoreCase(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SportsShoeImpl();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;leisure&quot;</span>.equalsIgnoreCase(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> LeisureShoe();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ShoeFactory shoeFactory = <span class="keyword">new</span> ShoeFactory();</span><br><span class="line">        <span class="comment">// 休闲鞋</span></span><br><span class="line">        LeisureShoe leisureShoe = (LeisureShoe) shoeFactory.makeShoe(<span class="string">&quot;leisure&quot;</span>);</span><br><span class="line">        <span class="comment">//运动鞋</span></span><br><span class="line">        Shoe sportsShoe = shoeFactory.makeShoe(<span class="string">&quot;sports&quot;</span>);</span><br><span class="line"></span><br><span class="line">        leisureShoe.make();</span><br><span class="line">        sportsShoe.make();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>诗选</title>
    <url>/%E8%AF%97%E9%80%89/</url>
    <content><![CDATA[<blockquote>
<p>闲暇之时读诗两首。</p>
</blockquote>
<a id="more"></a>

<h2 id="如果有来生"><a href="#如果有来生" class="headerlink" title="如果有来生"></a>如果有来生</h2><p>​                            <strong>——三毛</strong></p>
<p>如果有来生，要做一棵树，</p>
<p>站成永恒。</p>
<p>没有悲欢的姿势，</p>
<p>一半在尘土里安详，</p>
<p>一半在风里飞扬；</p>
<p>一半洒落荫凉，</p>
<p>一半沐浴阳光。</p>
<p>非常沉默、非常骄傲。</p>
<p>从不依靠、从不寻找。</p>
<p>如果有来生，要化成一阵风，</p>
<p>一瞬间也能成为永恒。</p>
<p>没有善感的情怀，</p>
<p>没有多情的眼睛。</p>
<p>一半在雨里洒脱，</p>
<p>一半在春光里旅行；</p>
<p>寂寞了，孤自去远行，</p>
<p>把淡淡的思念统带走，</p>
<p>从不思念、从不爱恋；</p>
<p>如果有来生，要做一只鸟，</p>
<p>飞越永恒，没有迷途的苦恼。</p>
<p>东方有火红的希望，南方有温暖的巢床，</p>
<p>向西逐退残阳，向北唤醒芬芳。</p>
<p>如果有来生，</p>
<p>希望每次相遇，</p>
<p>都能化为永恒。</p>
<h2 id="从前慢"><a href="#从前慢" class="headerlink" title="从前慢"></a>从前慢</h2><p>​                    <strong>——冰心</strong></p>
<p>记得早先少年时</p>
<p>大家诚诚恳恳</p>
<p>说一句 是一句　　</p>
<p>清早上火车站</p>
<p>长街黑暗无行人</p>
<p>卖豆浆的小店冒着热气</p>
<p>从前的日色变得慢</p>
<p>车，马，邮件都慢</p>
<p>一生只够爱一个人</p>
<p>从前的锁也好看</p>
<p>钥匙精美有样子</p>
<p>你锁了 人家就懂了</p>
<h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p>​                        <strong>——汪国真</strong></p>
<p>让我怎样感谢你</p>
<p>当我走向你的时候</p>
<p>我原想收获一缕春风</p>
<p>你却给了我整个春天</p>
<p>让我怎样感谢你</p>
<p>当我走向你的时候</p>
<p>我原想捧起一簇浪花</p>
<p>你却给了我整个海洋</p>
<p>让我怎样感谢你</p>
<p>当我走向你的时候</p>
<p>我原想撷取一枚红叶</p>
<p>你却给了我整个枫林</p>
<p>让我怎样感谢你</p>
<p>当我走向你的时候</p>
<p>我原想亲吻一朵雪花</p>
<p>你却给了我银色的世界</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>诗</tag>
        <tag>摘抄</tag>
      </tags>
  </entry>
  <entry>
    <title>读《神雕侠侣》</title>
    <url>/%E8%AF%BB%E7%A5%9E%E9%9B%95%E4%BE%A0%E4%BE%A3/</url>
    <content><![CDATA[<blockquote>
<p>问世间情为何物，直教人生死相许。</p>
</blockquote>
<a id="more"></a>

<p>百忙之际，前几天总算是完成了今年必读书单计划中一个自己早就应该完成了的愿望，完完整整读完了金老爷子著作之一——《神雕侠侣》。</p>
<p>如今说到金庸，脑海中浮现更多的是在家里的老房子里，坐在用竹子编织的沙发上，端着碗筷看着大头电视机播放的《天龙八部》、《神雕侠侣》或者是《倚天屠龙记》等其影视剧。当时年少，看的更多的是影视剧里的打斗场景，心驰向往那些让人忍不住模仿的武林绝技，对所谓的剧情情感几乎是从未关注过，也不曾知郭靖的为国为民、乔峰的行侠仗义、杨过小龙女的绝对痴情。</p>
<p>其实，年初整理书单的时候，并没有想到将金庸的武侠小说列入。而后来列入的原因是阅读其他刊物的过程中，无意看到了对金庸老爷子的介绍，那一刹那，宛若遗漏一件很重要的事，怎么说目前为止也是阅读过国内的一些知名著作，但是竟然把金庸老爷子的江湖世界给忘记了？于是赶紧在手机上做了记录，防止明天一觉醒来忘记了。有些遗憾未曾早点阅读，同时也庆幸现在还阅读应该也不算太晚，再过几年，怕是心境又再变，再提不起阅读武侠小说的兴趣。</p>
<p>在金庸众多书籍中选择《神雕侠侣》作为第一本读物，其主要原因还是始于对李若彤版和刘亦菲版小龙女在屏幕上惊为天人的容颜和气质。</p>
<p>初始阅读的过程中，书中的情节与自己脑海中的依稀记得的影视场景缓缓重合，而后，这种重合又慢慢散开，直至最后彻底消散，醒悟过来才发现，原来自己脑海中已经构建了一个新神雕侠侣的江湖，在我的江湖里，所有的角色形象都由我因阅读感受而创建，故事的每一帧后面也按照我的想法去拼接串联。我想，这也许是阅读文字的魅力所在，在阅读的过程中，因为每个人的不同，导致的结果是虽为读同一本书，然感受却是千千万万种，而当你要向对方展现你阅读后看到的世界，又发现这并不是一件轻易的事，因为很多时候你所看到的世界只能意会不能言传，即便真的能够言传，却又发现对方无法理解你的世界。而影视剧展现出来的是导演或者演员个体对于角色的理解，由于影视画面的真实呈现性，观众在观影过程中，感受更多的其实是他人对角色的理解，而非自己的理解。所以影视给观众的对于人物的感受往往是一样的。</p>
<p>说回书中，阅读前期关注的角色还是李莫愁多些。江湖人称赤练仙子，无人不知无人不晓，作为小龙女的师姐，她同样拥有绝美的容颜与高强的武艺。但她豆蔻年华，被情所伤，浪迹江湖杀人遍地，世上人又之称“女魔头”，最终绝情谷一句“问世间情为何物，直教人生死相许”于火焰焚烧中离开这个让她又爱又恨的江湖。我想，生命的最后一刻，她脑海中流转的画面的应该是花季时与情人的种种，生命的凋零于她而言何尝不是一种解脱。</p>
<blockquote>
<p>终南山下，活死人墓，神雕侠侣，绝迹江湖。</p>
</blockquote>
<p>随着阅读的深入，作为书中主角的杨龙二人情感经历，注定是要扣住读者的心。杨过自幼丧父丧母，一人流浪，性格偏激，却也聪明机敏。儿时偶然情况下，认了西毒欧阳锋作义父。被郭靖黄蓉夫妇认出是故人之子后带回黄花岛生活，后来被送往全真教学艺，因性格原因离开全真教后认小龙女为姑姑并成为了其弟子。二人与在古墓中生活多年，后来相恋，情感历程跌宕起伏。绝情谷一役后，小龙女知杨过情花毒可医治，因自己生命无多，担心自己死后杨过不会独活，故留下“十六年后,在此相会,夫妻情深,勿失信约”十六字后离去。苦等十六年，庆幸小龙女还在世，杨过终得与爱人厮守，从此，终南山下，活死人墓，神雕侠侣，绝迹江湖。</p>
<p>杨龙二人师徒之情转变为男女之情，这在当时是不被承认的，纵然是处处呵护杨过的郭靖也强烈反对。然而，这些反对诋毁的声音未能阻止二人，反倒让他们的情谊变得更坚定，他们的感情赤城，无惧天地，始终如一，纵然人人反对，也要在一起，更恨不得江湖人人尽知。</p>
<img src="/%E8%AF%BB%E7%A5%9E%E9%9B%95%E4%BE%A0%E4%BE%A3/%E6%9D%A8%E8%BF%87%E5%B0%8F%E9%BE%99%E5%A5%B3.jpg" class="" title="This is an example image">

<p>一文终了，为杨龙二人有情人终成眷属而松了口气，但当最后一字看完时，心中想的更多的并不是这终成眷属的二人，而是望着这二人离去的郭襄。</p>
<blockquote>
<p>风陵渡口初相遇</p>
<p>一见杨过误终生</p>
<p>数十余载苦追寻</p>
<p>不曾再遇创峨眉</p>
</blockquote>
<p>郭襄，郭靖黄蓉的二女儿，出生于混乱中，被杨过李莫愁抚养过一阵子。十六年后，长大成人，性格乖巧伶俐、善良、好结交江湖英雄人士，人称“小东邪”（其外公为黄药师，人称“东邪”）。听闻神雕大侠事迹，于风陵渡口与杨过初相遇。杨过赠其三枚金针，承诺其三个愿望。第一和第二个愿望使用在她与杨过分离当天，第一个愿望为一睹杨过真容，第二个愿望是让杨过前来参加其生日，第三个愿望是看见杨过跳下绝情谷时也毫不犹豫跟随跳下去，并让杨过承诺如果没有找到小龙女也不能轻生。</p>
<p>看完书后，郭襄这个角色久久萦绕于脑海中，为她可惜，为她感叹，于是又去看了《神雕侠侣古天乐版》电视剧，从郭襄出现的集数开始看起。这一版的郭襄虽与我阅读中构建的外在形象稍有出入，但是不得不说，演的很好，加之配音（国语版）也很棒，整场看下来，没有丝毫的违和感，算是把书中的角色塑造成功了，最后她一句“问世间情为何物，直教人生死相许”更是让神雕故事彻底完结。看完影视后，还是觉得不过瘾，又去百度了这个角色，才知道原来她一生追寻杨过未果，四十岁时创建了倚天屠龙记里的峨眉派，终生未嫁，她的倾慕者张三丰一生未娶。“情”之一字，让人唏嘘感慨。</p>
<img src="/%E8%AF%BB%E7%A5%9E%E9%9B%95%E4%BE%A0%E4%BE%A3/%E9%83%AD%E8%A5%84.jpg" class="" title="This is an example image">

<p>神雕的故事到此结束了，在接下来的时光里，尚未决定何时阅读它的上篇《射雕英雄传》和下篇《倚天屠龙记》，想来应该也是能在今年读完。儿时的武侠梦，随着时间的流逝，逐渐消散，难再被忆起，希望在后面的书籍中，能寻回更多童年时的一份感动。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 附</span></span><br><span class="line"><span class="attr">神雕侠侣主要角色：</span></span><br><span class="line"><span class="meta">1、杨过</span> <span class="string">小龙女</span></span><br><span class="line"><span class="meta">2、郭靖</span> <span class="string">黄蓉 郭芙 郭襄 郭破虏 耶律齐</span></span><br><span class="line"><span class="attr">3、李莫愁</span></span><br><span class="line"><span class="meta">4、程英</span> <span class="string">完颜萍 陆无双 公孙绿萼</span></span><br><span class="line"><span class="meta">5、东邪西毒南帝北丐中神通：东邪黄药师</span> <span class="string">西毒欧阳锋 南帝段王爷（一灯大师） 北丐洪七公 中神通王重阳</span></span><br><span class="line"><span class="meta">6、东邪西狂南僧北侠中顽童：东邪黄药师</span> <span class="string">西狂杨过 南僧段王爷（一灯大师） 北侠郭靖 中顽童周伯通</span></span><br><span class="line"><span class="meta">7、金轮法王</span> <span class="string">巴尔达 霍都</span></span><br><span class="line"><span class="attr">。。。</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>北漂</tag>
        <tag>阅读</tag>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>远方是远方</title>
    <url>/%E8%BF%9C%E6%96%B9%E6%98%AF%E8%BF%9C%E6%96%B9/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="387abd1571b8e25f5008372fcab9111b4b08ce4cd6e929805628a004b388844c">a756220a6413262c08d2e52bbc7378bf28a3744c399128be47dd172f72f7395c5a0a8e6336eb179a9582458587948fcfb95fc27c2ac1311e99e3baebadd14e51908c3319c634732e3cccd83c7a9522f2b1d61e4d04bba1ea6a743ac128208bbaaa599b40f39137ba8423e68d51d6d7418e61c99062029c8cf770a7905fc2a85236cca39de229f05d4b435ecee762b86d8fbe7ad8cb914cf62b35ee55f295dae0c03855b9c83f3891cbe8f3e15944fc8050aa1b3fc831b4a0dbc8333171c15b8c5adc72b540b344554b0ded62fbf7228310ecc981aacc6ca7e47c100d4bce7f97ed20aa829efd44aa5e421ea1bc846738fb7a01cd103e1e251dc125bb134f927c94a63ba5d1f6ce3e77c8b5a7103b54078cef242a84359ef2b55ce1f6ce0dc39005471ae5ae9ad35447553d59d76edb20428f2cfa2b6577134f53e2e14aa6c45a8348ac9717f047f982a3df691c7d5c459c1ba7cc06596e8573bb88d3f2e5233d1dcdecfe347c624717506b7da1dd1d82297638322ebd37dccc798d16dee8e4f3</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>远方</title>
    <url>/%E8%BF%9C%E6%96%B9/</url>
    <content><![CDATA[<blockquote>
<p>人生天地间，忽如远行客。</p>
</blockquote>
<a id="more"></a>

<img src="/%E8%BF%9C%E6%96%B9/%E6%B8%A1%E5%B7%B1.png" class="" title="渡己">



<img src="/%E8%BF%9C%E6%96%B9/%E6%82%9F%E7%A9%BA.png" class="" title="This is an example image">

<img src="/%E8%BF%9C%E6%96%B9/%E4%B8%80%E7%94%9F.png" class="" title="This is an example image">

<img src="/%E8%BF%9C%E6%96%B9/%E8%BF%9C%E6%96%B9.png" class="" title="This is an example image">

<img src="/%E8%BF%9C%E6%96%B9/%E8%87%AA%E7%94%B1.png" class="" title="This is an example image">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>字</tag>
        <tag>满纸荒唐言</tag>
      </tags>
  </entry>
  <entry>
    <title>风拂过，你的气息犹存</title>
    <url>/%E9%A3%8E%E6%8B%82%E8%BF%87%EF%BC%8C%E4%BD%A0%E7%9A%84%E6%B0%94%E6%81%AF%E4%BB%8D%E5%AD%98/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="130344f4c958fb0917f98f59bd2b3c59024b383ec97b74b666d594bb4deba00f"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>回忆录</tag>
        <tag>青春</tag>
        <tag>校园</tag>
      </tags>
  </entry>
  <entry>
    <title>2018.08.15 | 随笔重录</title>
    <url>/yq/2018.08.15%20!%20%E9%9A%8F%E7%AC%94%E9%87%8D%E5%BD%95/</url>
    <content><![CDATA[<p>行尸走肉的躯壳，麻木的情感，再难激起波澜的心灵，竟也要不时为生活露出讨好般的笑容。<br>光阴一点点流逝，日子仍旧一天天过。童稚的挥手告别，思想愈渐的成熟，回头一望，好多事已然改变。不再痴迷那些年球场的奔驰，不再热衷挥洒热血的动漫，亦不愿再和人提起曾扬言走四方的梦。<br>是成长带来了身体的疲倦，还是生活带来了灵魂的低迷？<br>月色柔美，晚风轻拂，波光摇曳，脚下大道依旧。<br>2018.8.15<br>月色正美<br><img src="https://cdn.nlark.com/yuque/0/2023/webp/22422342/1676212585817-3c4f8b8a-693e-4e41-b269-79fbe5116f83.webp#averageHue=%235a6071&clientId=u23561c8a-1b78-4&from=paste&id=ud3d0b50a&originHeight=720&originWidth=720&originalType=url%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&status=done&style=none&taskId=u574c473e-76af-4493-9257-619fd0e8540&title="></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>2013.12.05 | 情灭缘散</title>
    <url>/yq/2013.12.05%20!%20%E6%83%85%E7%81%AD%E7%BC%98%E6%95%A3/</url>
    <content><![CDATA[<blockquote>
<p>纪念那些摸不着头脑的岁月</p>
</blockquote>
<p>时光漫步，足迹轻点<br>折翼天使，舞降尘世<br>世间纠缠，悲观离合<br>姻缘情愫，绕困于心<br>百年人生，梦过一场<br>只为一瞬<br>轮回百世，本以<br>看破红尘<br>却<br>复灭于情<br>夕阳西坠，昏黄天地<br>轻风吹拂，落花缤纷<br>笛声悠扬<br>只为 祭奠<br>那些曾经的<br>岁月</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/webp/22422342/1676212256661-533b71cd-3d23-49c2-8f17-4b7458d922b5.webp#averageHue=%23958d81&clientId=u5c966e83-ca34-4&from=paste&id=u3e84af53&originHeight=1600&originWidth=1200&originalType=url%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&status=done&style=none&taskId=ua6dfceed-624f-48e5-acd3-ba3da76a703&title="></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>2019.03.16 | 记梦 + 每日一字</title>
    <url>/yq/2019.03.16%20!%20%E8%AE%B0%E6%A2%A6%20+%20%E6%AF%8F%E6%97%A5%E4%B8%80%E5%AD%97/</url>
    <content><![CDATA[<p>嘭~高高的天空，我坠落了下来，砸到无人的大海上，激起了大片的浪花，然后慢慢下沉，海水的深处，一个个记忆从脑海中逸散，在水中结成了一个个晶莹透明的气泡，画面在在气泡中流转。接着，气泡记忆结霜了，又结成了冰泡，画面不动了，最后接连咔嚓，全部破碎了，成为了冰晶，重新没入了海水。海水依旧湛蓝如初，我仍旧躺在海里沉眠，梦醒了。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/webp/22422342/1676212435585-6647363c-3361-4526-ac2a-924e13ba8368.webp#averageHue=%23909a91&clientId=ucbf65e53-f801-4&from=paste&id=u9289847c&originHeight=1600&originWidth=1200&originalType=url%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&status=done&style=none&taskId=u57d12a89-d3f2-4f0b-a18b-36c682eb1d2&title="></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>2019.03.15 | 每日一练字</title>
    <url>/yq/2019.03.15%20!%20%E6%AF%8F%E6%97%A5%E4%B8%80%E7%BB%83%E5%AD%97/</url>
    <content><![CDATA[<blockquote>
<p>从简书迁移过来</p>
</blockquote>
<p>打卡练字的第十九天。<br>一晃都开学十九天了，这段时间，唯一坚持下来的就是每天写字了。<br>每年快春节的时候，家里要么买对联要么给人家帮忙写。奶奶这时总会说:家里那么多个大学生，都没一个能够写对联的，还要让人家帮忙写，讲出去人家都要笑话了。<br>所以，无论如何，今年自己一定要努力练字，争取春节前有能力给家里写对联，为自己争口气也让奶奶满意。加油！<br><img src="https://cdn.nlark.com/yuque/0/2023/webp/22422342/1676212516416-62adee18-b981-409b-9547-05171b0bb959.webp#averageHue=%238e9088&clientId=u4035387f-42ec-4&from=paste&id=u82803d71&originHeight=1600&originWidth=1200&originalType=url%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&status=done&style=none&taskId=u8c16d65a-63e4-4db8-aa57-730d4418fd3&title="></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>2019.02.10 | 我触手可及的远方，是一群人筹备了三年的梦</title>
    <url>/yq/2019.02.10%20!%20%E6%88%91%E8%A7%A6%E6%89%8B%E5%8F%AF%E5%8F%8A%E7%9A%84%E8%BF%9C%E6%96%B9%EF%BC%8C%E6%98%AF%E4%B8%80%E7%BE%A4%E4%BA%BA%E7%AD%B9%E5%A4%87%E4%BA%86%E4%B8%89%E5%B9%B4%E7%9A%84%E6%A2%A6/</url>
    <content><![CDATA[<blockquote>
<p>从简书迁移过来</p>
</blockquote>
<p>《朗读者》开播后，在朋友圈经常看到有朋友分享其中的一些精彩片段，尤其是袁泉受邀来的那一期，更是不时在各大平台上有看见其影子，为此，我也特地去看了那一期。在节目中，两个气质女神的对话让人感动。袁泉曾对董卿说过一句话，让董卿泪目：你在路上随便碰到一个路人，都是别人做梦都想见到的人。当时自己也深受感动，是呀，谁又不曾是谁的孩子，又不曾是谁的情人，又不曾是谁的父亲母亲呢？<br><img src="https://cdn.nlark.com/yuque/0/2023/webp/22422342/1676212668973-fc707724-17fe-4b24-916d-05e9800a578f.webp#averageHue=%23165aab&clientId=u299fc525-f248-4&from=paste&id=ua6dca1eb&originHeight=1024&originWidth=1024&originalType=url%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&status=done&style=none&taskId=ud265c433-bdf2-4c5d-bfad-44e5dfc7fb3&title="><br>图片发自简书 App<br>昨天，去朋友家里吃饭，他老爸也在饭桌上。他老爸是一个很平易近人的叔叔，按辈分我得叫他茂哥。茂哥和我四叔是好朋友，他们有四十来岁了，但是结交的朋友却也有不少三十岁上下的，逢年过节，或者家里有什么好货，他们都会聚在一块喝酒聊天，当然，他们并不是花天酒地的人，而都是老实本分顾家的好男人。<br>饭桌上，茂哥和我们聊了很多，其中，有一件事让我倍感震撼和羞愧。他说，他们这一帮朋友今年十一要组团去北京，今年已经是他们准备的第三年了。他们这一帮朋友很多都是文化水平不高的人，常年在家乡打工，几乎未曾去过外面的世界。他们建立了一个微信群和一个公用账户，每一个人每一个月根据自己的经济实力，最少存入一百块钱，如果有带老婆去的则最少存两百块钱，经济条件比较好的则会多存点。其中有几个已经是确定去不了了的，但是他们却也存入了不少钱，目的就是希望这帮朋友到那时候一定能够去圆这个梦，也算代他们看看中国那座最伟大的城市。<br><img src="https://cdn.nlark.com/yuque/0/2023/webp/22422342/1676212665714-31f747cb-bae0-4221-b5b8-86955199d558.webp#averageHue=%23cbb76e&clientId=u299fc525-f248-4&from=paste&id=u5454c999&originHeight=750&originWidth=1200&originalType=url%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&status=done&style=none&taskId=ud970e082-2ea1-4045-b65a-e22b156cf65&title="><br>图片发自简书 App<br>茂哥讲完后，我沉默了良久，心中的触动久久不能平息。我们的家乡是中国的最南端海南省，北京距离我们有两千多公里，乘坐火车需要四十个小时左右。这一群常年蜗居在这一个小小村庄，以流最多汗水出最多苦力为生活打拼，普通话甚至不怎么标准的老大叔们，心中却窝藏了这样一颗奔赴远隔两千多公里的大都市旅游看长城看天安门的美好愿望，并为之一起奋斗并坚持了三年。这是多么伟大的一件事呀。<br><img src="https://cdn.nlark.com/yuque/0/2023/webp/22422342/1676212665736-776a73c8-f0c7-45bc-8817-8ded5c952ce2.webp#averageHue=%237b86b9&clientId=u299fc525-f248-4&from=paste&id=ub8fe6919&originHeight=240&originWidth=480&originalType=url%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&status=done&style=none&taskId=u6c676afa-17db-48e1-9ec8-d1134dad5b4&title="><br>图片发自简书 App<br>这一群人一点一滴、一分一毫，精打细算坚持了三年的北京梦，其实在我眼中，不过只是一个触手可及的远方。我现在在秦皇岛念书，北京不过是两个小时高铁的距离，几乎是随时可以到达，他们的天安门梦、长城梦，只要我愿意，很轻松便可以完成，而他们，却要花上三年的光阴。我很羞愧，因为我在那里待了三年，却也未曾登过长城，很久以前，那也是我的梦呀！<br><img src="https://cdn.nlark.com/yuque/0/2023/webp/22422342/1676212665564-54333d5b-6c6b-4a18-bef9-7e45cc7686f5.webp#averageHue=%23170e3d&clientId=u299fc525-f248-4&from=paste&id=u1d3d8af1&originHeight=600&originWidth=800&originalType=url%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&status=done&style=none&taskId=u73ea52ac-47d6-4aa2-813f-3313d91c6c4&title="><br>图片发自简书 App<br>有时候，静下心来思考时，发现自己也是蛮贱的，身边原来拥有着不少旁人艳羡的条件，却未能好好珍惜，时间慢慢流逝，自己也逐渐失去了很多，当意识到时，它们早已消散而去，无法找寻，然后只能在深夜中报于一笑，最后沉眠于梦中。<br>一切安好如初。<br>农历二零一九年正月初四<br>亥时</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>2019.03.20 | 每日一字 | 我想静静</title>
    <url>/yq/2019.03.20%20!%20%E6%AF%8F%E6%97%A5%E4%B8%80%E5%AD%97%20!%20%E6%88%91%E6%83%B3%E9%9D%99%E9%9D%99/</url>
    <content><![CDATA[<p>灯红酒绿的城市，车水马龙熙熙攘攘，人们每天忙忙碌碌，为生活打拼着。<br>在这个物欲横流、信息大爆炸的时代，面对各种各样的诱惑刺激，我们很难再保持曾经那一颗宁静的心。<br>上了大三，才发现毕业已经触手可及，也愈发发觉自己越来越浮躁，能力的不足，多种兴趣的渴望发展以及未来的生活就业，都让自己的心变得慌张浮躁，越浮躁越慌，越慌事情越做不好，恶性的循环有时甚至会让自己难以入眠。<br>也明白自己现在的状况很糟糕，也正在尝试慢慢调整，今天写这一个“静”字，就是希望自己在很短的时间把状态调整回来。<br>我想静静。<br>加油，自己！<br><img src="https://cdn.nlark.com/yuque/0/2023/webp/22422342/1676211980949-b4a01ceb-da02-47c1-bb37-77afbea69ba7.webp#averageHue=%23777c77&clientId=ud80655c2-1cd5-4&from=paste&id=u4065616b&originHeight=1600&originWidth=1200&originalType=url%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&status=done&style=none&taskId=u24744013-8cf4-4cd6-b651-c356a7d1776&title="><br>不静的“静”</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>2019.03.17 | 每日一字 | 佛</title>
    <url>/yq/2019.03.17%20!%20%E6%AF%8F%E6%97%A5%E4%B8%80%E5%AD%97%20!%20%E4%BD%9B/</url>
    <content><![CDATA[<blockquote>
<p>从简书迁移过来</p>
</blockquote>
<p>菩提本无树，明镜亦非台，</p>
<p>本是无一物，何处惹尘埃？<br><img src="https://cdn.nlark.com/yuque/0/2023/webp/22422342/1676212338832-1340339c-cab5-4973-9193-8159b9ef47d0.webp#averageHue=%23bcc1b9&clientId=u2dfa541d-e4d8-4&from=paste&id=ud5dbe9e7&originHeight=1600&originWidth=1200&originalType=url%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&status=done&style=none&taskId=ubdb65455-a100-4b6b-b646-f04e5eaa9cb&title="></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>2019.03.21 | 每日一字 | 随想</title>
    <url>/yq/2019.03.21%20!%20%E6%AF%8F%E6%97%A5%E4%B8%80%E5%AD%97%20!%20%E9%9A%8F%E6%83%B3/</url>
    <content><![CDATA[<blockquote>
<p>从简书迁移过来</p>
</blockquote>
<p>农历十五，怪不得今夜的月亮那么圆那么亮。</p>
<p>三月下旬了，北方依旧还是有那么点冷。六摄氏度的温度，穿上一件衬衫，再套上一件带棉的外套，嗯，这样还是有一丝寒意，不过这也不错，这一丝寒意才更能让自己的神经处于兴奋状态，不至于昏昏欲睡。<br>操场上，很多人在奔跑着，并不是很明亮的灯光让这本应该是热烈的画面反倒变得有点宁静。走在跑道上，戴上耳机，听着曾经的粤语老歌，思考着今天的程序 Bug,也构思着今晚的推文。<br>歌曲一首接着一首，思绪一波换上一波，最后 bug 还是没想到解决方法，推文也没完整构思出来。ε=(´ο ｀*)))唉~<br>不过今天还是有收获的，拉上了一个漂亮又有文采还是学媒体的小朋友入伙，一起运营公众号。嗯，这算是今天最大的收获了。嚯嚯嚯，一起加油！！</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/webp/22422342/1676211746479-74177fe5-96f5-4c7a-a1bd-dcaa41cb8854.webp#averageHue=%23929c94&clientId=u0a5cddf4-8e26-4&from=paste&id=u2b699123&originHeight=820&originWidth=1080&originalType=url%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&status=done&style=none&taskId=ueb183fa0-b709-4666-97b8-affc67b8e2d&title="><br>奋斗</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>2019.03.20 | 每日一字 | 生活随想</title>
    <url>/yq/2019.03.20%20!%20%E6%AF%8F%E6%97%A5%E4%B8%80%E5%AD%97%20!%20%E7%94%9F%E6%B4%BB%E9%9A%8F%E6%83%B3/</url>
    <content><![CDATA[<p>生活不易，愿安好。</p>
<p>昨天，和家人视频了一下，知道了兄长今年清明要回家的消息。<br>一转眼，我都大三了，兄长也都 28 岁了，再有三天就是刚好和嫂子结婚一年了。</p>
<p>小时候一直跟在兄长后面，晚上也是和他一块睡，对他有一种盲目的崇拜，觉得他说什么，就是什么，时至今日，我们都已成人，但仍旧对他有些依赖。</p>
<p>这些年来，也深受其影响。他小时候听 beyond，也老拉着我一块听，然后自己也喜欢上了 beyond，后来他弹吉他，于是我也学着弹吉他，现在，他干计算机，我同样又跟着他学计算机。</p>
<p>如今我们都长大了，身上的担子也越来越重了，也不会再像以前那样随便和他开玩笑了。</p>
<p>有时候想想会不自觉觉得挺难受的，我们终会娶妻生子，成家立业，哪一天也会尘归尘，土归土，我们后代的关系也会越来越淡，最后兴许也不再记住他们先祖的我们，原来曾是一对亲兄弟。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/webp/22422342/1676212150616-413f770e-bc67-4309-a204-843b6d00b579.webp#averageHue=%2372736d&clientId=u12b3e7da-94ca-4&from=paste&id=u24930a77&originHeight=1431&originWidth=1080&originalType=url%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&status=done&style=none&taskId=u384b5427-47ce-45c9-9794-27a25e99c58&title="></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>2019.03.26 | 最终，我还是放弃了考研</title>
    <url>/yq/2019.03.26%20!%20%E6%9C%80%E7%BB%88%EF%BC%8C%E6%88%91%E8%BF%98%E6%98%AF%E6%94%BE%E5%BC%83%E4%BA%86%E8%80%83%E7%A0%94/</url>
    <content><![CDATA[<p>认识一个直系学长，他和我是老乡，住在我们隔壁村，今年大四，这学期一过，他即将奔赴南方求职。</p>
<p>因为学业上的困惑和对前途的焦虑，今天特地约他吃了个饭，向他请教了一些问题，也聊了聊自己，聊了聊他。<br>在聊天中，大概知道了他目前的一些情况。<br>我问他当初有没有考研的打算，学长回复说他是家里的老大，下面还有一个弟弟一个妹妹正在念书。考研，呵，他从来没想过。<br>学长是贷款上的大学，四年学费两万四，然后去年因为感觉到所学很难在职场谋得一份好工作，经过再三的考虑，下定了决心分期报了一个培训班，学费是一万六。学费更多的是工作后再支付，也就是说，他一走出校门，就是一个负债将近四万的求职者。<br><img src="https://cdn.nlark.com/yuque/0/2023/webp/22422342/1676211615645-eee564f0-2c79-4c25-86a2-c4e1a1d6c931.webp#averageHue=%2353523a&clientId=u76521c7a-5135-4&from=paste&id=u7cfe11e8&originHeight=449&originWidth=600&originalType=url%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&status=done&style=none&taskId=u516e97f4-c3cc-449a-94f6-502e671432d&title="></p>
<p>和他聊了很多，包括生活，包括学业也包括情感。但自己思绪还是停留在他一毕业就要承担四万块钱的债以及思考自己以后的路该如何走这两件事上。<br>自己其实也是和学长一样贷款上的大学，明年毕业后，也将是一个一穷二白还负债两万多的社会人。这笔债，倒也不至于让自己狼狈，但是对于未来的就业以及前景，自己现在着实是有点慌了。<br>大二期间，家里人也开始询问考研的事，也明确表示希望自己能尝试考一下，兄长也特别建议考一下，说时下所学的这个行业正处于寒冬期，能考个研出来，肯定是不错的。<br>自己原来的想法是不会考研的，但是父母的期望和兄长的意见，让自己的想法逐渐动摇了，最后也买来了考研的相关学习书籍。<br>只是，后来我还是放弃了。<br>彻底放弃之前，我也多次拷问过自己，自己是怂了吗，是临阵逃脱了吗，是不是一个逃兵？？<br>如果非要这么想，貌似也是没有问题。<br>买回的考研书，硬着头皮认真看了，两个星期下来，却感觉不到丝毫的收获，还累得一塌糊涂。一身疲惫躺在床上，询问自己，即便我很拼，拼一年下来，我能考得上吗，考不上我又该何去何从，这一年来我全身心放到了考研，我的专业技能肯定会很差，而且即便考上了，我还得花三年时间学习，这到底是不是自己想要的？？<br>一再斟酌，一再犹豫，最后吐出了一口气，微微笑对自己说，嗯，放弃吧，这根本就不是你想要的，放弃吧，将来无论如何，你都不许为这些天来犹豫再三，最后做下的这个决定后悔。<br><img src="https://cdn.nlark.com/yuque/0/2023/webp/22422342/1676211616575-58ed48c4-7005-4aee-9012-360a0c8e8557.webp#averageHue=%23494949&clientId=u76521c7a-5135-4&from=paste&id=u43109ae7&originHeight=269&originWidth=400&originalType=url%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&status=done&style=none&taskId=u06014666-6aa0-4a40-bf62-c4956e6ea42&title="></p>
<p>说实话，放弃了，顿感一身轻松。今天在路上看到茫茫的复试生，更坚定了自己的决定。<br>考研，对我来说，真的很难。<br>还有一年半，我也将像学长一样，挥手告别我的学生时代，背着两万四的债，走向社会，走向职场，开启我的另一个人生。我想无论如何，我一定不会后悔今天的决定。我也相信着，我一定不会差！<br>加油！</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>2021年度阅读总结</title>
    <url>/yq/2021%E5%B9%B4%E5%BA%A6%E9%98%85%E8%AF%BB%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/22422342/1643846926452-ef9dac6d-1fd5-40c9-b274-a4ed156427ad.jpeg"></p>
<h1 id="年度阅读总结"><a href="#年度阅读总结" class="headerlink" title="年度阅读总结"></a>年度阅读总结</h1><p>3 月份开始确定的读书，原计划是至少读十本，很遗憾，没有完成任务，原因各方面吧，最主要的原因有两项吧：<br>1、换了工作，忙，时间少；<br>2、执行力还是不够，还是懒了些。</p>
<p>最后，今年的从阅读上获得的收获还是很多的，读了巴金先生的《春》和《秋》，加上之前的《家》，算是彻底读完了雷雨三部曲；重新认识了金老爷子的江湖世界，也构建了自己的江湖世界，真的好看，神雕的郭襄至今仍让人无法忘怀。再有就是阅读了大刘的科幻世界，在敲下这行字的此刻，我又再一次起了鸡皮疙瘩，三体和球闪的一幕幕重新浮现，我从没有想到小说能这么写，大刘的想象竟可以达到这样的高度，相比之下，我这二十多年来自以为是天马行空的幻想显得幼稚可笑，阅读过程中，血液如同沸腾的岩浆，好久未曾再有这样的感觉了，太好看了，2022 年的目标之一也是看一些知名的科幻小说吧。</p>
<p>今天是 2022 年 1 月 3 号，新年伊始那股强劲的总结欲望到此刻只像一个必须完成而不用在乎质量的任务，未完成则心有挂念，故扯下这几笔以散去心中的挂念求轻。</p>
]]></content>
  </entry>
  <entry>
    <title>2021文案摘抄</title>
    <url>/yq/2021%E6%96%87%E6%A1%88%E6%91%98%E6%8A%84/</url>
    <content><![CDATA[<p><strong>日期</strong>：2021/09/13（星期一）        <strong>天气</strong>：晴</p>
<div style="background: #E8F7FF;padding:10px;border: 1px solid #ABD2DA;border-radius:5px;margin-bottom:5px;">1、我来这个世界，不是为了繁衍后代，而是来看花怎么开，水怎么流，太阳怎么升起，夕阳何时落下，我活在世上无非想要明白些道理，遇见有趣的事，生命是一场偶然，我在其中寻找因果。
—— 王小波《黄金时代》</div>

<p>无论丰饶还是贫瘠，无论是鲜花遍地还是满眼荒芜，它都是一片神奇的土地。因为它像母亲一样无私的养育了人们，因为她随时随地的牵动人们的心魂和情思。<br>——王惠《这是一片神奇的土地》</p>
<p>总以为自己还年轻，却忽略了岁月的脚步。当身边的一道道风景变成了回忆，却忽然发现，风景依然在，人已非少年。<br>—— 余华</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/22422342/1651171499886-66b10690-b9fd-4577-8e2b-6184907f1e76.jpeg#from=url&id=kMOFl&originHeight=2400&originWidth=1080&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
]]></content>
  </entry>
  <entry>
    <title>2022-04</title>
    <url>/yq/2022-04/</url>
    <content><![CDATA[<h1 id="Mysql-查看表最全结构"><a href="#Mysql-查看表最全结构" class="headerlink" title="Mysql 查看表最全结构"></a>Mysql 查看表最全结构</h1><p><a href="https://blog.csdn.net/weixin_39603604/article/details/113270950">https://blog.csdn.net/weixin_39603604/article/details/113270950</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> +表名\G；</span><br><span class="line"></span><br><span class="line">例如：<span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> customer_register_promotion\G；</span><br></pre></td></tr></table></figure>

<h1 id="MyBatis-对-map-入参的更新"><a href="#MyBatis-对-map-入参的更新" class="headerlink" title="MyBatis 对 map 入参的更新"></a>MyBatis 对 map 入参的更新</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBusinessPeopleCustomerName&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.Map&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;customerNameByCodeMap.entrySet()&quot;</span> <span class="attr">item</span>=<span class="string">&quot;customerName&quot;</span> <span class="attr">index</span>=<span class="string">&quot;customerCode&quot;</span> <span class="attr">open</span>=<span class="string">&quot;&quot;</span> <span class="attr">close</span>=<span class="string">&quot;&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;customerCode != null and customerName != null&quot;</span>&gt;</span></span><br><span class="line">            update people</span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                customer_name = #&#123;customerName&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">                customer_code = #&#123;customerCode&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Integer <span class="title">updateBusinessPeopleCustomerName</span><span class="params">(<span class="meta">@Param(&quot;customerNameByCodeMap&quot;)</span> Map&lt;Long,String&gt; customerNameByCodeMap)</span></span>;</span><br></pre></td></tr></table></figure>

<h1 id="Java-方法多返回值问题-类似-Groovy-中的元组-Tuple"><a href="#Java-方法多返回值问题-类似-Groovy-中的元组-Tuple" class="headerlink" title="Java 方法多返回值问题(类似 Groovy 中的元组 Tuple)"></a>Java 方法多返回值问题(类似 Groovy 中的元组 Tuple)</h1><p><a href="https://blog.csdn.net/weixin_43274002/article/details/120464358">https://blog.csdn.net/weixin_43274002/article/details/120464358</a><br>使用 commons-lang3 工具包下的 Pair 或 Triple 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">      <span class="comment">// 双返回值</span></span><br><span class="line">      Pair&lt;Integer, Integer&gt; pair = <span class="keyword">new</span> ImmutablePair&lt;&gt;(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">System.out.println(pair.getLeft());</span><br><span class="line">System.out.println(pair.getRight());</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 三返回值</span></span><br><span class="line">Triple&lt;String, String, String&gt; triple =</span><br><span class="line">                                 <span class="keyword">new</span> ImmutableTriple&lt;&gt;(<span class="string">&quot;我是第一个结果&quot;</span>,</span><br><span class="line">                                                       <span class="string">&quot;我是第二个结果&quot;</span>,</span><br><span class="line">                                                       <span class="string">&quot;我是第三个结果&quot;</span>);</span><br><span class="line">System.out.println(triple.getLeft());</span><br><span class="line">System.out.println(triple.getMiddle());</span><br><span class="line">System.out.println(triple.getRight());</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="复杂-SQL-鉴赏"><a href="#复杂-SQL-鉴赏" class="headerlink" title="复杂 SQL 鉴赏"></a>复杂 SQL 鉴赏</h1><p>(非公司系统表)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> t1.id t1_id,t2.id t2_id,t1.file_id t1_file_id,t2.file_id t2_file_id,t2.file_name file_name <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> attachments <span class="keyword">where</span> file_id=<span class="number">0</span>) t1 <span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">   (<span class="keyword">select</span> * <span class="keyword">from</span> attachments <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> (</span><br><span class="line">                                                   <span class="keyword">select</span>  <span class="keyword">max</span>(<span class="keyword">id</span>) max_id <span class="keyword">from</span> attachments <span class="keyword">where</span> file_id!=<span class="number">0</span> <span class="keyword">and</span> contract_id <span class="keyword">in</span></span><br><span class="line">                                                                                                                                   (<span class="keyword">select</span> contract_id <span class="keyword">from</span> attachments <span class="keyword">where</span> file_id=<span class="number">0</span>) <span class="keyword">group</span> <span class="keyword">by</span> contract_id )) t2  <span class="keyword">on</span> t1.contract_id =t2.contract_id ;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">&#x27;update attachments set file_id=&#x27;</span>,t2_file_id,<span class="string">&#x27;where id=&#x27;</span>,t1_id,<span class="string">&#x27;;&#x27;</span>) <span class="keyword">from</span> (<span class="keyword">select</span> t1.id t1_id,t2.id t2_id,t1.file_id t1_file_id,t2.file_id t2_file_id,t2.file_name file_name <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> attachments <span class="keyword">where</span> file_id=<span class="number">0</span>) t1 <span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">                                               (<span class="keyword">select</span> * <span class="keyword">from</span> attachments <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> (</span><br><span class="line">                                                   <span class="keyword">select</span>  <span class="keyword">max</span>(<span class="keyword">id</span>) max_id <span class="keyword">from</span> attachments <span class="keyword">where</span> file_id!=<span class="number">0</span> <span class="keyword">and</span> contract_id <span class="keyword">in</span></span><br><span class="line">                                                                                                                                   (<span class="keyword">select</span> contract_id <span class="keyword">from</span> attachments <span class="keyword">where</span> file_id=<span class="number">0</span>) <span class="keyword">group</span> <span class="keyword">by</span> personnel_contract_id )) t2  <span class="keyword">on</span> t1.contract_id =t2.contract_id ) <span class="keyword">as</span> t3;</span><br></pre></td></tr></table></figure>

<h1 id="查看端口进程和杀死进程"><a href="#查看端口进程和杀死进程" class="headerlink" title="查看端口进程和杀死进程"></a>查看端口进程和杀死进程</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找端口进程</span></span><br><span class="line">lsof -i:8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀死进程</span></span><br><span class="line"><span class="built_in">kill</span> -9 pid(进程号)</span><br></pre></td></tr></table></figure>

<h1 id="Long-类型的比较方法源码"><a href="#Long-类型的比较方法源码" class="headerlink" title="Long 类型的比较方法源码"></a>Long 类型的比较方法源码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现比较器接口Comparable，重写里面的compareTo方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Long anotherLong)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> compare(<span class="keyword">this</span>.value, anotherLong.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">long</span> x, <span class="keyword">long</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x &lt; y) ? -<span class="number">1</span> : ((x == y) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>2022-06</title>
    <url>/yq/2022-06/</url>
    <content><![CDATA[<h1 id="stream-流实现分页"><a href="#stream-流实现分页" class="headerlink" title="stream 流实现分页"></a>stream 流实现分页</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分页例子</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pageByStream</span><span class="params">(List&lt;Object&gt; codeList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pageSize = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> totalCount = codeList.size();</span><br><span class="line">        <span class="keyword">int</span> totalPage = totalCount % pageSize == <span class="number">0</span> ? totalCount / pageSize : totalCount / pageSize + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; totalPage; i++) &#123;</span><br><span class="line">            List&lt;Object&gt; pageCodeList = codeList.stream().skip(i * pageSize).limit(pageSize).collect(Collectors.toList());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="toMap"><a href="#toMap" class="headerlink" title="toMap"></a>toMap</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Long, ContractDetail&gt; contractDetailMap = contractDetailList.stream().collect(Collectors.toMap(ContractDetail::getContractId, Function.identity(), (v1, v2) -&gt; v1));</span><br></pre></td></tr></table></figure>

<h1 id="groupBy"><a href="#groupBy" class="headerlink" title="groupBy"></a>groupBy</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Long, List&lt;QueryPeopleReturnVo&gt;&gt; peopleVoMap = peopleReturnVos.stream().collect(Collectors.groupingBy(QueryPeopleReturnVo::getCustomerCode));</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>2022.04.01 | 放下，就不累了</title>
    <url>/yq/2022.04.01%20!%20%E6%94%BE%E4%B8%8B%EF%BC%8C%E5%B0%B1%E4%B8%8D%E7%B4%AF%E4%BA%86/</url>
    <content><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1648787193674-367bdf2d-85dc-4873-8ac2-3de35c5247ca.png#clientId=u1d710273-fd28-4&from=paste&height=159&id=u211ea2cc&name=image.png&originHeight=317&originWidth=684&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=26368&status=done&style=none&taskId=u11175851-3b70-48d6-9f75-57d035dbe7c&title=&width=342" alt="image.png"><br>01</p>
<p>关于生活，放下过多的执念<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1648787273229-dd90f0e1-0f34-423f-b1cb-b2b0f4417b1e.png#clientId=u1d710273-fd28-4&from=paste&id=u8d30ad5e&originHeight=785&originWidth=708&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&taskId=uccacbe70-4714-43ac-aa6f-b1bd579ca88&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1648787273215-43f269a1-d63f-4b41-916a-a84ee2765b34.png#clientId=u1d710273-fd28-4&from=paste&id=u951f21b4&originHeight=486&originWidth=624&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&taskId=u843b88cb-5c26-4891-80b8-421b32109ae&title="><br>02<br>关于感情，放下无缘的执着</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1648787313390-dfa8a4b6-bfca-4d68-b9c6-9d204c9caf96.png#clientId=u1d710273-fd28-4&from=paste&id=uea596858&originHeight=786&originWidth=675&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&taskId=u9e8c2617-afa1-4be0-ac15-cf46999bc1d&title="></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1648787313277-de8d294c-25cb-4911-9916-8b1803f2e8f0.png#clientId=u1d710273-fd28-4&from=paste&id=ud2ea20fa&originHeight=402&originWidth=612&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&taskId=u4827f1b6-7609-4063-a502-3181f1bf71d&title="></p>
<p>03<br>关于伴侣，放下过高的期待</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1648787313287-20509fa4-c475-458b-a7c6-4dd5a99125fd.png#clientId=u1d710273-fd28-4&from=paste&id=ue15b7c55&originHeight=597&originWidth=654&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&taskId=u6deeaab6-373e-4167-b4b0-02a17e413c2&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1648787313300-9055ab0e-4e6f-48ce-8b3e-b79f3dedb4e2.png#clientId=u1d710273-fd28-4&from=paste&id=u6be87110&originHeight=619&originWidth=679&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&taskId=u07fbd7cc-889d-45f7-82a5-291762bbd9b&title="></p>
<p>04</p>
<p>放下，就不累了</p>
<p>一念放下，万般自在。</p>
<p>放下生活中过多的执念；放下感情中无缘的执着。</p>
<p>放下对伴侣过高的期望；放下一切扰乱心神，困惑心情的人和事。</p>
<p>放下是一种智慧和能力，愿我们都能学会和拥有。</p>
<p><strong>放下了，就不累了！</strong></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>摘抄</tag>
      </tags>
  </entry>
  <entry>
    <title>2022.04.16 | 当我真正开始爱自己</title>
    <url>/yq/2022.04.16%20!%20%E5%BD%93%E6%88%91%E7%9C%9F%E6%AD%A3%E5%BC%80%E5%A7%8B%E7%88%B1%E8%87%AA%E5%B7%B1/</url>
    <content><![CDATA[<p>当我真正开始爱自己，<br>我才认识到，所有的痛苦和情感的折磨，<br>都只是提醒我：活着，不要违背自己的本心。<br>今天我明白了，这叫作，<br>“真实”。<br>当我真正开始爱自己，<br>我才懂得，把自己的愿望强加于人，<br>是多么的无礼，就算我知道，时机并不成熟，<br>那人也还没有做好准备，<br>就算那个人就是我自己，<br>今天我明白了，这叫作，<br>“尊重”。<br>当我开始爱自己，<br>我不再渴求不同的人生，<br>我知道任何发生在我身边的事情，<br>都是对我成长的邀请。<br>如今，我称之为，<br>“成熟”。<br>当我开始真正爱自己，<br>我才明白，我其实一直都在正确的时间，<br>正确的地方，发生的一切都恰如其分。<br>由此我得以平静。<br>今天我明白了，这叫作，<br>“自信”。<br>当我开始真正爱自己，<br>我不再牺牲自己的自由时间，<br>不再去勾画什么宏伟的明天。<br>今天我只做有趣和快乐的事，<br>做自己热爱，让心欢喜的事，<br>用我的方式，以我的韵律。<br>今天我明白了，这叫作，<br>“单纯”。<br>当我开始真正爱自己，<br>我开始远离一切不健康的东西。<br>不论是饮食和人物，还是事情和环境，<br>我远离一切让我远离本真的东西。<br>从前我把这叫作“追求健康的自私自利”，<br>但今天我明白了，这是，<br>“自爱”。<br>当我开始真正爱自己，<br>我不再总想着要永远正确，不犯错误。<br>我今天明白了，这叫作，<br>“谦逊”。<br>当我开始真正爱自己，<br>我不再继续沉溺于过去，<br>也不再为明天而忧虑，<br>现在我只活在一切正在发生的当下，<br>今天，我活在此时此地，<br>如此日复一日。这就叫，<br>“完美”。<br>当我开始真正爱自己，<br>我明白，我的思虑让我变得贫乏和病态，<br>但当我唤起了心灵的力量，<br>理智就变成了一个重要的伙伴，<br>这种组合我称之为，<br>“心的智慧”。<br>我们无须再害怕自己和他人的分歧，矛盾和问题，<br>因为即使星星有时也会碰在一起，<br>形成新的世界，<br>今天我明白，这就是，<br>“生命”！</p>
]]></content>
  </entry>
  <entry>
    <title>AOP的理解</title>
    <url>/yq/AOP%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>参考链接</p>
<h1 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h1><p>AOP(Aspect-Oriented Programming:面向切面编程)能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如<strong>事务处理、日志管理、权限控制</strong>等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。<br>Spring AOP 就是基于动态代理的，如果要代理的对象，实现了某个接口，那么 Spring AOP 会使用 <strong>JDK Proxy</strong>，去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候 Spring AOP 会使用 <strong>Cglib</strong> 生成一个被代理对象的子类来作为代理，如下图所示：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1658214285165-4c73bce3-f6fb-4f43-a4fd-55e98369086a.png#clientId=u8a281d0b-69b4-4&from=paste&id=ufe7bb64b&name=image.png&originHeight=354&originWidth=720&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=102967&status=done&style=none&taskId=u9b394eeb-566f-4ef9-9f5b-a5535a300db&title=" alt="image.png"><br>当然你也可以使用 <strong>AspectJ</strong> ！Spring AOP 已经集成了 AspectJ ，AspectJ 应该算的上是 Java 生态系统中最完整的 AOP 框架了。</p>
<h1 id="兄弟模式-接口实现-JDK-动态代理"><a href="#兄弟模式-接口实现-JDK-动态代理" class="headerlink" title="兄弟模式-接口实现-JDK 动态代理"></a>兄弟模式-接口实现-JDK 动态代理</h1><p>spring 会使用 JDK 的<strong>java.lang.reflect.Proxy</strong>类，它允许 Spring 动态生成一个新类来实现必要的接口，织入通知，并且把对这些接口的任何调用都转发到目标类。</p>
<h1 id="父子模式-继承实现-Cglib-动态代理"><a href="#父子模式-继承实现-Cglib-动态代理" class="headerlink" title="父子模式-继承实现-Cglib 动态代理"></a>父子模式-继承实现-Cglib 动态代理</h1><p>spring 使用<strong>CGLIB</strong>库生成目标类的一个子类，在创建这个子类的时候，spring 织入通知，并且把对这个子类的调用委托到目标类。</p>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Apollo配置中心</title>
    <url>/yq/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
    <content><![CDATA[<p>官网：<a href="https://www.apolloconfig.com/#/zh/usage/java-sdk-user-guide">https://www.apolloconfig.com/#/zh/usage/java-sdk-user-guide</a></p>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>技术栈</tag>
      </tags>
  </entry>
  <entry>
    <title>BaseTypeHandler类</title>
    <url>/yq/BaseTypeHandler%E7%B1%BB/</url>
    <content><![CDATA[<p>部分源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可通过重写该方法为目标字段自定义赋值，比如做数据的加密落表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, T parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可通过重写该方法为目标字段后自定义做操作，比如对加密字段解密后读取</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title">getNullableResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>AtomicInteger</title>
    <url>/yq/AtomicInteger/</url>
    <content><![CDATA[<p>并发包下，多线程下依旧保证原子。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicInteger</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6214790243416807050L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * This class intended to be implemented using VarHandles, but there</span></span><br><span class="line"><span class="comment">     * are unresolved cyclic startup dependencies.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> jdk.internal.misc.Unsafe U = jdk.internal.misc.Unsafe.getUnsafe();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> VALUE = U.objectFieldOffset(AtomicInteger.class, <span class="string">&quot;value&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;</span><br></pre></td></tr></table></figure>

<p>volatile 修饰，保证 value 是可见的，当某个线程修改 value 值时，对其他线程可见，其他线程访问时就不会通过缓存去取，而是到内存中取，保证 value 的一致性。</p>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Bug汇报模板</title>
    <url>/yq/Bug%E6%B1%87%E6%8A%A5%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p>现象描述：</p>
<p>问题原因：</p>
<p>影响范围：</p>
<p>修改措施：</p>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>CAS</title>
    <url>/yq/CAS/</url>
    <content><![CDATA[<h1 id="compare-and-set-swap-——-无锁-自旋锁"><a href="#compare-and-set-swap-——-无锁-自旋锁" class="headerlink" title="compare and set(swap) —— 无锁/自旋锁"></a>compare and set(swap) —— 无锁/自旋锁</h1><p>通俗来讲就是 比较和替换或者改变。<strong>CAS 是不用上锁的，所以也称之为无锁或自旋锁。</strong><br><strong>例子</strong>：t1 线程读取了一个变量 a 的值为 1，现在将 a 的值改为 2，做写入操作之前，拿之前取到的 1 这个值和现在 a 的值进行比较，如果相等，也就是说没有其他线程对这个 a 有过修改，这时候就可以放心地把 2 写入了；如果比较不相等，则说明了有其他线程对 a 这个值有修改，这时候不能写入并且再继续之前的操作。之前的操作即为如果我拿 1 去和 a 的当前值比较的时候，因为 a 被其他线程修改为了 5，这个时候 t1 会重新读取 a 的变量，但是这个时候 a 的值并不为 1 了，而是为 5 了，然后我们又对它进行了修改成为 2，再写入之前，又用读取到的 5 去和当前 a 的值比较，一样，则证明这期间没有被修改，可做写入操作，反之不可做写入操作且继续上一步。</p>
<h1 id="CAS-会带来的问题"><a href="#CAS-会带来的问题" class="headerlink" title="CAS 会带来的问题"></a>CAS 会带来的问题</h1><ul>
<li>循环时间长，开销大</li>
<li>只能保证一个共享变量的操作</li>
<li>ABA 问题</li>
</ul>
<h1 id="ABA-问题"><a href="#ABA-问题" class="headerlink" title="ABA 问题"></a>ABA 问题</h1><p>概述：就是说 之前 a 变量的值为 0，t1 第一个去拿出来改为了 1，未做写入操作之前发生了这样的场景：t2 线程也拿出来（此时拿出来的是 0）并且改为 3 写入了，然后 t3 线程又拿出来（此时拿出来的是 t2 写入的，也就是 3）修改为 0 并且写入了。这个时候 t1 做 CAS 的时候，并没有发现 a 变量已经被改变为其他又被改回来了，所以能正常做写入操作。<br><strong>解决方案：加一个版本号</strong>（貌似有点<strong>乐观锁</strong>的感觉。）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ABA问题</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---ABA问题---&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;原始值：&quot;</span> + atomicInteger.get());</span><br><span class="line">        <span class="comment">//0--&gt;1--&gt;0</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            atomicInteger.compareAndSet(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;步骤一:&quot;</span> + atomicInteger.get());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//线程A休眠1秒，保证线程A按照0--&gt;1--&gt;0执行</span></span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                atomicInteger.compareAndSet(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;步骤二:&quot;</span> + atomicInteger.get());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;thread A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="comment">//线程B休眠3秒，保证线程A完成ABA问题</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                atomicInteger.compareAndSet(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;步骤三:&quot;</span> + atomicInteger.get());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;thread B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">while</span> (Thread.activeCount() &gt; <span class="number">2</span>) &#123;&#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;最终结果:&quot;</span> + atomicInteger.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>#</p>
<p>案例<br><a href="https://baijiahao.baidu.com/s?id=1730331465639596673%ED%94%B4=spider&for=pc">https://baijiahao.baidu.com/s?id=1730331465639596673픴=spider&amp;for=pc</a></p>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Character</title>
    <url>/yq/Character/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断是否是数字</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isDigit</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isDigit((<span class="keyword">int</span>)ch);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转数字</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNumericValue</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getNumericValue((<span class="keyword">int</span>)ch);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>COLA架构</title>
    <url>/yq/COLA%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<p>资料<br><a href="https://blog.csdn.net/significantfrank/article/details/110934799">https://blog.csdn.net/significantfrank/article/details/110934799</a><br>源码<br><a href="https://github.com/alibaba/COLA">https://github.com/alibaba/COLA</a></p>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>随着业务复杂性的逐步提高，为兼容各种场景，原有的代码也变得越来越复杂不易维护且容易出问题。故公司高层提出了重构我们现有的项目，经过几次会议的讨论，最终确定采用 COLA 架构作为本次重构的指导思想。</p>
<h1 id="COLA-了解"><a href="#COLA-了解" class="headerlink" title="COLA 了解"></a>COLA 了解</h1><h2 id="分层结构"><a href="#分层结构" class="headerlink" title="分层结构"></a>分层结构</h2><p><strong>应用系统处理复杂业务逻辑也应该是分层的，下层对上层屏蔽处理细节，每一层各司其职，分离关注点，而不是一个 ServiceImpl 解决所有问题</strong>。对于一个典型的业务应用系统来说，COLA 会做如下层次定义，每一层都有明确的职责定义：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1652595249195-bbe2a985-dddc-41fc-94c1-44087ec657ac.png#clientId=u3f77690d-dba3-4&from=paste&id=u00672630&name=image.png&originHeight=493&originWidth=372&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=49940&status=done&style=none&taskId=udd742a71-ff23-42f0-8e7c-00ab4d618b5&title=" alt="image.png"><br>1）适配层（Adapter Layer）：负责对前端展示（web，wireless，wap）的路由和适配，对于传统 B/S 系统而言，adapter 就相当于 MVC 中的 controller；</p>
<p>2）应用层（Application Layer）：主要负责获取输入，组装上下文，参数校验，调用领域层做业务处理，如果需要的话，发送消息通知等。层次是开放的，应用层也可以绕过领域层，直接访问基础实施层；</p>
<p>3）领域层（Domain Layer）：主要是封装了核心业务逻辑，并通过领域服务（Domain Service）和领域对象（Domain Entity）的方法对 App 层提供业务实体和业务逻辑计算。领域是应用的核心，不依赖任何其他层次；</p>
<p>4）基础实施层（Infrastructure Layer）：主要负责技术细节问题的处理，比如数据库的 CRUD、搜索引擎、文件系统、分布式服务的 RPC 等。此外，领域防腐的重任也落在这里，外部依赖需要通过 gateway 的转义处理，才能被上面的 App 层和 Domain 层使用。</p>
<h2 id="分包结构"><a href="#分包结构" class="headerlink" title="分包结构"></a>分包结构</h2><p>分层是整体项目的职责划分，细分到包结构的粒度，才能更好指导我们的工作。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1652595401770-a263b2c4-d0f8-4e59-afb8-a2b41e787148.png#clientId=u3f77690d-dba3-4&from=paste&id=u09d89b0b&name=image.png&originHeight=722&originWidth=1476&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=287874&status=done&style=none&taskId=u15be2a4e-2117-4aee-8ed2-66c82c1469d&title=" alt="image.png"></p>
<p>各个包结构的简要功能描述，如下表所示：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1652595806389-9276d4d4-eb10-4c1c-99e6-a32afab8ecce.png#clientId=u3f77690d-dba3-4&from=paste&height=535&id=ud88c7899&name=image.png&originHeight=669&originWidth=733&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=43760&status=done&style=none&taskId=uaceb907c-bb2d-4846-964d-6b0eac63403&title=&width=586.4" alt="image.png"><br><strong>无有必要勿增实体</strong>。领域模型对设计能力要求很高，没把握用好，一个错误的抽象还不如不抽象，宁可不要用，也不要滥用，不要为了 DDD 而 DDD。<br>问题的关键是要看，新增的模型没有给你带来收益。比如有没有帮助系统解耦，有没有提升业务语义表达能力的提升，有没有提升系统的可维护性和可测性等等。<br>模型虽然可选，但 DDD 的思想是一定要去学习和贯彻的，特别是统一语言、边界上下文、防腐层的思想，值得深入学习，仔细体会。实际上，COLA 里面的很多设计思想都来自于 DDD。其中就包括领域包的设计。<br>前面的包定义，都是功能维度的定义。为了兼顾领域维度的内聚性，我们有必要对包结构进行一下微调，即顶层包结构应该是按照领域划分，让领域内聚。<br>也就是说，我们要综合考虑功能和领域两个维度包结构定义。按照领域和功能两个维度分包策略，最后呈现出来的，是如下图所示的顶层包节点是领域名称，领域之下，再按功能划分包结构。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1652595947916-fa897609-9e8d-4693-a9cb-4c08465e8837.png#clientId=u3f77690d-dba3-4&from=paste&id=u1ec5259c&name=image.png&originHeight=462&originWidth=796&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=204437&status=done&style=none&taskId=ub51e3cbe-05c1-4fe5-9ae2-3368322f39e&title=" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1652596012571-51722ab0-e7a5-4465-b07a-87dcffeeb060.png#clientId=u3f77690d-dba3-4&from=paste&id=u18031ef0&name=image.png&originHeight=480&originWidth=948&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=237531&status=done&style=none&taskId=u61c8266e-d247-4e86-9733-432eff5b977&title=" alt="image.png"></p>
<h2 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h2><p>实现 <strong>高内聚低耦合。</strong><br>采用<strong>防腐层</strong>的解耦设计思想，不直接依赖外域的信息，要把外域的信息转换成自己领域上下文的实体再去使用，从而实现本域和外部依赖的解耦。<br>在 cola 中，将数据库、搜索引擎等数据存储也列为外部依赖的范畴。<br>其实现方式如下图所示，主要是<strong>在 Domain 层定义 Gateway 接口，然后在 Infrastructure 提供 Gateway 接口的实现。</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1652596395594-79a7d642-20a4-431c-bd48-d6c80a6eae67.png#clientId=u3f77690d-dba3-4&from=paste&id=u9cd1c418&name=image.png&originHeight=410&originWidth=1012&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=138786&status=done&style=none&taskId=u59f36eb9-2398-40ba-a42b-372d1af68bd&title=" alt="image.png"><br>举个例子，假如有一个电商系统，对于下单这个操作，它需要联动订单服务、商品服务、库存服务、营销服务等多个系统才能完成。<br>那么在订单域，该如何获取商品和库存信息呢？最直接的方式，无外乎就是 RPC 调用商品和库存服务，拿到 DTO 直接使用就完了。<br>然而，商品域吐出的是一个大而全的 DTO（可能包含几十个字段），而在下单这个阶段，订单所需要的可能只是其中几个字段而已。更合适的做法，应该是在订单域中，使用 gateway 对商品域和库存域的依赖进行解耦<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1652596936299-1836b7e3-b78d-4594-83db-67ce97121b42.png#clientId=u3f77690d-dba3-4&from=paste&id=ua602439f&name=image.png&originHeight=666&originWidth=1024&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=290654&status=done&style=none&taskId=u4093de99-cde1-440f-a25d-c01f651f955&title=" alt="image.png"></p>
<h2 id="落地"><a href="#落地" class="headerlink" title="落地"></a>落地</h2>]]></content>
  </entry>
  <entry>
    <title>Config</title>
    <url>/yq/Config/</url>
    <content><![CDATA[<p>配置管理</p>
]]></content>
  </entry>
  <entry>
    <title>CopyOnWriteArrayList</title>
    <url>/yq/CopyOnWriteArrayList/</url>
    <content><![CDATA[<h2 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2><p>并发容器；增删改加锁，拷贝一份做操作，操作完成后原引用指向拷贝出来的这个对象；读操作不加锁，读的是原容器的数据；保证数据最终一致性，不保证数据实时一致性。<br><strong>应用场景：多读少写，黑白名单配置。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> copyonwrite;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dingxiangyong on 2016/3/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结束标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> stopFlag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        CopyOnWriteArrayList&lt;Integer&gt; list = <span class="keyword">new</span> CopyOnWriteArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="comment">//初始化集合</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ReadTask readTask1 = <span class="keyword">new</span> ReadTask(list);</span><br><span class="line">        ReadTask readTask2 = <span class="keyword">new</span> ReadTask(list);</span><br><span class="line">        ReadTask readTask3 = <span class="keyword">new</span> ReadTask(list);</span><br><span class="line">        ReadTask readTask4 = <span class="keyword">new</span> ReadTask(list);</span><br><span class="line"></span><br><span class="line">        WriteTask writeTask = <span class="keyword">new</span> WriteTask(list);</span><br><span class="line"></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        service.execute(readTask1);</span><br><span class="line">        service.execute(readTask2);</span><br><span class="line">        service.execute(readTask3);</span><br><span class="line">        service.execute(readTask4);</span><br><span class="line">        service.execute(writeTask);</span><br><span class="line"></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReadTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReadTask</span><span class="params">(List&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!Test.stopFlag) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> index = (<span class="keyword">int</span>) (Math.random() * list.size());</span><br><span class="line">                Integer value = list.get(index);</span><br><span class="line">                System.out.println(<span class="string">&quot;正在读取值：&quot;</span> + value);</span><br><span class="line">                Thread.sleep(<span class="number">10</span>); <span class="comment">//模拟耗时操作</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 写线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WriteTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WriteTask</span><span class="params">(List&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; newList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">100000</span>; i &lt; <span class="number">2000000</span>; i++) &#123;</span><br><span class="line">            newList.add(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>); <span class="comment">//模拟耗时操作，让读线程可以读到</span></span><br><span class="line">            System.out.println(<span class="string">&quot;准备写入copyonwritelist&quot;</span>);</span><br><span class="line">            list.addAll(newList);</span><br><span class="line">            System.out.println(<span class="string">&quot;写入copyonwritelist完毕&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>); <span class="comment">//模拟耗时操作，让读线程可以读到</span></span><br><span class="line">            Test.stopFlag = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">....</span><br><span class="line">正在读取值：<span class="number">79029</span></span><br><span class="line">正在读取值：<span class="number">29270</span></span><br><span class="line">正在读取值：<span class="number">61694</span></span><br><span class="line">正在读取值：<span class="number">3373</span></span><br><span class="line">正在读取值：<span class="number">33155</span></span><br><span class="line">正在读取值：<span class="number">78532</span></span><br><span class="line">正在读取值：<span class="number">12583</span></span><br><span class="line">正在读取值：<span class="number">2778</span></span><br><span class="line">正在读取值：<span class="number">32738</span></span><br><span class="line">正在读取值：<span class="number">82363</span></span><br><span class="line">准备写入copyonwritelist</span><br><span class="line">正在读取值：<span class="number">61661</span></span><br><span class="line">正在读取值：<span class="number">5817</span></span><br><span class="line">正在读取值：<span class="number">84120</span></span><br><span class="line">正在读取值：<span class="number">43250</span></span><br><span class="line">写入copyonwritelist完毕</span><br><span class="line">正在读取值：<span class="number">1744710</span></span><br><span class="line">正在读取值：<span class="number">422552</span></span><br><span class="line">正在读取值：<span class="number">1038943</span></span><br><span class="line">正在读取值：<span class="number">1229489</span></span><br><span class="line">正在读取值：<span class="number">200887</span></span><br><span class="line">正在读取值：<span class="number">1547701</span></span><br><span class="line">正在读取值：<span class="number">1841575</span></span><br><span class="line">正在读取值：<span class="number">1785725</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>从如上结果可以看出，在写入数据的时候，读取操作并没有被终止，写入完毕后读取操作可以读取到最新的数据。<br><a href="https://blog.csdn.net/super_wj0820/article/details/96154828">
</a></p>
]]></content>
  </entry>
  <entry>
    <title>CountDownLatch</title>
    <url>/yq/CountDownLatch/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>CountDownLatch 是 Java 并发包下的一个工具类，可以看做一个计数器，它的操作是原子性的，也就是同一时刻只能有一个线程去操作这个计数器。初始化的时候我们会设置一个计数值，计数器的计数值被线程 countdown()减为 0 时，任何调用 CountDownLatch 对象上的 await()方法都会被阻塞，直至 countdown 减到 status = 0 或者超时时，才会执行 await()后面的程序。</p>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">3</span>);</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.MILLISECONDS.sleep(<span class="number">20L</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;证据1收集完成...&quot;</span>);</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread.start();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.MILLISECONDS.sleep(<span class="number">20L</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;证据2收集完成....&quot;</span>);</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread1.start();</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.MILLISECONDS.sleep(<span class="number">20L</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;证据3收集完成...&quot;</span>);</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;收据收集未完成,无法提起申诉...&quot;</span>);</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        System.out.println(<span class="string">&quot;证据1、2、3收集完毕,可以提起了申诉了,这次要让让坏人被绳之以法....&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line"></span><br><span class="line">收据收集未完成,无法提起申诉...</span><br><span class="line">收集证据<span class="number">1</span></span><br><span class="line">收集证据<span class="number">2</span></span><br><span class="line">收集证据<span class="number">3</span></span><br><span class="line">证据收集完毕,可以提起了申诉了,这次要让让坏人被绳之以法....</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="源码浅析"><a href="#源码浅析" class="headerlink" title="源码浅析"></a>源码浅析</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造器，初始化计数值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CountDownLatch</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;count &lt; 0&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.sync = <span class="keyword">new</span> Sync(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 1、Sync继承AQS，重写tryAcquireShared和tryReleaseShared方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">4982264981922014374L</span>;</span><br><span class="line"></span><br><span class="line">        Sync(<span class="keyword">int</span> count) &#123;</span><br><span class="line">            setState(count);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getState();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取共享变量status status为0返回1，反之返回-1</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (getState() == <span class="number">0</span>) ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Decrement count; signal when transition to zero</span></span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="keyword">int</span> c = getState();</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">int</span> nextc = c - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (compareAndSetState(c, nextc))</span><br><span class="line">                    <span class="keyword">return</span> nextc == <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        sync.acquireSharedInterruptibly(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带超时的等待方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">await</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquireSharedNanos(<span class="number">1</span>, unit.toNanos(timeout));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// status = status - 1</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.releaseShared(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>CyclicBarrier</title>
    <url>/yq/CyclicBarrier/</url>
    <content><![CDATA[<p>参考链接 <a href="https://juejin.cn/post/6844903988349894669">https://juejin.cn/post/6844903988349894669</a></p>
]]></content>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/yq/Docker/</url>
    <content><![CDATA[<p>参考链接：<a href="https://www.runoob.com/docker/docker-tutorial.html">https://www.runoob.com/docker/docker-tutorial.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>DateUtils</title>
    <url>/yq/DateUtils/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shebao.dispatch.common.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.DateUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.time.*;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日期工具</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtils</span> <span class="keyword">extends</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">commons</span>.<span class="title">lang3</span>.<span class="title">time</span>.<span class="title">DateUtils</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TL_DF_DATE = <span class="string">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TL_DF_DATETIME = <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TL_DF_UTC = <span class="string">&quot;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSS&#x27;Z&#x27;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TL_DF_YYYY_DATETIME = <span class="string">&quot;yyyyMMddHHmmss&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] parsePatterns = &#123;<span class="string">&quot;yyyy-MM-dd&quot;</span>, <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>,</span><br><span class="line">            <span class="string">&quot;yyyy-MM-dd HH:mm&quot;</span>, <span class="string">&quot;yyyy-MM-dd HH&quot;</span>, <span class="string">&quot;yyyy-MM&quot;</span>, <span class="string">&quot;yyyy/MM/dd&quot;</span>, <span class="string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>,</span><br><span class="line">            <span class="string">&quot;yyyy/MM/dd HH:mm&quot;</span>, <span class="string">&quot;yyyy/MM/dd HH&quot;</span>, <span class="string">&quot;yyyy/MM&quot;</span>, <span class="string">&quot;yyyy.MM.dd&quot;</span>, <span class="string">&quot;yyyy.MM.dd HH:mm:ss&quot;</span>,</span><br><span class="line">            <span class="string">&quot;yyyy.MM.dd HH:mm&quot;</span>, <span class="string">&quot;yyyy.MM.dd HH&quot;</span>, <span class="string">&quot;yyyy.MM&quot;</span>, <span class="string">&quot;yyyy年MM月dd日&quot;</span>, <span class="string">&quot;yyyy年MM月dd日 HH时mm分ss秒&quot;</span>,</span><br><span class="line">            <span class="string">&quot;yyyy年MM月dd日 HH时mm分&quot;</span>, <span class="string">&quot;yyyy年MM月dd日 HH时&quot;</span>, <span class="string">&quot;yyyy年MM月&quot;</span>, <span class="string">&quot;yyyy&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Set&lt;String&gt; DATEFORMAT_SET = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">    	DATEFORMAT_SET.add(TL_DF_DATE);</span><br><span class="line">    	DATEFORMAT_SET.add(TL_DF_DATETIME);</span><br><span class="line">    	DATEFORMAT_SET.add(<span class="string">&quot;yyyy/MM/dd&quot;</span>);</span><br><span class="line">    	DATEFORMAT_SET.add(<span class="string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>);</span><br><span class="line">    	DATEFORMAT_SET.add(<span class="string">&quot;yyyyMMdd&quot;</span>);</span><br><span class="line">    	DATEFORMAT_SET.add(<span class="string">&quot;yyyyMMdd HH:mm:ss&quot;</span>);</span><br><span class="line">    	DATEFORMAT_SET.add(TL_DF_YYYY_DATETIME);</span><br><span class="line">    	DATEFORMAT_SET.add(TL_DF_UTC);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parseDateCommon</span><span class="params">(Object str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((str.toString().matches(<span class="string">&quot;^[0-9]*$&quot;</span>)) &amp;&amp; str.toString().length() &gt; <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Date(Long.parseLong(str.toString()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> parseDate(str.toString(), parsePatterns);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前时间戳, 秒级</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">currentTimeInSeconds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (System.currentTimeMillis()/<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formateToDateTimeNo</span><span class="params">(Date date)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> formatNullable(date, TL_DF_YYYY_DATETIME);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatTo</span><span class="params">(Date date, String fmt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> formatNullable(date, fmt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatToDate</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> formatNullable(date, TL_DF_DATE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatToDatetime</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> formatNullable(date, TL_DF_DATETIME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatToYmdDate</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> formatNullable(date, TL_DF_DATE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">currentAsDatetime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DATE_TIME_FORMATTER.format(LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据秒级时间戳获取Date对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timestampInSeconds</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">fromSeconds</span><span class="params">(Integer timestampInSeconds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(timestampInSeconds == <span class="keyword">null</span> || timestampInSeconds &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Date(Long.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Date(timestampInSeconds.longValue() * <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Date <span class="title">getDateFromUtcString</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getDateFormat(TL_DF_UTC).parse(str);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当天起始时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title">getDayStartTime</span><span class="params">(String params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(params)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Date date = parseDate(params);</span><br><span class="line">        <span class="keyword">if</span> (date != <span class="keyword">null</span>) &#123;</span><br><span class="line">            LocalDate localDate = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();</span><br><span class="line">            <span class="keyword">return</span> LocalDateTime.of(localDate, LocalTime.MIN).toInstant(ZoneOffset.of(<span class="string">&quot;+8&quot;</span>)).getEpochSecond();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当天结束时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title">getDayEndTime</span><span class="params">(String params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(params)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Date date = parseDate(params);</span><br><span class="line">        <span class="keyword">if</span> (date != <span class="keyword">null</span>) &#123;</span><br><span class="line">            LocalDate localDate = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();</span><br><span class="line">            <span class="keyword">return</span> LocalDateTime.of(localDate, LocalTime.MAX).toInstant(ZoneOffset.of(<span class="string">&quot;+8&quot;</span>)).getEpochSecond();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取本月第一天</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getCurrentMonthFirstDay</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.setTime(date);</span><br><span class="line">        calendar.set(Calendar.HOUR_OF_DAY, <span class="number">0</span>);</span><br><span class="line">        calendar.set(Calendar.MINUTE, <span class="number">0</span>);</span><br><span class="line">        calendar.set(Calendar.SECOND, <span class="number">0</span>);</span><br><span class="line">        calendar.set(Calendar.MILLISECOND, <span class="number">0</span>);</span><br><span class="line">        calendar.set(Calendar.DAY_OF_MONTH,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> calendar.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取上月最后天</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getPreviousMonthLastDay</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.clear();</span><br><span class="line">        calendar.setTime(date);</span><br><span class="line">        calendar.add(Calendar.MONTH,-<span class="number">1</span>);</span><br><span class="line">        calendar.set(Calendar.DAY_OF_MONTH,calendar.getActualMaximum(Calendar.DAY_OF_MONTH));</span><br><span class="line">        <span class="keyword">return</span> calendar.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前月最后天</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getCurrentMonthLastDay</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.clear();</span><br><span class="line">        calendar.setTime(date);</span><br><span class="line">        calendar.set(Calendar.DAY_OF_MONTH,calendar.getActualMaximum(Calendar.DAY_OF_MONTH));</span><br><span class="line">        <span class="keyword">return</span> calendar.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将date对象转换为秒级时间戳</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTimeInSeconds</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (date == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (date.getTime() / <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parseDate</span><span class="params">(String date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getDateFormat(TL_DF_DATE).parse(date);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从 yyyy/MM/dd 中提取时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parseDate</span><span class="params">(String date, String fmt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getDateFormat(fmt).parse(date);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parseDatetime</span><span class="params">(String date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getDateFormat(TL_DF_DATETIME).parse(date);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试用各种方式从字符串识别时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 日期字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 识别成功返回date对象, 失败返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">tryParseDate</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isBlank(str)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 尝试以各种格式获取</span></span><br><span class="line">        Date date;</span><br><span class="line">        <span class="keyword">for</span> (String fmt : DATEFORMAT_SET) &#123;</span><br><span class="line">            date = parseDate(str, fmt);</span><br><span class="line">            <span class="keyword">if</span>(date != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> date;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 尝试按excel时间戳获取</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">double</span> num = Double.parseDouble(str);</span><br><span class="line">            <span class="keyword">if</span>(DateUtil.isValidExcelDate(Double.valueOf(str))) &#123;</span><br><span class="line">                <span class="keyword">return</span> DateUtil.getJavaDate(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException ignored) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按格式返回date的格式化字符串, date为null 返回空字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fmt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">formatNullable</span><span class="params">(Date date, String fmt)</span> </span>&#123;</span><br><span class="line">        DateFormat formatter = getDateFormat(fmt);</span><br><span class="line">        <span class="keyword">if</span>(date == <span class="keyword">null</span> || date.getTime() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> formatter.format(date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回对应的DateFormat对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fmt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> DateFormat <span class="title">getDateFormat</span><span class="params">(String fmt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(fmt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算两个日期月份差</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceStart 开始日期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceEnd 截止日期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 差值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calcMonthDifference</span><span class="params">(Date sourceStart, Date sourceEnd)</span> </span>&#123;</span><br><span class="line">        Calendar start = Calendar.getInstance();</span><br><span class="line">        Calendar end = Calendar.getInstance();</span><br><span class="line">        start.setTime(sourceStart);</span><br><span class="line">        end.setTime(sourceEnd);</span><br><span class="line">        <span class="keyword">int</span> result = end.get(Calendar.MONTH) - start.get(Calendar.MONTH);</span><br><span class="line">        <span class="keyword">int</span> month = (end.get(Calendar.YEAR) - start.get(Calendar.YEAR)) * <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">return</span> month + result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算两个日期天数差</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceStart 开始日期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceEnd 截止日期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 差值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getDayDifference</span><span class="params">(Date sourceStart, Date sourceEnd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> dif = sourceEnd.getTime() - sourceStart.getTime();</span><br><span class="line">        <span class="keyword">long</span> day= dif /(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getDateAddDayDifference</span><span class="params">(Date source, <span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">        c.setTime(source);</span><br><span class="line">        c.add(Calendar.DAY_OF_MONTH, day);<span class="comment">// 今天+1天</span></span><br><span class="line">        Date dif = c.getTime();</span><br><span class="line">        <span class="keyword">return</span> dif;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 锁对象 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object lockObj = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 存放不同的日期模板格式的sdf的Map */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, ThreadLocal&lt;SimpleDateFormat&gt;&gt; sdfMap = <span class="keyword">new</span> HashMap&lt;String, ThreadLocal&lt;SimpleDateFormat&gt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String YYYY_MM = <span class="string">&quot;yyyy-MM&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String YYYY_MM_CHINESE = <span class="string">&quot;yyyy年MM月&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ron</span></span><br><span class="line"><span class="comment">     * 解决SimpleDateFormat静态化的坑</span></span><br><span class="line"><span class="comment">     * 返回一个ThreadLocal的sdf,每个线程只会new一次sdf</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> SimpleDateFormat <span class="title">getSimpleDateFormat</span><span class="params">(<span class="keyword">final</span> String pattern)</span> </span>&#123;</span><br><span class="line">        ThreadLocal&lt;SimpleDateFormat&gt; tl = sdfMap.get(pattern);</span><br><span class="line">        <span class="comment">// 双检锁是防止sdfMap这个单例被多次put重复的sdf</span></span><br><span class="line">        <span class="keyword">if</span> (tl == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lockObj) &#123;</span><br><span class="line">                tl = sdfMap.get(pattern);</span><br><span class="line">                <span class="keyword">if</span> (tl == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 使用ThreadLocal&lt;SimpleDateFormat&gt;替代原来直接new SimpleDateFormat</span></span><br><span class="line">                    tl = <span class="keyword">new</span> ThreadLocal&lt;SimpleDateFormat&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> SimpleDateFormat <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;thread: &quot;</span> + Thread.currentThread() + <span class="string">&quot; init pattern: &quot;</span> + pattern);</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(pattern);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;;</span><br><span class="line">                    <span class="comment">// 只有Map中还没有这个pattern的sdf才会生成新的sdf并放入map</span></span><br><span class="line">                    sdfMap.put(pattern, tl);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tl.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前日期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern 日期格式，如：yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDateStr</span><span class="params">(String pattern)</span> </span>&#123;</span><br><span class="line">        String date = getSimpleDateFormat(pattern).format(<span class="keyword">new</span> Date(System.currentTimeMillis()));</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Calendar time=Calendar.getInstance();</span><br><span class="line">        <span class="keyword">return</span> time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title">getTime</span><span class="params">(<span class="keyword">long</span> timeMillis)</span> </span>&#123;</span><br><span class="line">        Calendar time=getTime();</span><br><span class="line">        time.setTimeInMillis(timeMillis);</span><br><span class="line">        <span class="keyword">return</span> time;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getTime().getTime();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getDate</span><span class="params">(<span class="keyword">long</span> timeMillis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getTime(timeMillis).getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getYYYYMMDD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSimpleDateFormat(<span class="string">&quot;yyyyMMdd&quot;</span>).format(getDate());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getYYYYMMDD</span><span class="params">(<span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSimpleDateFormat(<span class="string">&quot;yyyyMMdd&quot;</span>).format(getDate(time));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getYYYYMMDD</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>==date ? <span class="string">&quot;&quot;</span> : getSimpleDateFormat(TL_DF_DATE).format(date);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getYYYYMMDDNullRetrunNoTimeLimit</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>==date ? <span class="string">&quot;无期限&quot;</span> : getSimpleDateFormat(TL_DF_DATE).format(date);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getHHmmss</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSimpleDateFormat(<span class="string">&quot;HHmmss&quot;</span>).format(getDate());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getYYYYMMDDHHmmss</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(date);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getYYYYMM</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSimpleDateFormat(<span class="string">&quot;yyyyMM&quot;</span>).format(getDate());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getYYYYMM</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(date == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        SimpleDateFormat YYYY_MM_FORMAT = <span class="keyword">new</span> SimpleDateFormat(YYYY_MM);</span><br><span class="line">        <span class="keyword">return</span> YYYY_MM_FORMAT.format(date);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getYYYYMMWithChinese</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(date == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        SimpleDateFormat YYYY_MM_FORMAT = <span class="keyword">new</span> SimpleDateFormat(YYYY_MM_CHINESE);</span><br><span class="line">        <span class="keyword">return</span> YYYY_MM_FORMAT.format(date);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getYYYYMM</span><span class="params">(<span class="keyword">long</span> timeMillis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSimpleDateFormat(<span class="string">&quot;yyyyMM&quot;</span>).format(getDate(timeMillis));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMMDD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSimpleDateFormat(<span class="string">&quot;MMdd&quot;</span>).format(getTime());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMMDD</span><span class="params">(<span class="keyword">long</span> timeMillis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSimpleDateFormat(<span class="string">&quot;MMdd&quot;</span>).format(getDate(timeMillis));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDD</span><span class="params">(<span class="keyword">long</span> timeMillis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSimpleDateFormat(<span class="string">&quot;dd&quot;</span>).format(getDate(timeMillis));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Dubbo</title>
    <url>/yq/Dubbo/</url>
    <content><![CDATA[<p>参考链接：<a href="https://blog.csdn.net/xishilife/article/details/119984710">https://blog.csdn.net/xishilife/article/details/119984710</a></p>
]]></content>
  </entry>
  <entry>
    <title>Eureka服务注册中心</title>
    <url>/yq/Eureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</url>
    <content><![CDATA[<h1 id="什么是-Eureka"><a href="#什么是-Eureka" class="headerlink" title="什么是 Eureka"></a>什么是 Eureka</h1><ul>
<li>Netflix 在涉及 Eureka 时，遵循的就是 API 原则.</li>
<li>Eureka 是 Netflix 的有个子模块，也是核心模块之一。Eureka 是基于 REST 的服务，用于定位服务，以实现云端中间件层服务发现和故障转移，服务注册与发现对于微服务来说是非常重要的，有了服务注册与发现，只需要使用服务的标识符，就可以访问到服务，而不需要修改服务调用的配置文件了，功能类似于 Dubbo 的注册中心，比如 Zookeeper.</li>
</ul>
<h1 id="原理理解"><a href="#原理理解" class="headerlink" title="原理理解"></a>原理理解</h1><h2 id="Eureka-基本的架构"><a href="#Eureka-基本的架构" class="headerlink" title="Eureka 基本的架构"></a>Eureka 基本的架构</h2><ul>
<li>Springcloud 封装了 Netflix 公司开发的 Eureka 模块来实现服务注册与发现 (对比 Zookeeper).</li>
<li>Eureka 采用了 C-S 的架构设计，EurekaServer 作为服务注册功能的服务器，他是服务注册中心.</li>
<li>而系统中的其他微服务，使用 Eureka 的客户端连接到 EurekaServer 并维持心跳连接。这样系统的维护人员就可以通过 EurekaServer 来监控系统中各个微服务是否正常运行，Springcloud 的一些其他模块 (比如 Zuul) 就可以通过 EurekaServer 来发现系统中的其他微服务，并执行相关的逻辑.</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1654349306168-180d0dd0-d158-4a37-8c37-ea4c72006b4f.png#clientId=ud9ebc272-e133-4&from=paste&id=ub0930d8f&name=image.png&originHeight=348&originWidth=710&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=34173&status=done&style=none&taskId=u4e4b146a-db7c-4526-a8f8-ff59e33f9d0&title=" alt="image.png"></p>
<ul>
<li>Eureka 包含两个组件：<strong>Eureka Server</strong> 和 <strong>Eureka Client</strong>.</li>
<li>Eureka Server 提供服务注册，各个节点启动后，会在 EurekaServer 中进行注册，这样 Eureka Server 中的服务注册表中将会储存所有可用服务节点的信息，服务节点的信息可以在界面中直观的看到.</li>
<li>Eureka Client 是一个 Java 客户端，用于简化 EurekaServer 的交互，客户端同时也具备一个内置的，使用轮询负载算法的负载均衡器。在应用启动后，将会向 EurekaServer 发送心跳 (默认周期为 30 秒) 。如果 Eureka Server 在多个心跳周期内没有接收到某个节点的心跳，EurekaServer 将会从服务注册表中把这个服务节点移除掉 (默认周期为 90s).</li>
</ul>
<h2 id="三大角色"><a href="#三大角色" class="headerlink" title="三大角色"></a>三大角色</h2><ul>
<li>Eureka Server：提供服务的注册与发现</li>
<li>Service Provider：服务生产方，将自身服务注册到 Eureka 中，从而使服务消费方能够找到</li>
<li>Service Consumer：服务消费方，从 Eureka 中获取注册服务列表，从而找到消费服务</li>
</ul>
<h1 id="EureKa-自我保护机制"><a href="#EureKa-自我保护机制" class="headerlink" title="EureKa 自我保护机制"></a>EureKa 自我保护机制</h1><p><strong>好死不如赖活着</strong><br>一句话总结就是：<strong>某时刻某一个微服务不可用，eureka 不会立即清理，依旧会对该微服务的信息进行保存！</strong><br>默认情况下，当 eureka server 在一定时间内没有收到实例的心跳，便会把该实例从注册表中删除（<strong>默认是 90 秒</strong>），但是，如果短时间内丢失大量的实例心跳，便会触发 eureka server 的自我保护机制，比如在开发测试时，需要频繁地重启微服务实例，但是我们很少会把 eureka server 一起重启（因为在开发过程中不会修改 eureka 注册中心），<strong>当一分钟内收到的心跳数大量减少时，会触发该保护机制</strong>。可以在 eureka 管理界面看到 Renews threshold 和 Renews(last min)，当后者（最后一分钟收到的心跳数）小于前者（心跳阈值）的时候，触发保护机制，会出现红色的警告：EMERGENCY!EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT.RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEGING EXPIRED JUST TO BE SAFE.<br>从警告中可以看到，eureka 认为虽然收不到实例的心跳，但它认为实例还是健康的，eureka 会保护这些实例，不会把它们从注册表中删掉。<br>该保护机制的目的是避免网络连接故障，在发生网络故障时，微服务和注册中心之间无法正常通信，但服务本身是健康的，不应该注销该服务，如果 eureka 因网络故障而把微服务误删了，那即使网络恢复了，该微服务也不会重新注册到 eureka server 了，<strong>因为只有在微服务启动的时候才会发起注册请求，后面只会发送心跳和服务列表请求</strong>，这样的话，该实例虽然是运行着，但永远不会被其它服务所感知。所以，eureka server 在短时间内丢失过多的客户端心跳时，会进入自我保护模式，该模式下，eureka 会保护注册表中的信息，不再注销任何微服务，当网络故障恢复后，eureka 会自动退出保护模式。自我保护模式可以让集群更加健壮。<br>但是我们在开发测试阶段，需要频繁地重启发布，如果触发了保护机制，则旧的服务实例没有被删除，这时请求有可能跑到旧的实例中，而该实例已经关闭了，这就导致请求错误，影响开发测试。所以，在开发测试阶段，我们可以把自我保护模式关闭，只需在 eureka server 配置文件中加上如下配置即可：eureka.server.enable-self-preservation=false【不推荐关闭自我保护机制】<br>详细内容可以参考下这篇博客内容：<a href="https://blog.csdn.net/wudiyong22/article/details/80827594">https://blog.csdn.net/wudiyong22/article/details/80827594</a></p>
<p>#####</p>
]]></content>
  </entry>
  <entry>
    <title>ElasticSearch</title>
    <url>/yq/ElasticSearch/</url>
    <content><![CDATA[<h1 id="linux-安装-ES"><a href="#linux-安装-ES" class="headerlink" title="linux 安装 ES"></a>linux 安装 ES</h1><p>1.下载安装包 地址：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.16.2-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure>

<p>2.解压</p>
<blockquote>
<h1 id="上传到-usr-local-es-目录下，执行解压命令"><a href="#上传到-usr-local-es-目录下，执行解压命令" class="headerlink" title="上传到/usr/local/es 目录下，执行解压命令"></a>上传到/usr/local/es 目录下，执行解压命令</h1><p>tar -zxvf elasticsearch-6.4.3.tar.gz</p>
</blockquote>
<p>3.es 不能用 root 用户启动，所以在这里建立新的用户，并/usr/local/es 文件夹的权限赋给创建的用户，具体如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建新用户 es</span></span><br><span class="line">useradd es</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给es创建密码</span></span><br><span class="line">passwd es</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给es赋权</span></span><br><span class="line">chmod -R es /usr/<span class="built_in">local</span>/es</span><br><span class="line"></span><br><span class="line">-R:要授权的目录及其下所有文件和目录</span><br><span class="line">es:要给授权的用户</span><br><span class="line">/usr/<span class="built_in">local</span>/es:要授权的目录</span><br></pre></td></tr></table></figure>

<p>4.进入解压后的目录下的 bin 文件下，启动 es</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 前台启动，Ctrl c后会退出</span></span><br><span class="line">./elasticsearch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后台启动方式1</span></span><br><span class="line">./elasticsearch -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后台方式启动方式2</span></span><br><span class="line">nohup ./elasticsearch &amp;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>5.启动完成，验证是否成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 验证方式1：通过curl方式查看，命令如下</span></span><br><span class="line">curl 0.0.0.0:9200</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证方式2：查看9200端口号是否有进程启动</span></span><br><span class="line">lsof -i:9200</span><br><span class="line"></span><br><span class="line"><span class="comment"># 附：杀死进程命令</span></span><br><span class="line"><span class="built_in">kill</span> -9 PID</span><br></pre></td></tr></table></figure>

<p><strong>解决外网通过 ip 访问不上的问题</strong></p>
<p>核心配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2022.8.19 add</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">my-application</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-1</span></span><br><span class="line"><span class="attr">cluster.initial_master_nodes:</span> [<span class="string">&quot;node-1&quot;</span>, <span class="string">&quot;node-2&quot;</span>]</span><br><span class="line"><span class="comment"># 解决exception during geoip databases update报错，原因：ES默认会去官网下载最新的GEO信息，公司内网server一般和外网不通或者网速慢，所以会报错；</span></span><br><span class="line"><span class="attr">ingest.geoip.downloader.enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Flowable工作流引擎</title>
    <url>/yq/Flowable%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<p>参考链接：<a href="http://blog.itpub.net/69961615/viewspace-2715439/">http://blog.itpub.net/69961615/viewspace-2715439/</a></p>
<p>官方 api:<a href="https://www.flowable.com/open-source/docs/bpmn/ch15-REST/">https://www.flowable.com/open-source/docs/bpmn/ch15-REST/</a></p>
]]></content>
  </entry>
  <entry>
    <title>Excel表格常用操作</title>
    <url>/yq/Excel%E8%A1%A8%E6%A0%BC%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p><strong>常用例子（建议从例子中入手）</strong><br><a href="https://www.yuque.com/attachments/yuque/0/2022/xlsx/22422342/1650978512861-084e3413-86d3-436c-9b55-bff5236bb5ed.xlsx?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2022/xlsx/22422342/1650978512861-084e3413-86d3-436c-9b55-bff5236bb5ed.xlsx%22,%22name%22:%22%E5%B8%B8%E7%94%A8%E4%BE%8B%E5%AD%90.xlsx%22,%22size%22:11252,%22type%22:%22application/vnd.openxmlformats-officedocument.spreadsheetml.sheet%22,%22ext%22:%22xlsx%22,%22source%22:%22%22,%22status%22:%22done%22,%22mode%22:%22title%22,%22download%22:true,%22taskId%22:%22u40bf5062-8c53-4bba-9d6f-e7092bb5c6a%22,%22taskType%22:%22upload%22,%22id%22:%22u35268699%22,%22card%22:%22file%22%7D">常用例子.xlsx</a></p>
<h2 id="一、查找数据的交集"><a href="#一、查找数据的交集" class="headerlink" title="一、查找数据的交集"></a>一、查找数据的交集</h2><h3 id="方案一：vlookup-函数-俗称的“V”"><a href="#方案一：vlookup-函数-俗称的“V”" class="headerlink" title="方案一：vlookup 函数 (俗称的“V”)"></a>方案一：vlookup 函数 (俗称的“V”)</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1650978590518-6c801b37-847b-4190-b852-d912bf9222f9.png#clientId=uf5b7367d-92d0-4&from=paste&height=55&id=u8707a710&name=image.png&originHeight=110&originWidth=654&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=16879&status=done&style=none&taskId=ude81792e-5bb6-49fd-8890-e4b485ff9ef&title=&width=327" alt="image.png"><br><strong>函数参数说明</strong><br><strong>查找值</strong>：该参数为需要依据的数据，就是表一中有，在表二中要根据这个数据来查找其他值（例如本例中的学号）<br><strong>数据表</strong>：要去查找的数据集（例如本例的表 2）<br><strong>列序数</strong>：数据表中从左往右的列序数，代表的是你要输出的数据在数据表的第几列，例如本例中你想要输出性别则填 2，地址则填 3<br><strong>匹配条件</strong>：false:精确匹配；true 为模糊匹配。一般我们都是用的精确匹配。</p>
<p>例子：从表 2 中找到表 1 人员对应的性别和地址。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1650978606085-c5088393-cd06-4275-9d00-dd4e7839c401.png#clientId=uf5b7367d-92d0-4&from=paste&height=179&id=u7bad8fd3&name=image.png&originHeight=358&originWidth=1246&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=50982&status=done&style=none&taskId=ua709b15e-be30-4b34-bf29-34d442b8ddd&title=&width=623" alt="image.png"></p>
<p><strong>步骤</strong><br><strong>1、</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1650978620212-926cbc46-b64a-4bbc-a07e-ccfa719f516f.png#clientId=uf5b7367d-92d0-4&from=paste&height=169&id=udad84f43&name=image.png&originHeight=338&originWidth=1180&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=57124&status=done&style=none&taskId=ufc45217d-14c2-4d24-8098-08dc5af7630&title=&width=590" alt="image.png"><br>2、<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1650978632919-6f55a0de-6fda-469f-b5f6-bf64ab63dda1.png#clientId=uf5b7367d-92d0-4&from=paste&height=210&id=uc64af81f&name=image.png&originHeight=420&originWidth=1270&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=89047&status=done&style=none&taskId=uec3e085a-c0ec-4973-9d52-892de2b9782&title=&width=635" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1650978653564-2be61bde-f88c-45e1-b189-52b8e356f6f0.png#clientId=uf5b7367d-92d0-4&from=paste&height=173&id=u6370b92f&name=image.png&originHeight=346&originWidth=1182&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=49412&status=done&style=none&taskId=uc2de7f9c-dde4-4e93-b264-3a3447a8a5b&title=&width=591" alt="image.png"></p>
<p>3、双击<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1650978664163-dae0e7a7-0902-42bf-9f5a-a44ee4f9671f.png#clientId=uf5b7367d-92d0-4&from=paste&height=154&id=ubba7a1be&name=image.png&originHeight=308&originWidth=1304&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=56384&status=done&style=none&taskId=ud34ffab5-4781-4163-aec0-99add9edf81&title=&width=652" alt="image.png"></p>
<p>4、获得每个人员的性别<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1650978674597-3aaf003c-b6a3-436a-9fdf-6db4da50057b.png#clientId=uf5b7367d-92d0-4&from=paste&height=153&id=u259dad24&name=image.png&originHeight=306&originWidth=1208&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=43546&status=done&style=none&taskId=u7935ca4d-bc33-4f41-bc70-ccc5d0e2396&title=&width=604" alt="image.png"></p>
<p>5、获得人员地址同获得性别一样</p>
<h3 id="方案二：if-函数和-countIf-函数配合使用"><a href="#方案二：if-函数和-countIf-函数配合使用" class="headerlink" title="方案二：if 函数和 countIf 函数配合使用"></a>方案二：if 函数和 countIf 函数配合使用</h3><p>例子：<br>要求：从下表中找出目标 ID 的人员数据。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1650978687255-db7c549c-5e6b-41ca-8b20-e48ebac56ac7.png#clientId=uf5b7367d-92d0-4&from=paste&height=178&id=u0edce0f8&name=image.png&originHeight=356&originWidth=1030&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=43074&status=done&style=none&taskId=u06ae3a1e-50a2-407a-9844-f2f51a96d0e&title=&width=515" alt="image.png"></p>
<p>步骤<br>1、身份证号后添加一列，命名 flag。</p>
<p>2、利用 if 和 countIf 函数，如下图<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1650978698630-91fa0887-c89a-47e6-8995-7ad8f0d961ee.png#clientId=uf5b7367d-92d0-4&from=paste&height=220&id=u9783e565&name=image.png&originHeight=440&originWidth=1062&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=54531&status=done&style=none&taskId=u0213ae57-8ae3-459c-97c2-a010748a2e0&title=&width=531" alt="image.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1650978713627-41cbab55-2b0c-43c7-8e77-5e6d9c8c64b3.png#clientId=uf5b7367d-92d0-4&from=paste&height=176&id=u49843f48&name=image.png&originHeight=352&originWidth=908&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=41016&status=done&style=none&taskId=u17ff3fed-aab0-42a1-9d2b-58f5cb09467&title=&width=454" alt="image.png"></p>
<p><strong>=IF(COUNTIF(A:A,F2)&gt;0,1,0) 含义：如果 f2 单元格（对应图中目标 ID=9）的值在 A 列（对应图中人员 id 列）存在，则 flag 列返回 1，否则返回 0（类似 Java 的三目运算，只是用逗号代替了冒号）。</strong></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1650978755687-16993278-9d35-4eb2-8578-32107a3b2428.png#clientId=uf5b7367d-92d0-4&from=paste&height=222&id=uf189227a&name=image.png&originHeight=444&originWidth=1148&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=64374&status=done&style=none&taskId=u85ca201e-04c1-4665-9ec1-c8c09ad7570&title=&width=574" alt="image.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1650978770188-5f961ea0-1d9f-4bd0-903f-9bc73ef23259.png#clientId=uf5b7367d-92d0-4&from=paste&height=171&id=u118610a1&name=image.png&originHeight=342&originWidth=926&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=40483&status=done&style=none&taskId=uc156d5c6-ce88-4e0c-9e86-233c8733c3f&title=&width=463" alt="image.png"></p>
<p>公式确认后，双击第一条生成的 flag 值，即会把剩余的 flag 值填充，为 1 说明人员 id 在目标 id 中，为 0 则说明人员 id 不在目标 id 中，通过筛选 flag = 1 的值，即可获得存在于目标 id 的人员数据。</p>
<h2 id="二、批量拼接-sql"><a href="#二、批量拼接-sql" class="headerlink" title="二、批量拼接 sql"></a>二、批量拼接 sql</h2><p>场景：<br>有时候产品会给我们一个很大数据量的 excel 表格，让我们根据表格内清洗数据，如果一条一条的编写 sql 是不太现实的，这个时候我们可以通过 Excel 的拼接功能，快速实现批量的 SQL。</p>
<p>例子：根据 id 更新姓名和年龄。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1650978782111-4bc3934e-fce5-4087-bbfc-702fb0d8d81c.png#clientId=uf5b7367d-92d0-4&from=paste&height=86&id=udcd38e7b&name=image.png&originHeight=172&originWidth=332&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=10702&status=done&style=none&taskId=uc1094449-2512-43df-ade8-1422f43095b&title=&width=166" alt="image.png"></p>
<p>步骤<br>1、先把 sql 模板给写出来<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1650978794958-ee364d03-f532-42cc-b670-3876f1a1b746.png#clientId=uf5b7367d-92d0-4&from=paste&height=133&id=ue6c5a706&name=image.png&originHeight=266&originWidth=1029&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=28092&status=done&style=none&taskId=u5dc60afd-8414-4582-a67a-ae8b60ef65e&title=&width=514.5" alt="image.png"><br>2、另起一列作为最终 sql 的实现<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1650978807974-18bf97e5-a634-475f-b041-0a3c3eddc621.png#clientId=uf5b7367d-92d0-4&from=paste&height=147&id=uce1cfc12&name=image.png&originHeight=293&originWidth=1243&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=35198&status=done&style=none&taskId=u6579d6c4-79fe-4821-adba-01fbce5ad50&title=&width=621.5" alt="image.png"><br>回车<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1650978819412-c42dc4c3-633a-48c4-abd9-082db4c9fdcc.png#clientId=uf5b7367d-92d0-4&from=paste&height=155&id=uaf361cd5&name=image.png&originHeight=310&originWidth=1644&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=36395&status=done&style=none&taskId=ufd82afd2-ef4d-48dd-90f6-777cd4c2201&title=&width=822" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1650978830240-996eb7f4-45c8-4647-8509-ccd7c5d38031.png#clientId=uf5b7367d-92d0-4&from=paste&height=92&id=ud805dce7&name=image.png&originHeight=184&originWidth=1509&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=29027&status=done&style=none&taskId=u81b6b5c9-3f45-4c09-a985-b578c9676db&title=&width=754.5" alt="image.png"></p>
<p>##</p>
<p>三、时间格式化</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">=TEXT(C2,<span class="string">&quot;yyyy-mm-dd&quot;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Git工具</title>
    <url>/yq/Git%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Google EventBus（事件总线）</title>
    <url>/yq/Google%20EventBus%EF%BC%88%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF%EF%BC%89/</url>
    <content><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p><a href="https://github.com/greenrobot/EventBus">https://github.com/greenrobot/EventBus</a><br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1652600058972-245ee3b0-33d7-4706-84ac-8b2b3a9e9080.png#clientId=uf6fc35c4-008e-4&from=paste&id=uc72a07ef&name=image.png&originHeight=479&originWidth=1280&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=48762&status=done&style=none&taskId=uf216fe86-dd64-4281-82cc-95093a7a832&title=" alt="image.png"></p>
<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p>业务数据变更与日志记录的解耦</p>
]]></content>
  </entry>
  <entry>
    <title>Happens-Before原则</title>
    <url>/yq/Happens-Before%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<p>参考链接 <a href="https://cloud.tencent.com/developer/article/1734515">https://cloud.tencent.com/developer/article/1734515</a></p>
]]></content>
  </entry>
  <entry>
    <title>Golang</title>
    <url>/yq/Golang/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>HashMap底层实现原理</title>
    <url>/yq/HashMap%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/22422342/1656433338955-d213b44f-c8e6-4491-b35a-d56cb103ee79.jpeg#clientId=u8339e564-1ffb-4&from=paste&id=uc590756a&originHeight=1684&originWidth=1191&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&taskId=ua059d5ac-5dda-452f-9fc4-30af393a202&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/22422342/1656433351279-82f38613-bd1a-462d-9f40-8277dc3bf3af.jpeg#clientId=u8339e564-1ffb-4&from=paste&id=u6a21b07a&originHeight=1684&originWidth=1191&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&taskId=ue6497123-2532-49bd-b3c6-5b1a322eb7c&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/22422342/1656433364372-cbdf166e-b6a2-482b-985d-30f6ad77ad9d.jpeg#clientId=u8339e564-1ffb-4&from=paste&id=ub6a6b2af&originHeight=1684&originWidth=1191&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&taskId=ua93d62d3-c8fd-40a3-825f-b85d31762b0&title="></p>
<h1 id="java8-版本源码"><a href="#java8-版本源码" class="headerlink" title="java8 版本源码"></a>java8 版本源码</h1>]]></content>
  </entry>
  <entry>
    <title>Grafana</title>
    <url>/yq/Grafana/</url>
    <content><![CDATA[<p>参考链接：<a href="https://blog.csdn.net/m0_64299081/article/details/121769528">https://blog.csdn.net/m0_64299081/article/details/121769528</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hippo4j</title>
    <url>/yq/Hippo4j/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Hystrix：服务熔断</title>
    <url>/yq/Hystrix%EF%BC%9A%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD/</url>
    <content><![CDATA[<h1 id="分布式系统面临的问题"><a href="#分布式系统面临的问题" class="headerlink" title="分布式系统面临的问题"></a>分布式系统面临的问题</h1><p>复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免失败！</p>
<h1 id="服务雪崩"><a href="#服务雪崩" class="headerlink" title="服务雪崩"></a>服务雪崩</h1><p>多个微服务之间调用的时候，假设微服务 A 调用微服务 B 和微服务 C，微服务 B 和微服务 C 又调用其他的微服务，这就是所谓的“扇出”，如果扇出的链路上<strong>某个微服务的调用响应时间过长，或者不可用</strong>，对微服务 A 的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1654351530266-2f732998-8a30-4393-a06e-28e295ccb6c3.png#clientId=u8f87fd90-b0c1-4&from=paste&id=u718e3d0d&name=image.png&originHeight=431&originWidth=587&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=96472&status=done&style=none&taskId=ueaa305d1-1e09-4767-bf70-8426b02d968&title=" alt="image.png"><br>对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几十秒内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障，<strong>这些都表示需要对故障和延迟进行隔离和管理，以达到单个依赖关系的失败而不影响整个应用程序或系统运行</strong>。<br>我们需要，<strong>弃车保帅</strong>！</p>
<h1 id="什么是-Hystrix？"><a href="#什么是-Hystrix？" class="headerlink" title="什么是 Hystrix？"></a>什么是 Hystrix？</h1><p><strong>Hystrix</strong>是一个应用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时，异常等，<strong>Hystrix</strong> 能够保证在一个依赖出问题的情况下，不会导致整个体系服务失败，避免级联故障，以提高分布式系统的弹性。<br>“<strong>断路器</strong>”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控 (类似熔断保险丝) ，<strong>向调用方返回一个服务预期的，可处理的备选响应 (FallBack) ，而不是长时间的等待或者抛出调用方法无法处理的异常，这样就可以保证了服务调用方的线程不会被长时间，不必要的占用</strong>，从而避免了故障在分布式系统中的蔓延，乃至雪崩。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1654351530358-d4cf2df6-70d2-46ac-b248-ddd439045c3f.png#clientId=u8f87fd90-b0c1-4&from=paste&id=u06797f4a&name=image.png&originHeight=397&originWidth=614&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=92805&status=done&style=none&taskId=u99e917a9-4749-4d9d-a4a7-3d3658acfb3&title=" alt="image.png"></p>
<h1 id="Hystrix-能干嘛？"><a href="#Hystrix-能干嘛？" class="headerlink" title="Hystrix 能干嘛？"></a>Hystrix 能干嘛？</h1><ul>
<li>服务降级</li>
<li>服务熔断</li>
<li>服务限流</li>
<li>接近实时的监控</li>
<li>…</li>
</ul>
<p>当一切正常时，请求流可以如下所示：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1654351530226-5de32f2f-22ec-44ed-9d4e-1f9500cbf11e.png#clientId=u8f87fd90-b0c1-4&from=paste&id=u5774f836&originHeight=582&originWidth=640&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&taskId=u5090d28d-9c25-4755-9d0d-0489860913f&title="><br>当许多后端系统中有一个潜在阻塞服务时，它可以阻止整个用户请求：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1654351530209-b4d35bc7-55ee-4de6-a018-a3ab2439c0ed.png#clientId=u8f87fd90-b0c1-4&from=paste&id=u5f56885e&originHeight=582&originWidth=640&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&taskId=u3013f63e-f1e5-4706-ae1c-4633ba60b16&title="><br>随着大容量通信量的增加，单个后端依赖项的潜在性会导致所有服务器上的所有资源在几秒钟内饱和。<br>应用程序中通过网络或客户端库可能导致网络请求的每个点都是潜在故障的来源。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，从而备份队列、线程和其他系统资源，从而导致更多跨系统的级联故障。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1654351530278-a71e9d39-893f-4d6f-9d79-f88a4761d84b.png#clientId=u8f87fd90-b0c1-4&from=paste&id=u81b5c46f&originHeight=583&originWidth=640&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&taskId=u563e53fe-8a08-402d-95fc-543a01c6aae&title="><br>当使用<strong>Hystrix</strong>包装每个基础依赖项时，上面的图表中所示的体系结构会发生类似于以下关系图的变化。<strong>每个依赖项是相互隔离的</strong>，限制在延迟发生时它可以填充的资源中，并包含在回退逻辑中，该逻辑决定在依赖项中发生任何类型的故障时要做出什么样的响应：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1654351530888-e9a4a6a6-6a65-410b-8abc-5acf9ae2d2f5.png#clientId=u8f87fd90-b0c1-4&from=paste&id=uca407b3a&name=image.png&originHeight=869&originWidth=640&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=203183&status=done&style=none&taskId=uc4092f78-fd66-4d50-8549-2b78e61b785&title=" alt="image.png"><br><strong>官网资料</strong>：<a href="https://github.com/Netflix/Hystrix/wiki">https://github.com/Netflix/Hystrix/wiki</a></p>
<h1 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h1><h5 id="什么是服务熔断"><a href="#什么是服务熔断" class="headerlink" title="什么是服务熔断?"></a>什么是服务熔断?</h5><p><strong>熔断机制是赌赢雪崩效应的一种微服务链路保护机制</strong>。<br>当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，<strong>进而熔断该节点微服务的调用，快速返回错误的响应信息</strong>。检测到该节点微服务调用响应正常后恢复调用链路。在 SpringCloud 框架里熔断机制通过 Hystrix 实现。Hystrix 会监控微服务间调用的状况，当失败的调用到一定阀值缺省是<strong>5 秒内 20 次调用失败，就会启动熔断机制</strong>。熔断机制的注解是：<a href="https://github.com/HystrixCommand">@HystrixCommand</a>。<br>服务熔断解决如下问题：</p>
<ul>
<li>当所依赖的对象不稳定时，能够起到快速失败的目的；</li>
<li>快速失败后，能够根据一定的算法动态试探所依赖对象是否恢复。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Http和Https</title>
    <url>/yq/Http%E5%92%8CHttps/</url>
    <content><![CDATA[<p>参考链接 <a href="https://network.51cto.com/article/701195.html">https://network.51cto.com/article/701195.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>IO模型</title>
    <url>/yq/IO%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<p>转自</p>
<h1 id="BIO-同步阻塞-IO-模型"><a href="#BIO-同步阻塞-IO-模型" class="headerlink" title="BIO-同步阻塞 IO 模型"></a>BIO-同步阻塞 IO 模型</h1><p>同步阻塞 IO 模型中，应用程序发起 read 调用后，会一直阻塞，直到内核把数据拷贝到用户空间。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1657696748226-3a8d40bb-3374-46da-acb8-7931f3086a92.png#clientId=udd05f03f-6b0d-4&from=paste&id=uf68630bb&originHeight=658&originWidth=590&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&taskId=uc5f6aa61-0166-4034-a7da-aa7022a613e&title="><br>在客户端连接数量不高的情况下，是没问题的。但是，当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的。因此，我们需要一种更高效的 I/O 处理模型来应对更高的并发量。</p>
<h1 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h1><p>Java 中的 NIO 于 Java 1.4 中引入，对应 java.nio 包，提供了 Channel , Selector，Buffer 等抽象。NIO 中的 N 可以理解为 Non-blocking，不单纯是 New。它是支持面向缓冲的，基于通道的 I/O 操作方法。 对于高负载、高并发的（网络）应用，应使用 NIO 。<br>Java 中的 NIO 可以看作是 <strong>I/O 多路复用模型</strong>。也有很多人认为，Java 中的 NIO 属于同步非阻塞 IO 模型。<br>跟着我的思路往下看看，相信你会得到答案！<br>我们先来看看 <strong>同步非阻塞 IO 模型</strong>。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1657696856321-ac738e4e-297f-4753-a529-b16330855021.png#clientId=udd05f03f-6b0d-4&from=paste&id=u8102b3ef&originHeight=664&originWidth=578&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&taskId=u231793d7-90b5-420a-9fd9-6235a6f5402&title="><br>同步非阻塞 IO 模型中，应用程序会一直发起 read 调用，等待数据从内核空间拷贝到用户空间的这段时间里，线程依然是阻塞的，直到在内核把数据拷贝到用户空间。<br>相比于同步阻塞 IO 模型，同步非阻塞 IO 模型确实有了很大改进。通过轮询操作，避免了一直阻塞。<br>但是，这种 IO 模型同样存在问题：<strong>应用程序不断进行 I/O 系统调用轮询数据是否已经准备好的过程是十分消耗 CPU 资源的。</strong><br>这个时候，<strong>I/O 多路复用模型</strong> 就上场了。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1657696886741-f749fa71-238d-434c-8b24-5fb88ef419bc.png#clientId=udd05f03f-6b0d-4&from=paste&id=u3e9a08ca&originHeight=570&originWidth=588&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&taskId=ud5a50f10-0646-4f2d-9882-8e3b48e1f27&title="><br>IO 多路复用模型中，线程首先发起 select 调用，询问内核数据是否准备就绪，等内核把数据准备好了，用户线程再发起 read 调用。read 调用的过程（数据从内核空间 -&gt; 用户空间）还是阻塞的。<br>目前支持 IO 多路复用的系统调用，有 select，epoll 等等。select 系统调用，目前几乎在所有的操作系统上都有支持。</p>
<ul>
<li><strong>select 调用</strong> ：内核提供的系统调用，它支持一次查询多个系统调用的可用状态。几乎所有的操作系统都支持。</li>
<li><strong>epoll 调用</strong> ：linux 2.6 内核，属于 select 调用的增强版本，优化了 IO 的执行效率。</li>
</ul>
<p><strong>IO 多路复用模型，通过减少无效的系统调用，减少了对 CPU 资源的消耗。</strong><br>Java 中的 NIO ，有一个非常重要的<strong>选择器 ( Selector )</strong> 的概念，也可以被称为 <strong>多路复用器</strong>。通过它，只需要一个线程便可以管理多个客户端连接。当客户端数据到了之后，才会为其服务。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1657697367443-1584faff-f835-4fc7-a62b-e5bf10fb4a37.png#clientId=u01d33b19-140f-4&from=paste&id=ue2495f08&originHeight=1686&originWidth=2384&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&taskId=u6b23bc7b-973e-4bbf-887d-a64dd26e672&title="></p>
<h1 id="AIO-异步-IO-模型"><a href="#AIO-异步-IO-模型" class="headerlink" title="AIO-异步 IO 模型"></a>AIO-异步 IO 模型</h1><p>AIO 也就是 NIO 2。Java 7 中引入了 NIO 的改进版 NIO 2,它是异步 IO 模型。<br>异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1657697145836-f52f5018-1fb8-4d0c-8f30-cdcc8baeb4e7.png#clientId=udd05f03f-6b0d-4&from=paste&id=ua7f587b5&originHeight=660&originWidth=570&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&taskId=u3fd6f67d-9da4-41d3-90fb-70c1894ea19&title="><br>目前来说 AIO 的应用还不是很广泛。Netty 之前也尝试使用过 AIO，不过又放弃了。这是因为，Netty 使用了 AIO 之后，在 Linux 系统上的性能并没有多少提升。<br>最后，来一张图，简单总结一下 Java 中的 BIO、NIO、AIO。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1657697185902-00bf41f3-23fd-4389-897c-c49981350aa3.png#clientId=udd05f03f-6b0d-4&from=paste&id=u340bef1b&originHeight=1124&originWidth=1184&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&taskId=u0c231e84-f714-48f9-b5d2-c6a35fefa23&title="></p>
]]></content>
  </entry>
  <entry>
    <title>Integer</title>
    <url>/yq/Integer/</url>
    <content><![CDATA[<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i1 = <span class="number">33</span>; <span class="comment">// 装箱，会调用valueOf方法</span></span><br><span class="line">Integer i2 = <span class="number">33</span>;</span><br><span class="line">System.out.println(i1 == i2);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">Integer i3 = <span class="number">129</span>;</span><br><span class="line">Integer i4 = <span class="number">129</span>;</span><br><span class="line">System.out.println(i3 == i4); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>Integer i1 = 33 进行了装箱，因为值在 IntegerCache.low 和 IntegerCache.high 之间，直接使用的是缓存机制里常量池的值 IntegerCache.cache[i + (-IntegerCache.low)]</p>
<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// high value may be configured by property</span></span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="非常用方法"><a href="#非常用方法" class="headerlink" title="非常用方法"></a>非常用方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 16进制转10进制</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseInt</span><span class="params">(String s, <span class="keyword">int</span> radix)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> NumberFormatException</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 进制转换方法</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> n </span>= <span class="number">18</span>;</span><br><span class="line">Integer.toHexString(n);</span><br><span class="line">System.out.println(n + <span class="string">&quot;的二进制是:&quot;</span> + Integer.toBinaryString(n));</span><br><span class="line">System.out.println(n + <span class="string">&quot;的八进制是:&quot;</span> + Integer.toOctalString(n));</span><br><span class="line">System.out.println(n + <span class="string">&quot;的十六进制是:&quot;</span> + Integer.toHexString(n));</span><br><span class="line">System.out.println(n + <span class="string">&quot;的三进制是:&quot;</span> + Integer.toString(n, <span class="number">3</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>IO流</title>
    <url>/yq/IO%E6%B5%81/</url>
    <content><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1656549287183-13790f90-111e-4850-94fc-f0a400181b82.png#clientId=uea08b81a-0f3a-4&from=paste&id=ua41e04c6&originHeight=1080&originWidth=720&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&taskId=u08c03071-441f-4684-ab7b-d43a5e09213&title="></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1656549302616-ada3590b-98f4-40b8-aeaf-3b5a144b79d5.png#clientId=uea08b81a-0f3a-4&from=paste&id=u8a39442a&originHeight=535&originWidth=720&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&taskId=u6e0e4f84-aa55-40d5-86d9-e37590fd910&title="></p>
]]></content>
  </entry>
  <entry>
    <title>Java处理文档</title>
    <url>/yq/Java%E5%A4%84%E7%90%86%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>JVM相关</title>
    <url>/yq/JVM%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<p>参考链接：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/22422342/1657191673286-feadca1f-3e20-4a6c-b2b1-7f36e2cf160f.jpeg"></p>
]]></content>
  </entry>
  <entry>
    <title>Java8常用语法</title>
    <url>/yq/Java8%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="stream-流实现分页"><a href="#stream-流实现分页" class="headerlink" title="stream 流实现分页"></a>stream 流实现分页</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分页例子</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pageByStream</span><span class="params">(List&lt;Object&gt; codeList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pageSize = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> totalCount = codeList.size();</span><br><span class="line">        <span class="keyword">int</span> totalPage = totalCount % pageSize == <span class="number">0</span> ? totalCount / pageSize : totalCount / pageSize + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; totalPage; i++) &#123;</span><br><span class="line">            List&lt;Object&gt; pageCodeList = codeList.stream().skip(i * pageSize).limit(pageSize).collect(Collectors.toList());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="toMap"><a href="#toMap" class="headerlink" title="toMap"></a>toMap</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Long, ContractDetail&gt; contractDetailMap = contractDetailList.stream().collect(Collectors.toMap(ContractDetail::getContractId, Function.identity(), (v1, v2) -&gt; v1));</span><br></pre></td></tr></table></figure>

<h1 id="groupBy"><a href="#groupBy" class="headerlink" title="groupBy"></a>groupBy</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Long, List&lt;QueryPeopleReturnVo&gt;&gt; peopleVoMap = peopleReturnVos.stream().collect(Collectors.groupingBy(QueryPeopleReturnVo::getCustomerCode));</span><br></pre></td></tr></table></figure>

<h1 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;AddContractDTO&gt; addContractVOList = ticketBatchAddContractVOList.stream()</span><br><span class="line">                .map(BatchAddContract::getContractVoList)</span><br><span class="line">                .flatMap(Collection::stream)</span><br><span class="line">                .filter(contractVO -&gt; CommonConstants.RETURN_CODE_SUCCESS == contractVO.getResultCode())</span><br><span class="line">                .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Java对map集合排序</title>
    <url>/yq/Java%E5%AF%B9map%E9%9B%86%E5%90%88%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="对-key-排序"><a href="#对-key-排序" class="headerlink" title="对 key 排序"></a>对 key 排序</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对 map 集合按照key排序的方式来进行排序打印</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;99&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;53&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;59&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;ca&quot;</span>,<span class="string">&quot;51&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;bw&quot;</span>,<span class="string">&quot;52&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String,String&gt; treeMap = <span class="keyword">new</span> TreeMap&lt;&gt;(<span class="keyword">new</span> MyComparator());</span><br><span class="line">        treeMap.putAll(map);</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; sets = treeMap.keySet();</span><br><span class="line">        Iterator&lt;String&gt; iterator = sets.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            String key = iterator.next();</span><br><span class="line">            System.out.println(key + <span class="string">&quot;--&quot;</span> + map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写比较器的compare方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="对-value-排序"><a href="#对-value-排序" class="headerlink" title="对 value 排序"></a>对 value 排序</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对 map 集合按照value排序的方式来进行排序打印</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;99&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;53&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;59&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;ca&quot;</span>,<span class="string">&quot;51&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;bw&quot;</span>,<span class="string">&quot;52&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Map.Entry&lt;String, String&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(map.entrySet());</span><br><span class="line">        Collections.sort(list,<span class="keyword">new</span> MyComparator());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String,String&gt; entry : list)&#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot; -- &quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写比较器的compare方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&gt;</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Map.Entry o1, Map.Entry o2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ((String)o1.getValue()).compareTo((String) o2.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>MQ消费者补偿</title>
    <url>/yq/MQ%E6%B6%88%E8%B4%B9%E8%80%85%E8%A1%A5%E5%81%BF/</url>
    <content><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>1、网络抖动导致消费异常；<br>2、并发请求，锁冲突重试。</p>
<h1 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1655233206576-3fd2b135-002e-481d-8ec5-12fe5ee18930.png#clientId=ucfb91613-8015-4&from=paste&height=399&id=uaa95da16&name=image.png&originHeight=499&originWidth=1126&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=49073&status=done&style=none&taskId=uc8293ef7-df87-421c-9500-53675c2edb1&title=&width=900.8" alt="image.png"></p>
<h1 id="补偿表设计"><a href="#补偿表设计" class="headerlink" title="补偿表设计"></a>补偿表设计</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`message_compensation`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  <span class="string">`message`</span> <span class="built_in">text</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;消息体&#x27;</span>,</span><br><span class="line">  <span class="string">`service_name`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;消费者方法名&#x27;</span>,</span><br><span class="line">  <span class="string">`retry_count`</span> <span class="built_in">tinyint</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;重试次数&#x27;</span>,</span><br><span class="line">  <span class="string">`has_consume_status`</span> <span class="built_in">tinyint</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;重试标志,0待重试，1失败，2成功&#x27;</span>,</span><br><span class="line">  <span class="string">`exception_msg`</span> <span class="built_in">varchar</span>(<span class="number">1024</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;消费异常信息&#x27;</span>,</span><br><span class="line">  <span class="string">`create_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;创建人id&#x27;</span>,</span><br><span class="line">  <span class="string">`create_time`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  <span class="string">`update_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;更新人id&#x27;</span>,</span><br><span class="line">  <span class="string">`update_time`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="string">`is_delete`</span> <span class="built_in">tinyint</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;是否删除&#x27;</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">293</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_general_ci <span class="keyword">COMMENT</span>=<span class="string">&#x27;消费失败补偿表&#x27;</span>;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>LeetCode</title>
    <url>/yq/LeetCode/</url>
    <content><![CDATA[<h1 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *输入一个字符串，请按长度为8拆分每个输入字符串并进行输出；</span></span><br><span class="line"><span class="comment">     * 长度不是8整数倍的字符串请在后面补数字0，空字符串不处理。</span></span><br><span class="line"><span class="comment">     * 方案：补差达到8的倍数后分组打印</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String str = in.nextLine();</span><br><span class="line">        <span class="keyword">if</span> (str.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        StringBuilder wordBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        wordBuilder.append(str);</span><br><span class="line">        <span class="keyword">int</span> zeroCount = str.length() % <span class="number">8</span> == <span class="number">0</span> ? <span class="number">0</span> : <span class="number">8</span> - str.length() % <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= zeroCount;i++)&#123;</span><br><span class="line">            wordBuilder.append(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> groupLength = wordBuilder.length() / <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; groupLength;i++)&#123;</span><br><span class="line">            System.out.println(wordBuilder.substring(i * <span class="number">8</span>,(i + <span class="number">1</span>) * <span class="number">8</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(in.hasNextLine())&#123;</span><br><span class="line">            String s = in.nextLine();</span><br><span class="line">            System.out.println(Integer.parseInt(s.substring(<span class="number">2</span>,s.length()),<span class="number">16</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="质数因子"><a href="#质数因子" class="headerlink" title="质数因子"></a>质数因子</h1><p>、、</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (in.hasNext())&#123;</span><br><span class="line">            <span class="keyword">int</span> num = in.nextInt();</span><br><span class="line">            <span class="keyword">int</span> target = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (num % target == <span class="number">0</span>)&#123;</span><br><span class="line">                    System.out.print(target + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                    num = num / target;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 避免循环过多超时</span></span><br><span class="line">                    <span class="keyword">if</span> (target &gt; num / target)&#123;</span><br><span class="line">                        target = num;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        target ++ ;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">while</span> (num &gt; <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="取近似值"><a href="#取近似值" class="headerlink" title="取近似值"></a>取近似值</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (in.hasNextFloat())&#123;</span><br><span class="line">            <span class="keyword">float</span> num = in.nextFloat();</span><br><span class="line">            System.out.println(Math.round(num));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="字符串排序"><a href="#字符串排序" class="headerlink" title="字符串排序"></a><strong>字符串排序</strong></h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">// Arrays.sort()排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = in.nextInt();</span><br><span class="line">        String[] array = <span class="keyword">new</span> String[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            array[i] = in.nextLine();</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(array);</span><br><span class="line">        <span class="keyword">for</span> (String str : array) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="求-int-型正整数在内存中存储时-1-的个数"><a href="#求-int-型正整数在内存中存储时-1-的个数" class="headerlink" title="求 int 型正整数在内存中存储时 1 的个数"></a><strong>求 int 型正整数在内存中存储时 1 的个数</strong></h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (in.hasNext())&#123;</span><br><span class="line">            String str = Integer.toString(in.nextInt(), <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">char</span>[] arrays = str.toCharArray();</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> array : arrays) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;1&quot;</span>.equals(String.valueOf(array)))&#123;</span><br><span class="line">                    count ++ ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="购物单【背包问题】"><a href="#购物单【背包问题】" class="headerlink" title="购物单【背包问题】"></a><strong>购物单【背包问题】</strong></h1>]]></content>
  </entry>
  <entry>
    <title>JsonUtils</title>
    <url>/yq/JsonUtils/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"><span class="keyword">import</span> com.shebao.framework.util.base.CommonConstants;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理单条查询响应结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result 查询结果字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tClass 结果对象的class对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 响应类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">handleSingleResult</span><span class="params">(String result, Class&lt;T&gt; tClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isBlank(result)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        JSONObject jsonObject = JSON.parseObject(result);</span><br><span class="line">        <span class="keyword">if</span> (CommonConstants.RETURN_CODE_SUCCESS != jsonObject.getInteger(CommonConstants.RET)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jsonObject.getObject(<span class="string">&quot;data&quot;</span>, tClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理list查询响应结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result 查询结果字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tClass 结果对象的class对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 响应类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">handleListResult</span><span class="params">(String result, Class&lt;T&gt; tClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isBlank(result)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line">        JSONObject jsonObject = JSON.parseObject(result);</span><br><span class="line">        <span class="keyword">if</span> (CommonConstants.RETURN_CODE_SUCCESS != jsonObject.getInteger(CommonConstants.RET)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JSON.parseArray(jsonObject.getString(<span class="string">&quot;data&quot;</span>), tClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理RPC返回List结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result 待处理json字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tClass 待转型的目标类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ResultData&lt;List&lt;T&gt;&gt; handleRpcResultForList(String result, Class&lt;T&gt; tClass) &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isBlank(result)) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResultData.error(<span class="string">&quot;Rpc请求失败&quot;</span>,Collections.emptyList());</span><br><span class="line">        &#125;</span><br><span class="line">        JSONObject jsonObject = JSON.parseObject(result);</span><br><span class="line">        <span class="keyword">if</span> (CommonConstants.RETURN_CODE_SUCCESS != jsonObject.getInteger(CommonConstants.RET)) &#123;</span><br><span class="line">             <span class="keyword">return</span> ResultData.error(<span class="string">&quot;Rpc返回错误:&quot;</span>+jsonObject.getString(CommonConstants.MSG),Collections.emptyList());</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;T&gt; data = JSON.parseArray(jsonObject.getString(<span class="string">&quot;data&quot;</span>), tClass);</span><br><span class="line">        <span class="keyword">return</span> ResultData.success(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理RPC返回单个结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result 待处理json字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tClass 待转型的目标类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ResultData&lt;T&gt; <span class="title">handleRpcResultForOne</span><span class="params">(String result, Class&lt;T&gt; tClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isBlank(result)) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResultData.error(<span class="string">&quot;Rpc请求失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        JSONObject jsonObject = JSON.parseObject(result);</span><br><span class="line">        <span class="keyword">if</span> (CommonConstants.RETURN_CODE_SUCCESS != jsonObject.getInteger(CommonConstants.RET)) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResultData.error(<span class="string">&quot;Rpc返回错误:&quot;</span>+jsonObject.getString(CommonConstants.MSG));</span><br><span class="line">        &#125;</span><br><span class="line">        T data = jsonObject.getObject(<span class="string">&quot;data&quot;</span>, tClass);</span><br><span class="line">        <span class="keyword">return</span> ResultData.success(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理RPC返回分页结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tClass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ResultData&lt;List&lt;T&gt;&gt; handleRpcResultForPageList(String result, Class&lt;T&gt; tClass) &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isBlank(result)) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResultData.error(<span class="string">&quot;Rpc请求失败&quot;</span>,Collections.emptyList());</span><br><span class="line">        &#125;</span><br><span class="line">        JSONObject jsonObject = JSON.parseObject(result);</span><br><span class="line">        <span class="keyword">if</span> (CommonConstants.RETURN_CODE_SUCCESS != jsonObject.getInteger(CommonConstants.RET)) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResultData.error(<span class="string">&quot;Rpc返回错误:&quot;</span>+jsonObject.getString(CommonConstants.MSG),Collections.emptyList());</span><br><span class="line">        &#125;</span><br><span class="line">        JSONObject pageDataObj = JSON.parseObject(jsonObject.getString(<span class="string">&quot;data&quot;</span>));</span><br><span class="line">        List&lt;T&gt; data = JSON.parseArray(pageDataObj.getString(<span class="string">&quot;list&quot;</span>), tClass);</span><br><span class="line">        <span class="keyword">return</span> ResultData.success(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toJson</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JSONObject.toJSONString(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toJsonWriteMapNullValue</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JSONObject.toJSONString(obj, SerializerFeature.WriteMapNullValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将对象解析成JSON对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title">toJSONObject</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="keyword">return</span> JSON.parseObject(obj.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(JSON.toJSONString(obj));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过设置type将字符串解析成对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(String text, Type type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(text, type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将字符串解析成对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(String text, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(text, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>MAC命令</title>
    <url>/yq/MAC%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>下载命令，如 brew<br>brew install curl</p>
]]></content>
  </entry>
  <entry>
    <title>MVCC</title>
    <url>/yq/MVCC/</url>
    <content><![CDATA[<p>转自</p>
<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><blockquote>
<p><strong>MVCC</strong>，全称 Multi-Version Concurrency Control ，即多版本并发控制。MVCC 是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中实现事务<a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020">内存</a>。<br><a href="https://baike.baidu.com/item/MVCC/6298019?fr=aladdin">mvcc - @百度百科</a></p>
</blockquote>
<p><strong>MVCC</strong> 在 <strong>MySQL InnoDB</strong> 中的实现主要是为了提高数据库并发性能，用更好的方式去处理读-写冲突，做到即使有读写冲突时，也能做到不加锁，非阻塞并发读</p>
<h2 id="当前读"><a href="#当前读" class="headerlink" title="当前读"></a>当前读</h2><p>像 select lock in share mode (共享锁), select for update; update; insert; delete (排他锁)这些操作都是一种当前读，为什么叫当前读？就是它读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。</p>
<h2 id="快照读"><a href="#快照读" class="headerlink" title="快照读"></a>快照读</h2><p>像不加锁的 select 操作就是快照读，即不加锁的非阻塞读；快照读的前提是隔离级别不是串行级别，串行级别下的快照读会退化成当前读；之所以出现快照读的情况，是基于提高并发性能的考虑，快照读的实现是基于多版本并发控制，即 MVCC ,可以认为 MVCC 是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；既然是基于多版本，即快照读可能读到的并不一定是数据的最新版本，而有可能是之前的历史版本。<br><strong>说白了 MVCC 就是为了实现读-写冲突不加锁，而这个读指的就是快照读, 而非当前读，当前读实际上是一种加锁的操作，是悲观锁的实现。</strong></p>
<h1 id="当前读、快照读和-MVCC-的关系"><a href="#当前读、快照读和-MVCC-的关系" class="headerlink" title="当前读、快照读和 MVCC 的关系"></a>当前读、快照读和 MVCC 的关系</h1><ul>
<li>MVCC 多版本并发控制是 「<strong>维持一个数据的多个版本，使得读写操作没有冲突</strong>」 的概念，只是一个抽象概念，并非实现</li>
<li>因为 MVCC 只是一个抽象概念，要实现这么一个概念，MySQL 就需要提供具体的功能去实现它，「快照读就是 MySQL 实现 MVCC 理想模型的其中一个非阻塞读功能」。而相对而言，当前读就是悲观锁的具体功能实现</li>
<li>要说的再细致一些，快照读本身也是一个抽象概念，再深入研究。MVCC 模型在 MySQL 中的具体实现则是由 3 个隐式字段，<strong>undo 日志</strong> ，**Read View **等去完成的，具体可以看下面的 MVCC 实现原理。</li>
</ul>
<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><h2 id="数据库并发场景"><a href="#数据库并发场景" class="headerlink" title="数据库并发场景"></a>数据库并发场景</h2><p>读-读：不存在任何问题，也不需要并发控制<br>读-写：有线程安全问题，可能会造成事务隔离性问题，可能遇到脏读，幻读，不可重复读<br>写-写：有线程安全问题，可能会存在更新丢失问题，比如第一类更新丢失，第二类更新丢失</p>
<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>多版本并发控制（MVCC）是一种用来<strong>解决读-写冲突的无锁并发控制</strong>，也就是为事务分配单向增长的时间戳，为每个修改保存一个版本，版本与事务时间戳关联，<strong>读操作只读该事务开始前的数据库的快照</strong>。 所以 MVCC 可以为数据库解决以下问题</p>
<ul>
<li>在并发读写数据库时，可以做到在<strong>读操作时不用阻塞写操作</strong>，<strong>写操作也不用阻塞读操作</strong>，提高了数据库并发读写的性能</li>
<li>同时还可以解决脏读，幻读，不可重复读等事务隔离问题，但不能解决更新丢失问题</li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>简而言之，MVCC 就是因为大佬们，不满意只让数据库采用悲观锁这样性能不佳的形式去解决读-写冲突问题，而提出的解决方案，所以在数据库中，因为有了 MVCC，所以我们可以形成两个组合：</p>
<ul>
<li>MVCC + 悲观锁</li>
</ul>
<p>MVCC 解决读写冲突，悲观锁解决写写冲突</p>
<ul>
<li>MVCC + 乐观锁</li>
</ul>
<p>MVCC 解决读写冲突，乐观锁解决写写冲突<br>这种组合的方式就可以最大程度的提高数据库并发性能，并解决读写冲突，和写写冲突导致的问题</p>
<h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>MVCC 的目的就是多版本并发控制，在数据库中的实现，就是为了解决读写冲突，它的实现原理主要是依赖记录中的 <strong>3 个隐式字段</strong>，<strong>undo 日志</strong> ，<strong>Read View</strong> 来实现的。所以我们先来看看这个三个 point 的概念。</p>
<p>// todo<br><a href="https://blog.csdn.net/SnailMann/article/details/94724197">
</a></p>
]]></content>
  </entry>
  <entry>
    <title>Mac常用快捷键</title>
    <url>/yq/Mac%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">一、mac系统键盘和符号对应关系</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> Control（或 Ctrl）⌃</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> Caps Lock ⇪</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> Command（或 Cmd）⌘</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> Option（或 Alt）⌥</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> Shift ⇧</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">二、mac系统自有快捷键</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> command系列</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>). command+space 切换输入法</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>). command +M 最小化当前窗口</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>). command+Q 关闭当前程序（文件夹不适用）</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>). command+S 保存</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>). command+A 全选</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>). Control+Command+Q 立即锁定屏幕</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>). command+tab 切换app界面</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>). command+control+F 最大化当前窗口</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 选中文件+enter 文件重命名</span><br><span class="line"></span><br><span class="line">三、IDEA开发工具快捷键</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> command+N </span><br><span class="line"></span><br><span class="line"> <span class="number">1</span>）光标在代码编辑界面时</span><br><span class="line"></span><br><span class="line">     生成setter getter等方法 </span><br><span class="line"></span><br><span class="line"> <span class="number">2</span>）光标在左侧工程结构时</span><br><span class="line"></span><br><span class="line">     创建新类/包等</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> command+delete 删除当前行</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> command+D 复制当前行</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> command+alt+M 将当前选中到代码块抽取为方法</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> command+E 最近浏览的文体</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> alt+command+L 格式化代码</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> alt+enter 生成局部变量（introduce local variable）</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span> <span class="keyword">double</span> shift （快速按两次shift键）快速查找</span><br><span class="line"></span><br><span class="line"><span class="number">9.</span> shift+alt+⬇️ 将当前代码整体下移一行（上移同理）</span><br><span class="line"></span><br><span class="line"><span class="number">10.</span> shift+ctrl+R 编译并执行</span><br><span class="line"></span><br><span class="line"><span class="number">11.</span> fn+左键 将光标定位到当前代码行最左侧(最右侧同理 )</span><br><span class="line"></span><br><span class="line"><span class="number">12.</span> command+R 查找和替换</span><br><span class="line"></span><br><span class="line"><span class="number">13.</span> command+alt+U 在当前类中，查看继承关系视图</span><br><span class="line"></span><br><span class="line"><span class="number">14.</span> command+alt+左键/右键 将光标返回到上次查看代码的地方</span><br><span class="line"></span><br><span class="line"><span class="number">15.</span> command+F12 查找当前类的方法</span><br><span class="line"></span><br><span class="line"><span class="number">16.</span> shift*<span class="number">2</span> 快速查找</span><br><span class="line"></span><br><span class="line"><span class="number">17.</span> shift+F6 选中当前对象，重命名</span><br><span class="line"></span><br><span class="line"><span class="number">18.</span> shift+alt+⬇️ 将当前代码整体下移一行</span><br><span class="line"></span><br><span class="line"><span class="number">19.</span>shift+command+v 剪切板</span><br><span class="line"></span><br><span class="line"><span class="number">20.</span> command+shift+U 大小写切换</span><br><span class="line"></span><br><span class="line"><span class="number">21.</span> control + 左右键  idea窗口切换</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Mysql</title>
    <url>/yq/Mysql/</url>
    <content><![CDATA[<p>参考链接：<a href="https://app.yinxiang.com/fx/0911e5b1-fdf8-443e-86e4-aedc4058d641">https://app.yinxiang.com/fx/0911e5b1-fdf8-443e-86e4-aedc4058d641</a>MySQL 体系构架、存储引擎和索引结构 <a href="https://blog.csdn.net/wangfeijiu/article/details/112454405">https://blog.csdn.net/wangfeijiu/article/details/112454405</a><br>一文搞懂索引：<a href="https://blog.csdn.net/wangfeijiu/article/details/113409719">https://blog.csdn.net/wangfeijiu/article/details/113409719</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/22422342/1640611506041-78022088-5097-47e3-94be-e3edb419e11b.png#clientId=ub663b488-677f-4&from=paste&height=409&id=uf9c43f36&name=image.png&originHeight=817&originWidth=818&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=189794&status=done&style=none&taskId=ue40a01e7-dcb2-470b-a69b-22a24617e10&title=&width=409" alt="image.png"></p>
<h2 id="MySql-性能的依据条件"><a href="#MySql-性能的依据条件" class="headerlink" title="MySql 性能的依据条件"></a>MySql 性能的依据条件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">什么是TPS，什么是QPS，区别是什么？</span><br><span class="line">一、TPS：Transactions Per Second（每秒传输事务处理个数），即服务器每秒处理的事务数。TPS包括一条消息入和一条消息出，加上一次用户数据库访问。（业务TPS &#x3D; CAPS × 每个呼叫平均TPS）</span><br><span class="line"></span><br><span class="line">TPS是软件测试结果的测量单位。一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。</span><br><span class="line"></span><br><span class="line">一般的，评价系统性能均以每秒钟完成的技术交易的数量来衡量。系统整体处理能力取决于处理能力最低模块的TPS值。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">二、QPS：每秒查询率QPS是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准，在因特网上，作为域名系统服务器的机器的性能经常用每秒查询率来衡量。</span><br><span class="line"></span><br><span class="line">对应fetches&#x2F;sec，即每秒的响应请求数，也即是最大吞吐能力。</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Promethus</title>
    <url>/yq/Promethus/</url>
    <content><![CDATA[<p>参考链接:<a href="https://blog.csdn.net/dingshun129/article/details/122905362">https://blog.csdn.net/dingshun129/article/details/122905362</a></p>
]]></content>
  </entry>
  <entry>
    <title>ObjectUtils</title>
    <url>/yq/ObjectUtils/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.BooleanUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.math.NumberUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> :   对象操作工具类, 继承org.apache.commons.lang3.ObjectUtils类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/4/27</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectUtils</span> <span class="keyword">extends</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">commons</span>.<span class="title">lang3</span>.<span class="title">ObjectUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换为Double类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Double <span class="title">toDouble</span><span class="params">(<span class="keyword">final</span> Object val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (val == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0D</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> NumberUtils.toDouble(StringUtils.trim(val.toString()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0D</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换为Float类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Float <span class="title">toFloat</span><span class="params">(<span class="keyword">final</span> Object val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> toDouble(val).floatValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换为Long类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title">toLong</span><span class="params">(<span class="keyword">final</span> Object val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> toDouble(val).longValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换为Integer类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">toInteger</span><span class="params">(<span class="keyword">final</span> Object val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> toLong(val).intValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换为Boolean类型 &#x27;true&#x27;, &#x27;on&#x27;, &#x27;y&#x27;, &#x27;t&#x27;, &#x27;yes&#x27; or &#x27;1&#x27; (case insensitive) will return true.</span></span><br><span class="line"><span class="comment">     * Otherwise, false is returned.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">toBoolean</span><span class="params">(<span class="keyword">final</span> Object val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (val == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> BooleanUtils.toBoolean(val.toString()) || <span class="string">&quot;1&quot;</span>.equals(val.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换为字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">(<span class="keyword">final</span> Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> toString(obj, StringUtils.EMPTY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果对象为空，则使用defaultVal值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defaultVal</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String defaultVal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj == <span class="keyword">null</span> ? defaultVal : obj.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 空转空字符串（&quot;&quot; to &quot;&quot; ; null to &quot;&quot; ; &quot;null&quot; to &quot;&quot; ; &quot;NULL&quot; to &quot;&quot; ; &quot;Null&quot; to &quot;&quot;）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val 需转换的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回转换后的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toStringIgnoreNull</span><span class="params">(<span class="keyword">final</span> Object val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ObjectUtils.toStringIgnoreNull(val, StringUtils.EMPTY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 空对象转空字符串 （&quot;&quot; to defaultVal ; null to defaultVal ; &quot;null&quot; to defaultVal ; &quot;NULL&quot; to defaultVal</span></span><br><span class="line"><span class="comment">     * ; &quot;Null&quot; to defaultVal）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val 需转换的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defaultVal 默认值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回转换后的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toStringIgnoreNull</span><span class="params">(<span class="keyword">final</span> Object val, String defaultVal)</span> </span>&#123;</span><br><span class="line">        String str = ObjectUtils.toString(val);</span><br><span class="line">        <span class="keyword">return</span> !<span class="string">&quot;&quot;</span>.equals(str) &amp;&amp; !<span class="string">&quot;null&quot;</span>.equals(str.trim().toLowerCase()) ? str : defaultVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拷贝一个对象（但是子对象无法拷贝）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ignoreProperties</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">copyBean</span><span class="params">(Object source, String... ignoreProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (source == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Object target = BeanUtils.instantiate(source.getClass());</span><br><span class="line">        BeanUtils.copyProperties(source, target, ignoreProperties);</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注解到对象复制，只复制能匹配上的方法。 硕正组件用。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> annotation</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">annotationToObject</span><span class="params">(Object annotation, Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (annotation != <span class="keyword">null</span> &amp;&amp; object != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Class&lt;?&gt; annotationClass = annotation.getClass();</span><br><span class="line">            Class&lt;?&gt; objectClass = object.getClass();</span><br><span class="line">            <span class="keyword">for</span> (Method m : objectClass.getMethods()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.startsWith(m.getName(), <span class="string">&quot;set&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        String s = StringUtils.uncapitalize(StringUtils.substring(m.getName(), <span class="number">3</span>));</span><br><span class="line">                        Object obj = annotationClass.getMethod(s).invoke(annotation);</span><br><span class="line">                        <span class="keyword">if</span> (obj != <span class="keyword">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(obj.toString())) &#123;</span><br><span class="line">                            <span class="comment">// if (object == null)&#123;</span></span><br><span class="line">                            <span class="comment">// object = objectClass.newInstance();</span></span><br><span class="line">                            <span class="comment">// &#125;</span></span><br><span class="line">                            m.invoke(object, obj);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="comment">// 忽略所有设置失败方法</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] serialize(Object object) &#123;</span><br><span class="line">        <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> beginTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">null</span>;</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            oos = <span class="keyword">new</span> ObjectOutputStream(baos);</span><br><span class="line">            oos.writeObject(object);</span><br><span class="line">            bytes = baos.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;序列化对象 Exception&quot;</span>,e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            IOUtils.closeQuietly(oos);</span><br><span class="line">            IOUtils.closeQuietly(baos);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> totalTime = System.currentTimeMillis() - beginTime;</span><br><span class="line">        <span class="keyword">if</span> (totalTime &gt; <span class="number">3000</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Serialize time: &quot;</span> + totalTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">unserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bytes == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> beginTime = System.currentTimeMillis();</span><br><span class="line">        Object object = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayInputStream bais = <span class="keyword">null</span>;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bytes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                bais = <span class="keyword">new</span> ByteArrayInputStream(bytes);</span><br><span class="line">                ois = <span class="keyword">new</span> ObjectInputStream(bais);</span><br><span class="line">                object = ois.readObject();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;反序列化对象 Exception&quot;</span>,e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            IOUtils.closeQuietly(ois);</span><br><span class="line">            IOUtils.closeQuietly(bais);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> totalTime = System.currentTimeMillis() - beginTime;</span><br><span class="line">        <span class="keyword">if</span> (totalTime &gt; <span class="number">3000</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Unserialize time: &quot;</span> + totalTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>QuickBI</title>
    <url>/yq/QuickBI/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Redis为什么可以实现分布式锁</title>
    <url>/yq/Redis%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    <content><![CDATA[<p>1、Redis 为<strong>单进程单线程模式</strong>，采用<strong>队列模式</strong>将并发访问变成串行访问，且多客户端对 Redis 的连接并不存在竞争关系。<br>2、Redis 的 SETNX 命令可以方便的实现分布式锁。<br>setNX（SET if Not eXists）<br>语法：SETNX key value<br>返回值：设置成功，返回 1 ；设置失败，返回 0 。（<a href="http://www.amjmh.com/v/%EF%BC%89">http://www.amjmh.com/v/）</a><br>当且仅当 key 不存在时将 key 的值设为 value，并返回 1；若给定的 key 已经存在，则 SETNX 不做任何动作，并返回 0。<br>综上所述，可以通过 setnx 的返回值来判断是否获取到锁，并且不用担心并发访问的问题，因为 Redis 是单线程的，所以如果返回 1 则获取到锁，返回 0 则没获取到。当业务操作执行完后，一定要释放锁，释放锁的逻辑很简单，就是把之前设置的 key 删除掉即可，这样下次又可以通过 setnx 该 key 获取到锁了。<br>3、解锁</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">del key</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Redis持久化机制</title>
    <url>/yq/Redis%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="快照持久化（默认方式）"><a href="#快照持久化（默认方式）" class="headerlink" title="快照持久化（默认方式）"></a>快照持久化（默认方式）</h1><p>Redis 可以通过创建快照来获得存储在内存里面的数据在某个时间点上的副本。Redis 创建快照之后，可以对快照进行备份，可以将快照复制到其他服务器从而创建具有相同数据的服务器副本（Redis 主从结构，主要用来提高 Redis 性能），还可以将快照留在原地以便重启服务器的时候使用。<br>快照持久化是 Redis 默认采用的持久化方式，在 redis.conf 配置文件中默认有此下配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">save</span> <span class="string">900 1           #在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">save</span> <span class="string">300 10          #在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">save</span> <span class="string">60 10000        #在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span></span><br></pre></td></tr></table></figure>

<h1 id="AOF-持久化"><a href="#AOF-持久化" class="headerlink" title="AOF 持久化"></a>AOF 持久化</h1><p>与快照持久化相比，AOF 持久化的实时性更好，因此已成为主流的持久化方案。默认情况下 Redis 没有开启 AOF（append only file）方式的持久化，可以通过 appendonly 参数开启：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">appendonly</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure>

<p>开启 AOF 持久化后每执行一条会更改 Redis 中的数据的命令，Redis 就会将该命令写入到内存缓存 server.aof_buf 中，然后再根据 appendfsync 配置来决定何时将其同步到硬盘中的 AOF 文件。<br>AOF 文件的保存位置和 RDB 文件的位置相同，都是通过 dir 参数设置的，默认的文件名是 appendonly.aof。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">appendfsync</span> <span class="string">always</span>    <span class="comment">#每次有数据修改发生时都会写入AOF文件,这样会严重降低Redis的速度</span></span><br><span class="line"><span class="string">appendfsync</span> <span class="string">everysec</span>  <span class="comment">#每秒钟同步一次，显式地将多个写命令同步到硬盘</span></span><br><span class="line"><span class="string">appendfsync</span> <span class="literal">no</span>        <span class="comment">#让操作系统决定何时进行同步</span></span><br></pre></td></tr></table></figure>

<p>为了兼顾数据和写入性能，用户可以考虑 appendfsync everysec 选项 ，让 Redis 每秒同步一次 AOF 文件，Redis 性能几乎没受到任何影响。而且这样即使出现系统崩溃，用户最多只会丢失一秒之内产生的数据。当硬盘忙于执行写入操作的时候，Redis 还会优雅的放慢自己的速度以便适应硬盘的最大写入速度。</p>
<h1 id="RDB-和-AOF-的混合持久化-redis-4-0-后支持"><a href="#RDB-和-AOF-的混合持久化-redis-4-0-后支持" class="headerlink" title="RDB 和 AOF 的混合持久化(redis 4.0 后支持)"></a>RDB 和 AOF 的混合持久化(redis 4.0 后支持)</h1><p>Redis 4.0 开始支持 RDB 和 AOF 的混合持久化（默认关闭，可以通过配置项 aof-use-rdb-preamble 开启）。<br>如果把混合持久化打开，AOF 重写的时候就直接把 RDB 的内容写到 AOF 文件开头。这样做的好处是可以结合 RDB 和 AOF 的优点, 快速加载同时避免丢失过多的数据。当然缺点也是有的， AOF 里面的 RDB 部分是压缩格式不再是 AOF 格式，可读性较差。</p>
]]></content>
  </entry>
  <entry>
    <title>Sentry</title>
    <url>/yq/Sentry/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Ribbon：负载均衡(基于客户端)</title>
    <url>/yq/Ribbon%EF%BC%9A%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1(%E5%9F%BA%E4%BA%8E%E5%AE%A2%E6%88%B7%E7%AB%AF)/</url>
    <content><![CDATA[<h1 id="Ribbon-是什么？"><a href="#Ribbon-是什么？" class="headerlink" title="Ribbon 是什么？"></a>Ribbon 是什么？</h1><ul>
<li>Spring Cloud Ribbon 是基于 Netflix Ribbon 实现的一套<strong>客户端负载均衡的工具</strong>。</li>
<li>简单的说，Ribbon 是 Netflix 发布的开源项目，主要功能是提供客户端的软件负载均衡算法，将 Netflix 的中间层服务连接在一起。Ribbon 的客户端组件提供一系列完整的配置项，如：连接超时、重试等。简单的说，就是在配置文件中列出 LoadBalancer (简称 LB：负载均衡) 后面所有的及其，Ribbon 会自动的帮助你基于某种规则 (如简单轮询，随机连接等等) 去连接这些机器。我们也容易使用 Ribbon 实现自定义的负载均衡算法！</li>
</ul>
<h1 id="Ribbon-能干嘛？"><a href="#Ribbon-能干嘛？" class="headerlink" title="Ribbon 能干嘛？"></a>Ribbon 能干嘛？</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1654350520228-d3d0a06b-ef6d-4d9f-b0be-3f05b35605d1.png#clientId=u660e2136-e68f-4&from=paste&id=udff79111&name=image.png&originHeight=482&originWidth=779&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=267331&status=done&style=none&taskId=udfee50c0-8c01-4833-b694-cac675044d7&title=" alt="image.png"></p>
<ul>
<li>LB，即负载均衡 (LoadBalancer) ，在微服务或分布式集群中经常用的一种应用。</li>
<li>负载均衡简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的 HA (高用)。</li>
<li>常见的负载均衡软件有 Nginx、Lvs 等等。</li>
<li>Dubbo、SpringCloud 中均给我们提供了负载均衡，<strong>SpringCloud 的负载均衡算法可以自定义</strong>。</li>
<li>负载均衡简单分类：<ul>
<li>集中式 LB<ul>
<li>即在服务的提供方和消费方之间使用独立的 LB 设施，如**Nginx(反向代理服务器)**，由该设施负责把访问请求通过某种策略转发至服务的提供方！</li>
</ul>
</li>
<li>进程式 LB<ul>
<li>将 LB 逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选出一个合适的服务器。</li>
<li><strong>Ribbon 就属于进程内 LB</strong>，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址！</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="使用-Ribbon-实现负载均衡"><a href="#使用-Ribbon-实现负载均衡" class="headerlink" title="使用 Ribbon 实现负载均衡"></a>使用 Ribbon 实现负载均衡</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1654350618145-892d7982-48f9-43ce-b9e5-0f1f374682ce.png#clientId=u660e2136-e68f-4&from=paste&id=u8e4453ff&name=image.png&originHeight=419&originWidth=951&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=65454&status=done&style=none&taskId=u4ec0d3ab-d8fd-4c92-b408-7d89e80fbd7&title=" alt="image.png"></p>
]]></content>
  </entry>
  <entry>
    <title>Sonar</title>
    <url>/yq/Sonar/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Set的数据结构</title>
    <url>/yq/Set%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Spring 和 Spring Boot的AOP用的是什么代理？</title>
    <url>/yq/Spring%20%E5%92%8C%20Spring%20Boot%E7%9A%84AOP%E7%94%A8%E7%9A%84%E6%98%AF%E4%BB%80%E4%B9%88%E4%BB%A3%E7%90%86%EF%BC%9F/</url>
    <content><![CDATA[<ol>
<li>Spring 中的 AOP，有接口就用 JDK 动态代理，没有接口就用 Cglib 动态代理。</li>
<li>Spring Boot 中的 AOP，2.0 之前和 Spring 一样；2.0 之后首选 Cglib 动态代理，如果用户想要使用 JDK 动态代理，需要自己手动配置。</li>
</ol>
<p>如果 springboot2.0 版本之后，想默认使用 jdk 代理，则需要在配置文件中手动设置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.aop.proxy-target-class</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>SpringBoot项目通过idea修改端口号</title>
    <url>/yq/SpringBoot%E9%A1%B9%E7%9B%AE%E9%80%9A%E8%BF%87idea%E4%BF%AE%E6%94%B9%E7%AB%AF%E5%8F%A3%E5%8F%B7/</url>
    <content><![CDATA[<p>有时候我们需要在本地启动几个服务，服务之间端口号有可能冲突，这个时候可以通过修改配置文件或者通过 idea 修改端口号来解决冲突；个人不太喜欢修改配置文件，修改配置文件难免会不小心给 commit 上去。<br>通过 idea 修改端口号方式<br>1、<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1651032144574-bb2d657d-6ce5-43c9-b683-dbc954c174b9.png#clientId=u5c0b31cc-ab14-4&from=paste&height=169&id=u3a753a92&name=wecom-temp-4209a6d0d1d8fea48234cb1c008cda39.png&originHeight=338&originWidth=882&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=91532&status=done&style=none&taskId=u7c346492-7c01-4ac1-b265-b45b28fcecb&title=&width=441" alt="wecom-temp-4209a6d0d1d8fea48234cb1c008cda39.png"><br>2、<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1651032160632-c22fe310-8a40-47e0-9fb1-3371d0da9e15.png#clientId=u5c0b31cc-ab14-4&from=paste&height=192&id=ud3581879&name=wecom-temp-62f50d9e2959008f493ae544e51026ed.png&originHeight=384&originWidth=866&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=187022&status=done&style=none&taskId=u5909bcb4-d1a6-430d-901c-238ce880a39&title=&width=433" alt="wecom-temp-62f50d9e2959008f493ae544e51026ed.png"><br>3、<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1651032170378-63ab2af9-6101-4df6-baa6-470b30c0ab7d.png#clientId=u5c0b31cc-ab14-4&from=paste&height=200&id=u9cc2d3e6&name=wecom-temp-5b28b0ed64f0d04ec20e780d9be29d90.png&originHeight=400&originWidth=752&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=64180&status=done&style=none&taskId=uc454ab0e-6867-47b6-862b-e6533ac320b&title=&width=376" alt="wecom-temp-5b28b0ed64f0d04ec20e780d9be29d90.png"><br>4、<br>输入需要配置的端口号，重新启动即可，如<br>server.port=9000</p>
]]></content>
  </entry>
  <entry>
    <title>SpringCloud</title>
    <url>/yq/SpringCloud/</url>
    <content><![CDATA[<p>参考链接 <a href="https://www.kuangstudy.com/bbs/1374942542566551554">https://www.kuangstudy.com/bbs/1374942542566551554</a><br><strong>自学参考书：</strong></p>
<ul>
<li>SpringCloud Netflix 中文文档：<a href="https://springcloud.cc/spring-cloud-netflix.html">https://springcloud.cc/spring-cloud-netflix.html</a></li>
<li>SpringCloud 中文 API 文档(官方文档翻译版)：<a href="https://springcloud.cc/spring-cloud-dalston.html">https://springcloud.cc/spring-cloud-dalston.html</a></li>
<li>SpringCloud 中国社区：<a href="http://springcloud.cn/">http://springcloud.cn/</a></li>
<li>SpringCloud 中文网：<a href="https://springcloud.cc/">https://springcloud.cc</a></li>
</ul>
<h1 id="微服务四个核心问题"><a href="#微服务四个核心问题" class="headerlink" title="微服务四个核心问题"></a>微服务四个核心问题</h1><p>1、服务很多，客户端如何访问？<br>2、多服务之间，如何进行通信？（rpc、http）<br>3、如何治理？<br>4、服务挂了怎么办？</p>
<h1 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h1><p>Spring Cloud 生态！</p>
<h2 id="1、Spring-Cloud-NetFlix"><a href="#1、Spring-Cloud-NetFlix" class="headerlink" title="1、Spring Cloud NetFlix"></a>1、Spring Cloud NetFlix</h2><p>一站式解决方案！<br>api 网关，zuul 组件<br>Feign ， Httpclient，http 通信方式，同步，阻塞<br>服务注册与发现：Eureka<br>熔断机制：Hystrix<br>…..</p>
<h2 id="2、Apache-Dubbo-Zookeeper"><a href="#2、Apache-Dubbo-Zookeeper" class="headerlink" title="2、Apache Dubbo Zookeeper"></a>2、Apache Dubbo Zookeeper</h2><p>API：无，可找第三方组件，或者自己实现<br>Dubbo:rpc 框架<br>Zookeeper :服务注册与发现<br>没有熔断机制</p>
<h2 id="3、Spring-Cloud-Alibaba"><a href="#3、Spring-Cloud-Alibaba" class="headerlink" title="3、Spring Cloud Alibaba"></a>3、Spring Cloud Alibaba</h2><p>一站式解决方案，更简单！</p>
<p>学习重点：<br>1、API<br>2、HTTP、RPC<br>3、注册与发现<br>4、熔断机制</p>
<h1 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h1><p>1.1 什么是微服务？<br>1.2 微服务之间是如何独立通讯的？<br>1.3 SpringCloud 和 Dubbo 有那些区别？<br>1.4 SpringBoot 和 SpringCloud，请谈谈你对他们的理解<br>1.5 什么是服务熔断？什么是服务降级？<br>1.6 微服务的优缺点分别是什么？说下你在项目开发中遇到的坑<br>1.7 你所知道的微服务技术栈有哪些？列举一二<br>1.8 Eureka 和 Zookeeper 都可以提供服务注册与发现的功能，请说说两者的区别</p>
<h1 id="微服务概述"><a href="#微服务概述" class="headerlink" title="微服务概述"></a>微服务概述</h1><p>什么是微服务？</p>
<p>微服务(Microservice Architecture) 是近几年流行的一种架构思想，关于它的概念很难一言以蔽之。</p>
<p>究竟什么是微服务呢？我们在此引用 ThoughtWorks 公司的首席科学家 Martin Fowler 于 2014 年提出的一段话：</p>
<p>原文：<a href="https://martinfowler.com/articles/microservices.html">https://martinfowler.com/articles/microservices.html</a></p>
<p>汉化：<a href="https://www.cnblogs.com/liuning8023/p/4493156.html">https://www.cnblogs.com/liuning8023/p/4493156.html</a></p>
<p>就目前而言，对于微服务，业界并没有一个统一的，标准的定义。<br>但通常而言，微服务架构是一种架构模式，或者说是一种架构风格，它体长将单一的应用程序划分成一组小的服务，每个服务运行在其独立的自己的进程内，服务之间互相协调，互相配置，为用户提供最终价值，服务之间采用轻量级的通信机制(HTTP)互相沟通，每个服务都围绕着具体的业务进行构建，并且能狗被独立的部署到生产环境中，另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应该根据业务上下文，选择合适的语言，工具(Maven)对其进行构建，可以有一个非常轻量级的集中式管理来协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据存储。<br>再来从技术维度角度理解下：</p>
<p>微服务化的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底地去耦合，每一个微服务提供单个业务功能的服务，一个服务做一件事情，从技术角度看就是一种小而独立的处理过程，类似进程的概念，能够自行单独启动或销毁，拥有自己独立的数据库。<br>2.2 微服务与微服务架构<br>微服务</p>
<p>强调的是服务的大小，它关注的是某一个点，是具体解决某一个问题/提供落地对应服务的一个服务应用，狭义的看，可以看作是 IDEA 中的一个个微服务工程，或者 Moudel。IDEA 工具里面使用 Maven 开发的一个个独立的小 Moudel，它具体是使用 SpringBoot 开发的一个小模块，专业的事情交给专业的模块来做，一个模块就做着一件事情。强调的是一个个的个体，每个个体完成一个具体的任务或者功能。</p>
<p>微服务架构</p>
<p>一种新的架构形式，Martin Fowler 于 2014 年提出。</p>
<p>微服务架构是一种架构模式，它体长将单一应用程序划分成一组小的服务，服务之间相互协调，互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务与服务之间采用轻量级的通信机制**(如 HTTP)互相协作，每个服务都围绕着具体的业务进行构建，并且能够被独立的部署到生产环境中，另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具(如 Maven)**对其进行构建。</p>
<p>2.3 微服务优缺点<br>优点</p>
<p>单一职责原则；<br>每个服务足够内聚，足够小，代码容易理解，这样能聚焦一个指定的业务功能或业务需求；<br>开发简单，开发效率高，一个服务可能就是专一的只干一件事；<br>微服务能够被小团队单独开发，这个团队只需 2-5 个开发人员组成；<br>微服务是松耦合的，是有功能意义的服务，无论是在开发阶段或部署阶段都是独立的；<br>微服务能使用不同的语言开发；<br>易于和第三方集成，微服务允许容易且灵活的方式集成自动部署，通过持续集成工具，如 jenkins，Hudson，bamboo；<br>微服务易于被一个开发人员理解，修改和维护，这样小团队能够更关注自己的工作成果，无需通过合作才能体现价值；<br>微服务允许利用和融合最新技术；<br>微服务只是业务逻辑的代码，不会和 HTML，CSS，或其他的界面混合;<br>每个微服务都有自己的存储能力，可以有自己的数据库，也可以有统一的数据库；<br>缺点</p>
<p>开发人员要处理分布式系统的复杂性；<br>多服务运维难度，随着服务的增加，运维的压力也在增大；<br>系统部署依赖问题；<br>服务间通信成本问题；<br>数据一致性问题；<br>系统集成测试问题；<br>性能和监控问题；<br>2.4 微服务技术栈有那些？</p>
<table>
<thead>
<tr>
<th><strong>微服务技术条目</strong></th>
<th>落地技术</th>
</tr>
</thead>
<tbody><tr>
<td>服务开发</td>
<td>SpringBoot、Spring、SpringMVC 等</td>
</tr>
<tr>
<td>服务配置与管理</td>
<td>Netfix 公司的 Archaius、阿里的 Diamond 等</td>
</tr>
<tr>
<td>服务注册与发现</td>
<td>Eureka、Consul、Zookeeper 等</td>
</tr>
<tr>
<td>服务调用</td>
<td>Rest、PRC、gRPC</td>
</tr>
<tr>
<td>服务熔断器</td>
<td>Hystrix、Envoy 等</td>
</tr>
<tr>
<td>负载均衡</td>
<td>Ribbon、Nginx 等</td>
</tr>
<tr>
<td>服务接口调用(客户端调用服务的简化工具)</td>
<td>Fegin 等</td>
</tr>
<tr>
<td>消息队列</td>
<td>Kafka、RabbitMQ、ActiveMQ 等</td>
</tr>
<tr>
<td>服务配置中心管理</td>
<td>SpringCloudConfig、Chef 等</td>
</tr>
<tr>
<td>服务路由(API 网关)</td>
<td>Zuul 等</td>
</tr>
<tr>
<td>服务监控</td>
<td>Zabbix、Nagios、Metrics、Specatator 等</td>
</tr>
<tr>
<td>全链路追踪</td>
<td>Zipkin、Brave、Dapper 等</td>
</tr>
<tr>
<td>数据流操作开发包</td>
<td>SpringCloud Stream(封装与 Redis，Rabbit，Kafka 等发送接收消息)</td>
</tr>
<tr>
<td>时间消息总栈</td>
<td>SpringCloud Bus</td>
</tr>
<tr>
<td>服务部署</td>
<td>Docker、OpenStack、Kubernetes 等</td>
</tr>
</tbody></table>
<p>2.5 为什么选择 SpringCloud 作为微服务架构<br>选型依据</p>
<p>整体解决方案和框架成熟度<br>社区热度<br>可维护性<br>学习曲线<br>当前各大 IT 公司用的微服务架构有那些？</p>
<p>阿里：dubbo+HFS<br>京东：JFS<br>新浪：Motan<br>当当网：DubboX</p>
<p>…</p>
<p>各微服务框架对比</p>
<p>| 功能点/服务框架 | Netflix/SpringCloud | Motan | gRPC | Thri t | Dubbo/DubboX |<br>| —————— | ———————————————————————————— | —————————————————- | ————————— | ———— | —————————— |<br>| 功能定位 | 完整的微服务框架 | RPC 框架，但整合了 ZK 或 Consul，实现集群环境的基本服务注册发现 | RPC 框架 | RPC 框架 | 服务框架 |<br>| 支持 Rest | 是，Ribbon 支持多种可拔插的序列号选择 | 否 | 否 | 否 | 否 |<br>| 支持 RPC | 否 | 是(Hession2) | 是 | 是 | 是 |<br>| 支持多语言 | 是(Rest 形式) | 否 | 是 | 是 | 否 |<br>| 负载均衡 | 是(服务端 zuul+客户端 Ribbon)，zuul-服务，动态路由，云端负载均衡 Eureka（针对中间层服务器） | 是(客户端) | 否 | 否 | 是(客户端) |<br>| 配置服务 | Netfix Archaius，Spring Cloud Config Server 集中配置 | 是(Zookeeper 提供) | 否 | 否 | 否 |<br>| 服务调用链监控 | 是(zuul)，zuul 提供边缘服务，API 网关 | 否 | 否 | 否 | 否 |<br>| 高可用/容错 | 是(服务端 Hystrix+客户端 Ribbon) | 是(客户端) | 否 | 否 | 是(客户端) |<br>| 典型应用案例 | Netflix | Sina | Google | Facebook | |<br>| 社区活跃程度 | 高 | 一般 | 高 | 一般 | 2017 年后重新开始维护，之前中断了 5 年 |<br>| 学习难度 | 中等 | 低 | 高 | 高 | 低 |<br>| 文档丰富程度 | 高 | 一般 | 一般 | 一般 | 高 |<br>| 其他 | Spring Cloud Bus 为我们的应用程序带来了更多管理端点 | 支持降级 | Netflix 内部在开发集成 gRPC | IDL 定义 | 实践的公司比较多 |</p>
]]></content>
  </entry>
  <entry>
    <title>SpringCloud入门概述</title>
    <url>/yq/SpringCloud%E5%85%A5%E9%97%A8%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="SpringCloud-是什么？"><a href="#SpringCloud-是什么？" class="headerlink" title="SpringCloud 是什么？"></a>SpringCloud 是什么？</h1><p>Spring 官网：<a href="https://spring.io/">https://spring.io/</a><br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1654347345092-e9ed6712-a809-4a58-aa41-f6f8f2319a1b.png#clientId=udfe0731e-5af8-4&from=paste&id=u70ccf781&originHeight=805&originWidth=1308&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&taskId=u2cd7f389-35d6-4d75-a158-7dba487dce8&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1654347345084-6269c3e2-cf19-437a-97b2-7a6591d5306a.png#clientId=udfe0731e-5af8-4&from=paste&id=u6337d379&originHeight=395&originWidth=755&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&taskId=ufe20d9d9-3b86-4746-b902-bd9d3d62396&title="></p>
<h1 id="SpringCloud-和-SpringBoot-的关系"><a href="#SpringCloud-和-SpringBoot-的关系" class="headerlink" title="SpringCloud 和 SpringBoot 的关系"></a>SpringCloud 和 SpringBoot 的关系</h1><ul>
<li>SpringBoot 专注于开苏方便的开发单个个体微服务；</li>
<li>SpringCloud 是关注全局的微服务协调整理治理框架，它将 SpringBoot 开发的一个个单体微服务，整合并管理起来，为各个微服务之间提供：配置管理、服务发现、断路器、路由、为代理、事件总栈、全局锁、决策竞选、分布式会话等等集成服务；</li>
<li>SpringBoot 可以离开 SpringCloud 独立使用，开发项目，但 SpringCloud 离不开 SpringBoot，属于依赖关系；</li>
<li>SpringBoot 专注于快速、方便的开发单个个体微服务，SpringCloud 关注全局的服务治理框架；</li>
</ul>
<h1 id="Dubbo-和-SpringCloud-技术选型"><a href="#Dubbo-和-SpringCloud-技术选型" class="headerlink" title="Dubbo 和 SpringCloud 技术选型"></a>Dubbo 和 SpringCloud 技术选型</h1><h2 id="1-分布式-服务治理-Dubbo"><a href="#1-分布式-服务治理-Dubbo" class="headerlink" title="1. 分布式+服务治理 Dubbo"></a>1. 分布式+服务治理 Dubbo</h2><p>目前成熟的互联网架构，应用服务化拆分 + 消息中间件</p>
<h2 id="2-Dubbo-和-SpringCloud-对比"><a href="#2-Dubbo-和-SpringCloud-对比" class="headerlink" title="2. Dubbo 和 SpringCloud 对比"></a>2. Dubbo 和 SpringCloud 对比</h2><p>可以看一下社区活跃度：<br><a href="https://github.com/dubbo">https://github.com/dubbo</a><br><a href="https://github.com/spring-cloud">https://github.com/spring-cloud</a><br><strong>对比结果：</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>Dubbo</th>
<th>SpringCloud</th>
</tr>
</thead>
<tbody><tr>
<td>服务注册中心</td>
<td>Zookeeper</td>
<td>Spring Cloud Netfilx Eureka</td>
</tr>
<tr>
<td>服务调用方式</td>
<td>RPC</td>
<td>REST API</td>
</tr>
<tr>
<td>服务监控</td>
<td>Dubbo-monitor</td>
<td>Spring Boot Admin</td>
</tr>
<tr>
<td>断路器</td>
<td>不完善</td>
<td>Spring Cloud Netfilx Hystrix</td>
</tr>
<tr>
<td>服务网关</td>
<td>无</td>
<td>Spring Cloud Netfilx Zuul</td>
</tr>
<tr>
<td>分布式配置</td>
<td>无</td>
<td>Spring Cloud Config</td>
</tr>
<tr>
<td>服务跟踪</td>
<td>无</td>
<td>Spring Cloud Sleuth</td>
</tr>
<tr>
<td>消息总栈</td>
<td>无</td>
<td>Spring Cloud Bus</td>
</tr>
<tr>
<td>数据流</td>
<td>无</td>
<td>Spring Cloud Stream</td>
</tr>
<tr>
<td>批量任务</td>
<td>无</td>
<td>Spring Cloud Task</td>
</tr>
</tbody></table>
<p><strong>最大区别：Spring Cloud 抛弃了 Dubbo 的 RPC 通信，采用的是基于 HTTP 的 REST 方式</strong><br>严格来说，这两种方式各有优劣。虽然从一定程度上来说，后者牺牲了服务调用的性能，但也避免了上面提到的原生 RPC 带来的问题。而且 REST 相比 RPC 更为灵活，服务提供方和调用方的依赖只依靠一纸契约，不存在代码级别的强依赖，这个优点在当下强调快速演化的微服务环境下，显得更加合适。<br><strong>品牌机和组装机的区别</strong><br><strong>社区支持与更新力度的区别</strong><br><strong>总结：</strong>二者解决的问题域不一样：Dubbo 的定位是一款 RPC 框架，而 SpringCloud 的目标是微服务架构下的一站式解决方案。</p>
<h2 id="3、SpringCloud-能干嘛？"><a href="#3、SpringCloud-能干嘛？" class="headerlink" title="3、SpringCloud 能干嘛？"></a>3、SpringCloud 能干嘛？</h2><ul>
<li>Distributed/versioned configuration 分布式/版本控制配置</li>
<li>Service registration and discovery 服务注册与发现</li>
<li>Routing 路由</li>
<li>Service-to-service calls 服务到服务的调用</li>
<li>Load balancing 负载均衡配置</li>
<li>Circuit Breakers 断路器</li>
<li>Distributed messaging 分布式消息管理</li>
<li>…</li>
</ul>
<h2 id="4、SpringCloud-下载"><a href="#4、SpringCloud-下载" class="headerlink" title="4、SpringCloud 下载"></a>4、SpringCloud 下载</h2><p>官网：<a href="http://projects.spring.io/spring-cloud/">http://projects.spring.io/spring-cloud/</a><br>版本号有点特别：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1654347345236-8560f9fc-4d15-45e2-bec2-3351f2749d7b.png#clientId=udfe0731e-5af8-4&from=paste&id=u31e53acc&name=image.png&originHeight=421&originWidth=756&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=40628&status=done&style=none&taskId=ud35429f8-5e38-4130-891b-c71a925fe3c&title=" alt="image.png"><br>SpringCloud 没有采用数字编号的方式命名版本号，而是采用了伦敦地铁站的名称，<strong>同时根据字母表的顺序来对应版本时间顺序</strong>，比如最早的 Realse 版本：Angel，第二个 Realse 版本：Brixton，然后是 Camden、Dalston、Edgware，目前最新的是 Hoxton SR4 CURRENT GA 通用稳定版。<br><strong>自学参考书：</strong></p>
<ul>
<li>SpringCloud Netflix 中文文档：<a href="https://springcloud.cc/spring-cloud-netflix.html">https://springcloud.cc/spring-cloud-netflix.html</a></li>
<li>SpringCloud 中文 API 文档(官方文档翻译版)：<a href="https://springcloud.cc/spring-cloud-dalston.html">https://springcloud.cc/spring-cloud-dalston.html</a></li>
<li>SpringCloud 中国社区：<a href="http://springcloud.cn/">http://springcloud.cn/</a></li>
<li>SpringCloud 中文网：<a href="https://springcloud.cc/">https://springcloud.cc</a></li>
</ul>
<h1 id="SpringCloud-Rest-学习环境搭建：服务提供者"><a href="#SpringCloud-Rest-学习环境搭建：服务提供者" class="headerlink" title="SpringCloud Rest 学习环境搭建：服务提供者"></a>SpringCloud Rest 学习环境搭建：服务提供者</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>我们会使用一个 Dept 部门模块做一个微服务通用案例<strong>Consumer</strong>消费者(<strong>Client</strong>)通过 REST 调用<strong>Provider</strong>提供者(<strong>Server</strong>)提供的服务。</li>
<li>回顾 Spring，SpringMVC，Mybatis 等以往学习的知识。</li>
<li>Maven 的分包分模块架构复习。</li>
</ul>
<p>一个简单的 Maven 模块结构是这样的：– app-parent: 一个父项目(app-parent)聚合了很多子项目(app-util\app-dao\app-web…) |– pom.xml | |– app-core ||—- pom.xml | |– app-web ||—- pom.xml ……<br>一个父工程带着多个 Moudule 子模块<br>MicroServiceCloud 父工程(Project)下初次带着 3 个子模块(Module)</p>
<ul>
<li>microservicecloud-api 【封装的整体 entity/接口/公共配置等】</li>
<li>microservicecloud-consumer-dept-80 【服务提供者】</li>
<li>microservicecloud-provider-dept-8001 【服务消费者】</li>
</ul>
<h2 id="SpringCloud-版本选择"><a href="#SpringCloud-版本选择" class="headerlink" title="SpringCloud 版本选择"></a>SpringCloud 版本选择</h2><p><strong>大版本说明</strong></p>
<table>
<thead>
<tr>
<th>SpringBoot</th>
<th>SpringCloud</th>
<th>关系</th>
</tr>
</thead>
<tbody><tr>
<td>1.2.x</td>
<td>Angel 版本(天使)</td>
<td>兼容 SpringBoot1.2x</td>
</tr>
<tr>
<td>1.3.x</td>
<td>Brixton 版本(布里克斯顿)</td>
<td>兼容 SpringBoot1.3x，也兼容 SpringBoot1.4x</td>
</tr>
<tr>
<td>1.4.x</td>
<td>Camden 版本(卡姆登)</td>
<td>兼容 SpringBoot1.4x，也兼容 SpringBoot1.5x</td>
</tr>
<tr>
<td>1.5.x</td>
<td>Dalston 版本(多尔斯顿)</td>
<td>兼容 SpringBoot1.5x，不兼容 SpringBoot2.0x</td>
</tr>
<tr>
<td>1.5.x</td>
<td>Edgware 版本(埃奇韦尔)</td>
<td>兼容 SpringBoot1.5x，不兼容 SpringBoot2.0x</td>
</tr>
<tr>
<td>2.0.x</td>
<td>Finchley 版本(芬奇利)</td>
<td>兼容 SpringBoot2.0x，不兼容 SpringBoot1.5x</td>
</tr>
<tr>
<td>2.1.x</td>
<td>Greenwich 版本(格林威治)</td>
<td></td>
</tr>
</tbody></table>
<p><strong>实际开发版本关系</strong></p>
<table>
<thead>
<tr>
<th>spring-boot-starter-parent</th>
<th></th>
<th>spring-cloud-dependencles</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>版本号</strong></td>
<td><strong>发布日期</strong></td>
<td><strong>版本号</strong></td>
<td><strong>发布日期</strong></td>
</tr>
<tr>
<td>1.5.2.RELEASE</td>
<td>2017-03</td>
<td>Dalston.RC1</td>
<td>2017-x</td>
</tr>
<tr>
<td>1.5.9.RELEASE</td>
<td>2017-11</td>
<td>Edgware.RELEASE</td>
<td>2017-11</td>
</tr>
<tr>
<td>1.5.16.RELEASE</td>
<td>2018-04</td>
<td>Edgware.SR5</td>
<td>2018-10</td>
</tr>
<tr>
<td>1.5.20.RELEASE</td>
<td>2018-09</td>
<td>Edgware.SR5</td>
<td>2018-10</td>
</tr>
<tr>
<td>2.0.2.RELEASE</td>
<td>2018-05</td>
<td>Fomchiey.BULD-SNAPSHOT</td>
<td>2018-x</td>
</tr>
<tr>
<td>2.0.6.RELEASE</td>
<td>2018-10</td>
<td>Fomchiey-SR2</td>
<td>2018-10</td>
</tr>
<tr>
<td>2.1.4.RELEASE</td>
<td>2019-04</td>
<td>Greenwich.SR1</td>
<td>2019-03</td>
</tr>
</tbody></table>
<p><strong>使用后两个</strong></p>
<h2 id="创建父工程"><a href="#创建父工程" class="headerlink" title="创建父工程"></a>创建父工程</h2><ul>
<li>新建父工程项目 springcloud，切记<strong>Packageing 是 pom 模式</strong></li>
<li>主要是定义 POM 文件，将后续各个子模块公用的 jar 包等统一提取出来，类似一个抽象父类<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1654347345171-1fc18bb5-67f4-4660-b6fb-040e9115d853.png#clientId=udfe0731e-5af8-4&from=paste&id=ub0598a1d&name=image.png&originHeight=148&originWidth=435&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=13054&status=done&style=none&taskId=u648ce973-32e6-4e48-8ba4-79af5c929ba&title=" alt="image.png"></li>
</ul>
<p><strong>pom.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.haust<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-api<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-provider-dept-8001<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-consumer-dept-80<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-eureka-7001<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-eureka-7002<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-eureka-7003<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-provider-dept-8002<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-provider-dept-8003<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-consumer-dept-feign<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-provider-dept-hystrix-8001<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-consumer-hystrix-dashboard<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-zuul-9527<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-config-server-3344<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-config-client-3355<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-config-eureka-7001<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-config-dept-8001<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--打包方式  pom--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--springCloud的依赖--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Greenwich.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--SpringBoot--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--数据库--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--SpringBoot 启动器--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志测试~--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Sql在MySQL中的执行流程</title>
    <url>/yq/Sql%E5%9C%A8MySQL%E4%B8%AD%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<p>连接器 -》 查询缓存(8.0 后移除) -》分析器-》优化器-》执行器</p>
]]></content>
  </entry>
  <entry>
    <title>StringUtils</title>
    <url>/yq/StringUtils/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringEscapeUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> :  字符串工具类, 继承org.apache.commons.lang3.StringUtils类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/4/27</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringUtils</span> <span class="keyword">extends</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">commons</span>.<span class="title">lang3</span>.<span class="title">StringUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span> SEPARATOR = <span class="string">&#x27;_&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset UTF_8 = StandardCharsets.UTF_8;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换为字节数组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] getBytes(String str) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> str.getBytes(UTF_8);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">(<span class="keyword">final</span> String cs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;null&quot;</span>.equalsIgnoreCase(cs)||<span class="string">&quot;undefined&quot;</span>.equalsIgnoreCase(cs)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> org.apache.commons.lang3.StringUtils.isEmpty(cs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换为字节数组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(bytes, UTF_8);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否包含字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 验证字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> strs 字符串组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 包含返回true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">inString</span><span class="params">(String str, String... strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="keyword">null</span> &amp;&amp; strs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String s : strs) &#123;</span><br><span class="line">                <span class="keyword">if</span> (str.equals(trim(s))) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否包含字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 验证字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> strs 字符串组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 包含返回true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">inStringIgnoreCase</span><span class="params">(String str, String... strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="keyword">null</span> &amp;&amp; strs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String s : strs) &#123;</span><br><span class="line">                <span class="keyword">if</span> (str.equalsIgnoreCase(trim(s))) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 替换掉HTML标签方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">stripHtml</span><span class="params">(String html)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isBlank(html)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// html.replaceAll(&quot;\\&amp;[a-zA-Z]&#123;0,9&#125;;&quot;, &quot;&quot;).replaceAll(&quot;&lt;[^&gt;]*&gt;&quot;, &quot;&quot;);</span></span><br><span class="line">        String regEx = <span class="string">&quot;&lt;.+?&gt;&quot;</span>;</span><br><span class="line">        Pattern p = Pattern.compile(regEx);</span><br><span class="line">        Matcher m = p.matcher(html);</span><br><span class="line">        String s = m.replaceAll(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 替换为手机识别的HTML，去掉样式及属性，保留回车。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> html</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toMobileHtml</span><span class="params">(String html)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (html == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> html.replaceAll(<span class="string">&quot;&lt;([a-z]+?)\\s+?.*?&gt;&quot;</span>, <span class="string">&quot;&lt;$1&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对txt进行HTML编码，并将\n转换为&gt;br/&lt;、\t转换为   </span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> txt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toHtml</span><span class="params">(String txt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (txt == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> replace(replace(EncodeUtils.encodeHtml(trim(txt)), <span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&lt;br/&gt;&quot;</span>), <span class="string">&quot;\t&quot;</span>,</span><br><span class="line">                <span class="string">&quot;    &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缩略字符串（不区分中英文字符）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 目标字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 截取长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">abbr</span><span class="params">(String str, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">int</span> currentLength = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> c : stripHtml(StringEscapeUtils.unescapeHtml4(str)).toCharArray()) &#123;</span><br><span class="line">                currentLength += String.valueOf(c).getBytes(<span class="string">&quot;GBK&quot;</span>).length;</span><br><span class="line">                <span class="keyword">if</span> (currentLength &lt;= length - <span class="number">3</span>) &#123;</span><br><span class="line">                    sb.append(c);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sb.append(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;UnsupportedEncodingException&quot;</span>,e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缩略字符串替换Html正则表达式预编译</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern p1 = Pattern.compile(<span class="string">&quot;&lt;([a-zA-Z]+)[^&lt;&gt;]*&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缩略字符串（适应于与HTML标签的）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param 目标字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 截取长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">htmlAbbr</span><span class="params">(String param, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (param == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuffer result = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> temp;</span><br><span class="line">        <span class="keyword">boolean</span> isCode = <span class="keyword">false</span>; <span class="comment">// 是不是HTML代码</span></span><br><span class="line">        <span class="keyword">boolean</span> isHTML = <span class="keyword">false</span>; <span class="comment">// 是不是HTML特殊字符,如 </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; param.length(); i++) &#123;</span><br><span class="line">            temp = param.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="string">&#x27;&lt;&#x27;</span>) &#123;</span><br><span class="line">                isCode = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp == <span class="string">&#x27;&amp;&#x27;</span>) &#123;</span><br><span class="line">                isHTML = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp == <span class="string">&#x27;&gt;&#x27;</span> &amp;&amp; isCode) &#123;</span><br><span class="line">                n = n - <span class="number">1</span>;</span><br><span class="line">                isCode = <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp == <span class="string">&#x27;;&#x27;</span> &amp;&amp; isHTML) &#123;</span><br><span class="line">                isHTML = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!isCode &amp;&amp; !isHTML) &#123;</span><br><span class="line">                    n += String.valueOf(temp).getBytes(<span class="string">&quot;GBK&quot;</span>).length;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;UnsupportedEncodingException&quot;</span>,e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (n &lt;= length - <span class="number">3</span>) &#123;</span><br><span class="line">                result.append(temp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result.append(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 取出截取字符串中的HTML标记</span></span><br><span class="line">        String tempResult = result.toString().replaceAll(<span class="string">&quot;(&gt;)[^&lt;&gt;]*(&lt;?)&quot;</span>, <span class="string">&quot;$1$2&quot;</span>);</span><br><span class="line">        <span class="comment">// 去掉不需要结素标记的HTML标记</span></span><br><span class="line">        tempResult = tempResult</span><br><span class="line">                .replaceAll(<span class="string">&quot;&lt;/?(AREA|BASE|BASEFONT|BODY|BR|COL|COLGROUP|DD|DT|FRAME|HEAD|HR|&quot;</span></span><br><span class="line">                        + <span class="string">&quot;HTML|IMG|INPUT|ISINDEX|LI|LINK|META|OPTION|P|PARAM|TBODY|TD|TFOOT|TH|THEAD|TR|area|base|&quot;</span></span><br><span class="line">                        + <span class="string">&quot;basefont|body|br|col|colgroup|dd|dt|frame|head|hr|html|img|input|isindex|li|link|meta|&quot;</span></span><br><span class="line">                        + <span class="string">&quot;option|p|param|tbody|td|tfoot|th|thead|tr)[^&lt;&gt;]*/?&gt;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">// 去掉成对的HTML标记</span></span><br><span class="line">        tempResult = tempResult.replaceAll(<span class="string">&quot;&lt;([a-zA-Z]+)[^&lt;&gt;]*&gt;(.*?)&lt;/\\1&gt;&quot;</span>, <span class="string">&quot;$2&quot;</span>);</span><br><span class="line">        <span class="comment">// 用正则表达式取出标记</span></span><br><span class="line">        Matcher m = p1.matcher(tempResult);</span><br><span class="line">        List&lt;String&gt; endHTML = ListUtils.newArrayList();</span><br><span class="line">        <span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">            endHTML.add(m.group(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 补全不成对的HTML标记</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = endHTML.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            result.append(<span class="string">&quot;&lt;/&quot;</span>);</span><br><span class="line">            result.append(endHTML.get(i));</span><br><span class="line">            result.append(<span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首字母大写</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">cap</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> capitalize(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首字母小写</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">uncap</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uncapitalize(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 驼峰命名法工具</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> camelCase(&quot;hello_world&quot;) == &quot;helloWorld&quot; capCamelCase(&quot;hello_world&quot;) == &quot;HelloWorld&quot;</span></span><br><span class="line"><span class="comment">     *         uncamelCase(&quot;helloWorld&quot;) = &quot;hello_world&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">camelCase</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        s = s.toLowerCase();</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(s.length());</span><br><span class="line">        <span class="keyword">boolean</span> upperCase = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c == SEPARATOR) &#123;</span><br><span class="line">                upperCase = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (upperCase) &#123;</span><br><span class="line">                sb.append(Character.toUpperCase(c));</span><br><span class="line">                upperCase = <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 驼峰命名法工具</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> camelCase(&quot;hello_world&quot;) == &quot;helloWorld&quot; capCamelCase(&quot;hello_world&quot;) == &quot;HelloWorld&quot;</span></span><br><span class="line"><span class="comment">     *         uncamelCase(&quot;helloWorld&quot;) = &quot;hello_world&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">capCamelCase</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s = camelCase(s);</span><br><span class="line">        <span class="keyword">return</span> s.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + s.substring(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 驼峰命名法工具</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> camelCase(&quot;hello_world&quot;) == &quot;helloWorld&quot; capCamelCase(&quot;hello_world&quot;) == &quot;HelloWorld&quot;</span></span><br><span class="line"><span class="comment">     *         uncamelCase(&quot;helloWorld&quot;) = &quot;hello_world&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">uncamelCase</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">boolean</span> upperCase = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">boolean</span> nextUpperCase = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i &lt; (s.length() - <span class="number">1</span>)) &#123;</span><br><span class="line">                nextUpperCase = Character.isUpperCase(s.charAt(i + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((i &gt; <span class="number">0</span>) &amp;&amp; Character.isUpperCase(c)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!upperCase || !nextUpperCase) &#123;</span><br><span class="line">                    sb.append(SEPARATOR);</span><br><span class="line">                &#125;</span><br><span class="line">                upperCase = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                upperCase = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sb.append(Character.toLowerCase(c));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换为JS获取对象值，生成三目运算返回结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectString 对象串 例如：row.user.id 返回：!row?&#x27;&#x27;:!row.user?&#x27;&#x27;:!row.user.id?&#x27;&#x27;:row.user.id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">jsGetVal</span><span class="params">(String objectString)</span> </span>&#123;</span><br><span class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        StringBuilder val = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        String[] vals = split(objectString, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vals.length; i++) &#123;</span><br><span class="line">            val.append(<span class="string">&quot;.&quot;</span> + vals[i]);</span><br><span class="line">            result.append(<span class="string">&quot;!&quot;</span> + (val.substring(<span class="number">1</span>)) + <span class="string">&quot;?&#x27;&#x27;:&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        result.append(val.substring(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取随机字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getRandomStr</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] codeSeq = &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;O&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>&#125;;</span><br><span class="line">        Random random= <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            random = SecureRandom.getInstanceStrong();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Exception:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == random)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder s = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            String r = String.valueOf(codeSeq[random.nextInt(codeSeq.length)]);</span><br><span class="line">            s.append(r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取随机数字</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getRandomNum</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] codeSeq = &#123;<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>&#125;;</span><br><span class="line">        Random random= <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            random = SecureRandom.getInstanceStrong();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Exception:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == random)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder s = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            String r = String.valueOf(codeSeq[random.nextInt(codeSeq.length)]);</span><br><span class="line">            s.append(r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取树节点名字</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isShowCode 是否显示编码&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *        true or 1：显示在左侧：(code)name&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *        2：显示在右侧：name(code)&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *        false or null：不显示编码：name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 编码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getTreeNodeName</span><span class="params">(String isShowCode, String code, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;true&quot;</span>.equals(isShowCode) || <span class="string">&quot;1&quot;</span>.equals(isShowCode)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + code + <span class="string">&quot;) &quot;</span> + StringUtils.replace(name, <span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;2&quot;</span>.equals(isShowCode)) &#123;</span><br><span class="line">            <span class="keyword">return</span> StringUtils.replace(name, <span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>) + <span class="string">&quot; (&quot;</span> + code + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> StringUtils.replace(name, <span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;判断字符串是否是whitespace, empty (&quot;&quot;), &quot;null&quot; or null.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     * StringUtils.isBlank(null)      = true</span></span><br><span class="line"><span class="comment">     * StringUtils.isBlank(&quot;&quot;)        = true</span></span><br><span class="line"><span class="comment">     * StringUtils.isBlank(&quot;null&quot;)    = true</span></span><br><span class="line"><span class="comment">     * StringUtils.isBlank(&quot; &quot;)       = true</span></span><br><span class="line"><span class="comment">     * StringUtils.isBlank(&quot;bob&quot;)     = false</span></span><br><span class="line"><span class="comment">     * StringUtils.isBlank(&quot;  bob  &quot;) = false</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cs 被检测字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; 如果被检测的字符串是null, empty, &quot;null&quot; or whitespace</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isBlank</span><span class="params">(<span class="keyword">final</span> String cs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;null&quot;</span>.equalsIgnoreCase(cs)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> org.apache.commons.lang3.StringUtils.isBlank(cs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1Mb的二进制长度为20位：1024*1024</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ONE_MB_LENGTH = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMb</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] byteArray = getBytes(JsonUtils.toJson(obj));</span><br><span class="line">        <span class="keyword">int</span> byteCount = byteArray == <span class="keyword">null</span> ? <span class="number">0</span> : byteArray.length;</span><br><span class="line">        <span class="keyword">if</span> (byteCount == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// size = byteCount / (1*1024*1024)</span></span><br><span class="line">        <span class="comment">// 对除的结果进行下取整，1024刚好为2的10次方。采用位运算进行加速处理。</span></span><br><span class="line">        <span class="keyword">int</span> size = byteCount &gt;&gt; ONE_MB_LENGTH;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span> ? <span class="number">1</span> : size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1kb的二进制长度为10位：2的10次方 = 1024</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ONE_KB_LENGTH = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取入参大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getKb</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] byteArray = getBytes(JsonUtils.toJson(obj));</span><br><span class="line">        <span class="keyword">int</span> byteCount = byteArray.length;</span><br><span class="line">        <span class="keyword">if</span> (byteCount == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 对除的结果进行下取整，1024刚好为2的10次方。采用位运算进行加速处理。</span></span><br><span class="line">        <span class="keyword">int</span> size = byteCount &gt;&gt; ONE_KB_LENGTH;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span> ? <span class="number">1</span> : size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 截取字符串长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 原始字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subLength 要截取的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 截取后返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">subString</span><span class="params">(String msg,<span class="keyword">int</span> subLength)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (msg == <span class="keyword">null</span> || msg.length() &lt;= subLength) ? msg : msg.substring(subLength);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>String</title>
    <url>/yq/String/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串转char</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">char</span>[] toCharArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> isLatin1() ? StringLatin1.toChars(value)</span><br><span class="line">                          : StringUTF16.toChars(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 忽略大小写比较</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equalsIgnoreCase</span><span class="params">(String anotherString)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span> == anotherString) ? <span class="keyword">true</span></span><br><span class="line">                : (anotherString != <span class="keyword">null</span>)</span><br><span class="line">                &amp;&amp; (anotherString.length() == length())</span><br><span class="line">                &amp;&amp; regionMatches(<span class="keyword">true</span>, <span class="number">0</span>, anotherString, <span class="number">0</span>, length());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断长度为空  since 1.6</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value.length == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** todo 截取字符串长度，从零坐标开始，左闭右开</span></span><br><span class="line"><span class="comment">     * Returns a new &#123;<span class="doctag">@code</span> String&#125; that contains a subsequence of</span></span><br><span class="line"><span class="comment">     * characters currently contained in this sequence. The</span></span><br><span class="line"><span class="comment">     * substring begins at the specified &#123;<span class="doctag">@code</span> start&#125; and</span></span><br><span class="line"><span class="comment">     * extends to the character at index &#123;<span class="doctag">@code</span> end - 1&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>      start    The beginning index, inclusive.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>      end      The ending index, exclusive.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>     The new string.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>     StringIndexOutOfBoundsException  if &#123;<span class="doctag">@code</span> start&#125;</span></span><br><span class="line"><span class="comment">     *             or &#123;<span class="doctag">@code</span> end&#125; are negative or greater than</span></span><br><span class="line"><span class="comment">     *             &#123;<span class="doctag">@code</span> length()&#125;, or &#123;<span class="doctag">@code</span> start&#125; is</span></span><br><span class="line"><span class="comment">     *             greater than &#123;<span class="doctag">@code</span> end&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        checkRangeSIOOBE(start, end, count);</span><br><span class="line">        <span class="keyword">if</span> (isLatin1()) &#123;</span><br><span class="line">            <span class="keyword">return</span> StringLatin1.newString(value, start, end - start);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> StringUTF16.newString(value, start, end - start);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>VUE学习</title>
    <url>/yq/VUE%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><p>2022.11.11 - 2022.11.25 看完课程</p>
<h1 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h1>]]></content>
  </entry>
  <entry>
    <title>XXJOB</title>
    <url>/yq/XXJOB/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>canel</title>
    <url>/yq/canel/</url>
    <content><![CDATA[<p>参考链接 <a href="https://developer.aliyun.com/article/770496">https://developer.aliyun.com/article/770496</a></p>
]]></content>
  </entry>
  <entry>
    <title>case 积累</title>
    <url>/yq/case%20%E7%A7%AF%E7%B4%AF/</url>
    <content><![CDATA[<p>mysql InnoDB 和 MyIsam 锁<br>InnoDB:行锁，where 字段不是索引有可能造成锁表，此时事务未提交时，其他对表的操作可能无法进行，导致抢锁失败；</p>
<p>MyIsam:表锁</p>
]]></content>
  </entry>
  <entry>
    <title>java</title>
    <url>/yq/java/</url>
    <content><![CDATA[<p>学海无涯，永无止境。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1648227147072-e01475f0-86bb-4729-95ec-5250b16e6acb.png#clientId=u0f93f4f4-d733-4&from=paste&height=964&id=u726029de&name=a28cbf9a1e28c506cea392c9a48e01f8.png&originHeight=1205&originWidth=1080&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=308900&status=done&style=none&taskId=u51ecbc53-5a40-48c7-91d3-f74e81159ea&title=&width=864" alt="a28cbf9a1e28c506cea392c9a48e01f8.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1648227168655-e8c0fff0-75e8-4435-b229-851e3df51ed3.png#clientId=u0f93f4f4-d733-4&from=paste&height=1022&id=uac839f80&name=055ae16ce36b31ea23851ed3faaa7976.png&originHeight=1278&originWidth=1080&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=376753&status=done&style=none&taskId=ucd4aedb1-a4b9-4220-b114-7ca582ddd1e&title=&width=864" alt="055ae16ce36b31ea23851ed3faaa7976.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1648227184268-61a94399-2c03-4ec0-bc00-d2ea967985eb.png#clientId=u0f93f4f4-d733-4&from=paste&height=1046&id=u8ffea3b7&name=a55e9dc5d3d2d7009381ae8942a01dee.png&originHeight=1308&originWidth=1080&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=387789&status=done&style=none&taskId=u01ab4ee2-1bcc-4e48-af31-9f7db8accbb&title=&width=864" alt="a55e9dc5d3d2d7009381ae8942a01dee.png"></p>
]]></content>
  </entry>
  <entry>
    <title>hashCode</title>
    <url>/yq/hashCode/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>hashCode() 的作用是获取哈希码（int 整数），也称为散列码。这个哈希码的作用是确定该对象在哈希表中的索引位置。<br>hashCode()定义在 JDK 的 Object 类中，这就意味着 Java 中的任何类都包含有 hashCode() 函数。另外需要注意的是： Object 的 hashCode() 方法是本地方法，也就是用 C 语言或 C++ 实现的，该方法通常用来将对象的内存地址转换为整数之后返回。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>散列表存储的是键值对(key-value)，它的特点是：<strong>能根据“键”快速的检索出对应的“值”。这其中就利用到了散列码！（可以快速找到所需要的对象）</strong></p>
<h1 id="为什么要有-hashCode"><a href="#为什么要有-hashCode" class="headerlink" title="为什么要有 hashCode"></a>为什么要有 hashCode</h1><p>我们以“HashSet 如何检查重复”为例子来说明为什么要有 hashCode？<br>下面这段内容摘自我的 Java 启蒙书《Head First Java》:</p>
<blockquote>
<p><strong>当你把对象加入 HashSet 时，HashSet 会先计算对象的 hashCode 值来判断对象加入的位置，同时也会与其他已经加入的对象的 hashCode 值作比较，如果没有相符的 hashCode，HashSet 会假设对象没有重复出现。但是如果发现有相同 hashCode 值的对象，这时会调用 equals() 方法来检查 hashCode 相等的对象是否真的相同。如果两者相同，HashSet 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。这样我们就大大减少了 equals 的次数，相应就大大提高了执行速度。</strong></p>
</blockquote>
<p>其实， hashCode() 和 equals()都是用于比较两个对象是否相等。<br><strong>那为什么 JDK 还要同时提供这两个方法呢？</strong><br>这是因为在一些容器（比如 HashMap、HashSet）中，有了 hashCode() 之后，判断元素是否在对应容器中的效率会更高（参考添加元素进 HashSet 的过程）！<br>我们在前面也提到了添加元素进 HashSet 的过程，如果 HashSet 在对比的时候，同样的 hashCode 有多个对象，它会继续使用 equals() 来判断是否真的相同。也就是说 hashCode 帮助我们大大缩小了查找成本。<br><strong>那为什么不只提供 hashCode() 方法呢？</strong><br>这是因为两个对象的 hashCode 值相等并不代表两个对象就相等。<br><strong>那为什么两个对象有相同的 hashCode 值，它们也不一定是相等的？</strong><br>因为 hashCode() 所使用的哈希算法也许刚好会让多个对象传回相同的哈希值。越糟糕的哈希算法越容易碰撞，但这也与数据值域分布的特性有关（**所谓哈希碰撞也就是指的是不同的对象得到相同的 hashCode **)。<br>总结下来就是 ：</p>
<ul>
<li>如果两个对象的 hashCode 值相等，那这两个对象不一定相等（哈希碰撞）。</li>
<li>如果两个对象的 hashCode 值相等并且 equals()方法也返回 true，我们才认为这两个对象相等。</li>
<li>如果两个对象的 hashCode 值不相等，我们就可以直接认为这两个对象不相等。</li>
</ul>
<p>相信大家看了我前面对 hashCode() 和 equals() 的介绍之后，下面这个问题已经难不倒你们了。</p>
<h1 id="为什么重写-equals-时必须重写-hashCode-方法？"><a href="#为什么重写-equals-时必须重写-hashCode-方法？" class="headerlink" title="为什么重写 equals() 时必须重写 hashCode() 方法？"></a>为什么重写 equals() 时必须重写 hashCode() 方法？</h1><p>因为两个相等的对象的 hashCode 值必须是相等。也就是说如果 equals 方法判断两个对象是相等的，那这两个对象的 hashCode 值也要相等。<br>如果重写 equals() 时没有重写 hashCode() 方法的话就可能会导致 equals 方法判断是相等的两个对象，hashCode 值却不相等。<br><strong>思考</strong> ：重写 equals() 时没有重写 hashCode() 方法的话，使用 HashMap 可能会出现什么问题。<br><strong>总结</strong> ：</p>
<ul>
<li>equals 方法判断两个对象是相等的，那这两个对象的 hashCode 值也要相等。</li>
<li>两个对象有相同的 hashCode 值，他们也不一定是相等的（哈希碰撞）。</li>
</ul>
<p>更多关于 hashCode() 和 equals() 的内容可以查看：<a href="https://www.cnblogs.com/skywang12345/p/3324958.html">Java hashCode() 和 equals()的若干问题解答</a></p>
<blockquote>
<p>hashCode 的出现是为了减少 equals 的次数，这样可提高查询速度。<br>hashcode 只是用来缩小查找成本。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>springBoot 数据源切换</title>
    <url>/yq/springBoot%20%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>自定义 DynamicDataSource 继承 AbstractRoutingDataSource，重写 determineCurrentLookupKey（）获取数据源 key 值实现数据源的切换。</p>
<h2 id="DynamicDataSource"><a href="#DynamicDataSource" class="headerlink" title="DynamicDataSource"></a>DynamicDataSource</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.why.datasource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扩展 Spring 的 AbstractRoutingDataSource 抽象类，重写 determineCurrentLookupKey 方法</span></span><br><span class="line"><span class="comment"> * 动态数据源</span></span><br><span class="line"><span class="comment"> * determineCurrentLookupKey() 方法决定使用哪个数据源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ThreadLocal 用于提供线程局部变量，在多线程环境可以保证各个线程里的变量独立于其它线程里的变量。</span></span><br><span class="line"><span class="comment">     * 也就是说 ThreadLocal 可以为每个线程创建一个【单独的变量副本】，相当于线程的 private static 类型变量。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; CONTEXT_HOLDER = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 决定使用哪个数据源之前需要把多个数据源的信息以及默认数据源信息配置好</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defaultTargetDataSource 默认数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetDataSources       目标数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicDataSource</span><span class="params">(DataSource defaultTargetDataSource, Map&lt;Object, Object&gt; targetDataSources)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setDefaultTargetDataSource(defaultTargetDataSource);</span><br><span class="line">        <span class="keyword">super</span>.setTargetDataSources(targetDataSources);</span><br><span class="line">        <span class="keyword">super</span>.afterPropertiesSet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从当前线程中取出放进去的datasource的键值</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(String dataSource)</span> </span>&#123;</span><br><span class="line">        CONTEXT_HOLDER.set(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CONTEXT_HOLDER.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CONTEXT_HOLDER.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="DynamicDataSourceConfig-配置数据源"><a href="#DynamicDataSourceConfig-配置数据源" class="headerlink" title="DynamicDataSourceConfig 配置数据源"></a>DynamicDataSourceConfig 配置数据源</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.why.datasource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置多数据源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(&quot;spring.datasource.druid.first&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">firstDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(&quot;spring.datasource.druid.second&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">secondDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DynamicDataSource <span class="title">dataSource</span><span class="params">(<span class="meta">@Qualifier(&quot;firstDataSource&quot;)</span> DataSource firstDataSource1,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        <span class="meta">@Qualifier(&quot;secondDataSource&quot;)</span> DataSource secondDataSource1)</span> </span>&#123;</span><br><span class="line">        Map&lt;Object, Object&gt; targetDataSources = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">5</span>);</span><br><span class="line">        targetDataSources.put(DataSourceNames.FIRST, firstDataSource1);</span><br><span class="line">        targetDataSources.put(DataSourceNames.SECOND, secondDataSource1);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DynamicDataSource(firstDataSource1, targetDataSources);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="CurDataSource-注解类"><a href="#CurDataSource-注解类" class="headerlink" title="CurDataSource 注解类"></a>CurDataSource 注解类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.why.datasource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多数据源注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CurDataSource &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="AbstractRoutingDataSource-核心方法"><a href="#AbstractRoutingDataSource-核心方法" class="headerlink" title="AbstractRoutingDataSource 核心方法"></a>AbstractRoutingDataSource 核心方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化数据源</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.targetDataSources == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Property &#x27;targetDataSources&#x27; is required&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">this</span>.resolvedDataSources = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="keyword">this</span>.targetDataSources.size());</span><br><span class="line">		<span class="keyword">this</span>.targetDataSources.forEach((key, value) -&gt; &#123;</span><br><span class="line">			Object lookupKey = resolveSpecifiedLookupKey(key);</span><br><span class="line">			DataSource dataSource = resolveSpecifiedDataSource(value);</span><br><span class="line">			<span class="keyword">this</span>.resolvedDataSources.put(lookupKey, dataSource);</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.defaultTargetDataSource != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">this</span>.resolvedDefaultDataSource = resolveSpecifiedDataSource(<span class="keyword">this</span>.defaultTargetDataSource);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取源链接</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> determineTargetDataSource().getConnection();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// determineCurrentLookupKey()获取当前线程的数据源名称</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> DataSource <span class="title">determineTargetDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Assert.notNull(<span class="keyword">this</span>.resolvedDataSources, <span class="string">&quot;DataSource router not initialized&quot;</span>);</span><br><span class="line">		Object lookupKey = determineCurrentLookupKey();</span><br><span class="line">		DataSource dataSource = <span class="keyword">this</span>.resolvedDataSources.get(lookupKey);</span><br><span class="line">		<span class="keyword">if</span> (dataSource == <span class="keyword">null</span> &amp;&amp; (<span class="keyword">this</span>.lenientFallback || lookupKey == <span class="keyword">null</span>)) &#123;</span><br><span class="line">			dataSource = <span class="keyword">this</span>.resolvedDefaultDataSource;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (dataSource == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Cannot determine target DataSource for lookup key [&quot;</span> + lookupKey + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> dataSource;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2021/png/22422342/1635084132291-6a9fb5f4-54d6-4692-af0e-a9837950e6c1.png#clientId=u138dfad6-60cc-4&from=paste&height=411&id=u2cb0526d&name=image.png&originHeight=821&originWidth=848&originalType=binary%E2%88%B6=1&size=165015&status=done&style=none&taskId=u90502888-2fe5-43e0-814b-000077aa454&width=424" alt="image.png"></p>
]]></content>
  </entry>
  <entry>
    <title>spring事务传播机制</title>
    <url>/yq/spring%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>参考链接<br><a href="https://blog.csdn.net/qq_44956318/article/details/119110150">https://blog.csdn.net/qq_44956318/article/details/119110150</a><br><a href="https://zhuanlan.zhihu.com/p/148504094">https://zhuanlan.zhihu.com/p/148504094</a></p>
<p>注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation =Propagation.REQUIRED)</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>分组</th>
<th>类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>支持当前事务</td>
<td><strong>REQUIRED</strong></td>
<td>如果当前方法没有事务，新建一个事务，如果已经存在一个事务中，则加入到这个事务中。</td>
</tr>
<tr>
<td></td>
<td><strong>SUPPORTS</strong></td>
<td>支持当前事务，如果当前没有事务，就以非事务方式执行</td>
</tr>
<tr>
<td></td>
<td><strong>MANDATORY</strong></td>
<td>使用当前的事务，如果当前没有事务，就抛出异常。</td>
</tr>
<tr>
<td>不支持当前事务</td>
<td><strong>REQUIRES_NEW</strong></td>
<td>新建事务，如果当前存在事务，把当前事务挂起。</td>
</tr>
<tr>
<td></td>
<td><strong>NOT_SUPPORTED</strong></td>
<td>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</td>
</tr>
<tr>
<td></td>
<td><strong>NEVER</strong></td>
<td>以非事务方式执行，如果当前存在事务，则抛出异常。</td>
</tr>
<tr>
<td>NESTED</td>
<td>NESTED</td>
<td>如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与 PROPAGATION_REQUIRED 类似的操作。</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>k8s</title>
    <url>/yq/k8s/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>zuul 网关</title>
    <url>/yq/zuul%20%E7%BD%91%E5%85%B3/</url>
    <content><![CDATA[<p>api 网关，路由，负载均衡等多种作用</p>
]]></content>
  </entry>
  <entry>
    <title>synchronized 和volatile</title>
    <url>/yq/synchronized%20%E5%92%8Cvolatile/</url>
    <content><![CDATA[<h1 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h1><h2 id="底层实现原理"><a href="#底层实现原理" class="headerlink" title="底层实现原理"></a>底层实现原理</h2><p>synchronized 是由一对 monitorenter/monitorexit 指令实现的，monitor 对象是同步的基本实现单元。在 <strong>Java 6</strong> 之前，monitor 的实现完全是<strong>依靠操作系统内部的互斥锁</strong>，因为需要进行<strong>用户态到内核态的切换</strong>，所以<strong>同步操作是一个无差别的重量级操作，性能也很低</strong>。但在 Java 6 的时候，Java 虚拟机 对此进行了大刀阔斧地改进，提供了三种不同的 monitor 实现，也就是常说的三种不同的锁：<strong>偏向锁（Biased Locking）、轻量级锁和重量级锁</strong>，大大改进了其性能。<br><strong>ps</strong>: <strong>用户态</strong>可以理解为用户能直接操作的 APP,以前用户可以直接通过用户态访问硬件，操作 内存、网卡、显示器等，这样是很消耗性能的，很容易让机器造成死机，现在相当于是加入了<strong>内核态</strong>（kernel），用户现在要去访问硬盘呀或者是做一些危险的操作的时候，就会通过内核态去访问。</p>
<h2 id="synchronized-锁升级原理"><a href="#synchronized-锁升级原理" class="headerlink" title="synchronized 锁升级原理"></a>synchronized 锁升级原理</h2><p>在锁对象的对象头里面有一个 threadid 字段，在<strong>第一次访问的时候 threadid 为空</strong>，jvm 让其持有<strong>偏向锁</strong>，并将 threadid 设置为其线程 id，再次进入的时候会先判断 threadid 是否与其线程 id 一致，<strong>如果一致则可以直接使用此对象</strong>；<strong>如果不一致，则升级偏向锁为轻量级锁</strong>，通过<strong>自旋循环</strong>一定次数来获取锁，执行一定次数之后，如果<strong>还没有正常获取到要使用的对象</strong>（<strong>CAS</strong>），此时就会把锁<strong>从轻量级升级为重量级锁，此过程就构成了 synchronized 锁的升级</strong>。（早期属于重量级锁，是需要经过操作系统允许，后来改进后大多数情况是不需要了） 概括： <strong>偏向锁-&gt;自旋锁（CAS）-&gt;重量级锁</strong><br>锁的升级的目的：<strong>锁升级是为了减低了锁带来的性能消耗</strong>。在 Java 6 之后优化 synchronized 的实现方式，使用了偏向锁升级为轻量级锁再升级到重量级锁的方式，从而减低了锁带来的性能消耗。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1654130894239-77969ee9-0a2f-4617-8b50-7a527218b20b.png#clientId=ubca178e7-e838-4&from=paste&height=391&id=u8552a8a9&name=image.png&originHeight=782&originWidth=1430&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=193310&status=done&style=none&taskId=ufaa94453-192a-4ded-8514-66814790dbc&title=&width=715" alt="image.png"></h2><h1 id="volatile-重点"><a href="#volatile-重点" class="headerlink" title="volatile(重点)"></a>volatile(重点)</h1><p>当一个变量被 volatile 修饰时，任何线程对它的写操作都会立即刷新到主内存中，并且会强制让缓存了该变量的线程中的数据清空，必须从主内存重新读取最新数据。<br>_volatile 修饰之后并不是让线程直接从主内存中获取数据，依然需要将变量拷贝到工作内存中_。</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul>
<li>多线程主要围绕<strong>可见性</strong>和<strong>原子性</strong>两个特性而展开，使用 volatile 关键字修饰的变量，保证了其在多线程之间的可见性，即每次读取到 volatile 变量，一定是最新的数据，但是它不能保证原子性。</li>
</ul>
<p>为什么不能保证原子性呢？<br>首先需要了解的是，Java 中只有对基本类型变量的赋值和读取是原子操作，如 i = 1 的赋值操作，但是像 j = i 或者 i++这样的操作都不是原子操作，因为他们都进行了多次原子操作，比如先读取 i 的值，再将 i 的值赋值给 j，两个原子操作加起来就不是原子操作了。<br>所以，如果一个变量被 volatile 修饰了，那么肯定可以保证每次读取这个变量值的时候得到的值是最新的，但是一旦需要对变量进行自增这样的非原子操作，就不会保证这个变量的原子性了。<br>举个栗子<br>一个变量 i 被 volatile 修饰，两个线程想对这个变量修改，都对其进行自增操作也就是 i++，i++的过程可以分为三步，首先获取 i 的值，其次对 i 的值进行加 1，最后将得到的新值写会到缓存中。<br>线程 A 首先得到了 i 的初始值 100，但是还没来得及修改，就阻塞了，这时线程 B 开始了，它也得到了 i 的值，由于 i 的值未被修改，即使是被 volatile 修饰，主存的变量还没变化，那么线程 B 得到的值也是 100，之后对其进行加 1 操作，得到 101 后，将新值写入到缓存中，再刷入主存中。根据可见性的原则，这个主存的值可以被其他线程可见。<br>问题来了，线程 A 已经读取到了 i 的值为 100，也就是说读取的这个原子操作已经结束了，所以这个可见性来的有点晚，线程 A 阻塞结束后，继续将 100 这个值加 1，得到 101，再将值写到缓存，最后刷入主存，所以即便是 volatile 具有可见性，也不能保证对它修饰的变量具有原子性。<br>原文链接：<a href="https://blog.csdn.net/xdzhouxin/article/details/81236356">https://blog.csdn.net/xdzhouxin/article/details/81236356</a></p>
<h1 id="如何防止死锁"><a href="#如何防止死锁" class="headerlink" title="如何防止死锁"></a>如何防止死锁</h1><p>1、尽量使用 tryLock(long timeout, TimeUnit unit)的方法(ReentrantLockReentrantReadWriteLock)，<br>2、设置超时时间，超时可以退出防止死锁。<br>3、尽量使用 Java. util. concurrent 并发类代替自己手写锁。<br>4、尽量降低锁的使用粒度，尽量不要几个功能用同一把锁。<br>5、尽量减少同步的代码块。</p>
<h1 id="synchronized-和-volatile-的区别"><a href="#synchronized-和-volatile-的区别" class="headerlink" title="synchronized 和 volatile 的区别"></a>synchronized 和 volatile 的区别</h1><ul>
<li>volatile 修饰变量；synchronized 修饰方法、代码段、类</li>
<li>volatile 仅能实现变量的修改可见性，不能保证原子性；synchronized 都可以；</li>
<li>volatile 不会造成线程的阻塞；synchronized 有可能造成阻塞；</li>
<li>volatile 标记的变量不会被编译器优化；synchronized 标记的变量可以被编译器优化；</li>
<li>volatile 可以防止指令重排。（volatile 关键字通过“内存屏障”来防止指令被重排序。）</li>
</ul>
<h1 id="synchronized-和-Lock-有什么区别？"><a href="#synchronized-和-Lock-有什么区别？" class="headerlink" title="synchronized 和 Lock 有什么区别？"></a>synchronized 和 Lock 有什么区别？</h1><ul>
<li>synchronized 可以给类、方法、代码块加锁；而 lock 只能给代码块加锁。</li>
<li>synchronized 不需要手动获取锁和释放锁，使用简单，发生异常会自动释放锁，不会造成死锁；而 lock 需要自己加锁和释放锁，如果使用不当没有 unLock()去释放锁就会造成死锁。</li>
<li>通过 Lock 可以知道有没有成功获取锁，而 synchronized 却无法办到。</li>
</ul>
<h1 id="synchronized-和-ReentrantLock-区别是什么？"><a href="#synchronized-和-ReentrantLock-区别是什么？" class="headerlink" title="synchronized 和 ReentrantLock 区别是什么？"></a>synchronized 和 ReentrantLock 区别是什么？</h1><p>synchronized 早期的实现比较低效，对比 ReentrantLock，大多数场景性能都相差较大，但是在 Java 6 中对 synchronized 进行了非常多的改进。<br>主要区别如下：</p>
<ul>
<li>ReentrantLock 使用起来比较灵活，但是必须有释放锁的配合动作；</li>
<li>ReentrantLock 必须手动获取与释放锁，而 synchronized 不需要手动释放和开启锁；</li>
<li>ReentrantLock 只适用于代码块锁，而 synchronized 可用于修饰方法、代码块等。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>一级缓存和二级缓存</title>
    <url>/yq/%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E5%92%8C%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<p>Mybatis 对缓存提供支持，一级缓存是默认使用的，二级缓存需要手动开启。</p>
<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><p>一级缓存的作用域是一个 sqlsession 内；<br>二级缓存作用域是针对 mapper 进行缓存；</p>
<h1 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h1><p>在参数和 SQL 完全一样的情况下，我们使用同一个 SqlSession 对象调用一个 Mapper 方法，往往只执行一次 SQL，因为使用 SelSession 第一次查询后，MyBatis 会将其放在缓存中，以后再查询的时候，如果没有声明需要刷新，并且缓存没有超时的情况下，SqlSession 都会取出当前缓存的数据，而不会再次发送 SQL 到数据库。</p>
<p>一级缓存时执行 commit，close，增删改等操作，就会清空当前的一级缓存；当对 SqlSession 执行更新操作（update、delete、insert）后并执行 commit 时，不仅清空其自身的一级缓存（执行更新操作的效果），也清空二级缓存（执行 commit()的效果）。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1654409224543-91c0170b-c142-47e9-a4b3-2dfed01c9f13.png#clientId=u4b9e3ba3-0690-4&from=paste&height=120&id=uc2466009&name=image.png&originHeight=239&originWidth=640&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=81073&status=done&style=none&taskId=ud28dd3a7-2a2e-4a56-a02e-ac37ed1650f&title=&width=320" alt="image.png"></p>
<h1 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h1><p>二级缓存指的就是同一个 namespace 下的 mapper，二级缓存中，也有一个 map 结构，这个区域就是一级缓存区域。一级缓存中的 key 是由 sql 语句、条件、statement 等信息组成一个唯一值。一级缓存中的 value，就是查询出的结果对象。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1654409239896-16392009-eb46-4946-94f5-170014331862.png#clientId=u4b9e3ba3-0690-4&from=paste&height=242&id=u12cd34e3&name=image.png&originHeight=484&originWidth=635&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=199945&status=done&style=none&taskId=ud33ee1f4-fb11-47d7-8380-d0baababe02&title=&width=317.5" alt="image.png"></p>
<h2 id="1、在配置文件中-开启二级缓存的总开关"><a href="#1、在配置文件中-开启二级缓存的总开关" class="headerlink" title="1、在配置文件中 开启二级缓存的总开关"></a>1、在配置文件中 开启二级缓存的总开关</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2、-在-mapper-映射文件中开启二级缓存"><a href="#2、-在-mapper-映射文件中开启二级缓存" class="headerlink" title="2、 在 mapper 映射文件中开启二级缓存"></a>2、 在 mapper 映射文件中开启二级缓存</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span> <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span> <span class="attr">size</span>=<span class="string">&quot;512&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>参数名属性 eviction 收回策略 flushInterval 刷新间隔 size 引用数目 readOnly 只读</p>
<h3 id="关于-eviction-的各个参数属性"><a href="#关于-eviction-的各个参数属性" class="headerlink" title="关于 eviction 的各个参数属性:"></a>关于 eviction 的各个参数属性:</h3><p>参数名属性 eviction=”LRU”最近最少使用的:移除最长时间不被使用的对象。<br>（默认）eviction=”FIFO”先进先出:按对象进入缓存的顺序来移除它们。<br>eviction=”SOFT”软引用:移除基于垃圾回收器状态和软引用规则的对象。<br>eviction=”WEAK”弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象。</p>
<h2 id="3、实体类实现-Serializable"><a href="#3、实体类实现-Serializable" class="headerlink" title="3、实体类实现 Serializable"></a>3、实体类实现 Serializable</h2><h2 id="禁用缓存"><a href="#禁用缓存" class="headerlink" title="禁用缓存"></a>禁用缓存</h2><p>如测试 sql 语句性能时缓存会影响测试准确性 需要禁用在映射文件中：默认值是 true useCache=”false”</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllPets&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;petsMap&quot;</span> <span class="attr">useCache</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line"> select * from pets</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>刷新缓存<br>在映射文件中：属性：flushCache=”true”刷新缓存，在查询语句中，默认值是 false，在新增删除修改语句中，默认值是 true（清空缓存）<br><a href="https://blog.csdn.net/banzhuanhu/article/details/110201816">
</a></p>
]]></content>
  </entry>
  <entry>
    <title>三大特征</title>
    <url>/yq/%E4%B8%89%E5%A4%A7%E7%89%B9%E5%BE%81/</url>
    <content><![CDATA[<h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><p>封装是指把一个对象的状态信息（也就是属性）隐藏在对象内部，不允许外部对象直接访问对象的内部信息。但是可以提供一些可以被外界访问的方法来操作属性。就好像我们看不到挂在墙上的空调的内部的零件信息（也就是属性），但是可以通过遥控器（方法）来控制空调。如果属性不想被外界访问，我们大可不必提供方法给外界访问。但是如果一个类没有提供给外界访问的方法，那么这个类也没有什么意义了。就好像如果没有空调遥控器，那么我们就无法操控空凋制冷，空调本身就没有意义了（当然现在还有很多其他方法 ，这里只是为了举例子）。</p>
<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>不同类型的对象，相互之间经常有一定数量的共同点。例如，小明同学、小红同学、小李同学，都共享学生的特性（班级、学号等）。同时，每一个对象还定义了额外的特性使得他们与众不同。例如小明的数学比较好，小红的性格惹人喜爱；小李的力气比较大。继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承，可以快速地创建新的类，可以提高代码的重用，程序的可维护性，节省大量创建新类的时间 ，提高我们的开发效率。<br><strong>关于继承如下 3 点请记住：</strong></p>
<ol>
<li>子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，<strong>只是拥有</strong>。</li>
<li>子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</li>
<li>子类可以用自己的方式实现父类的方法。（以后介绍）。</li>
</ol>
<h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>多态，顾名思义，表示一个对象具有多种的状态，具体表现为父类的引用指向子类的实例。<br><strong>多态的特点:</strong></p>
<ul>
<li>对象类型和引用类型之间具有继承（类）/实现（接口）的关系；</li>
<li>引用类型变量发出的方法调用的到底是哪个类中的方法，必须在程序运行期间才能确定；</li>
<li>多态不能调用“只在子类存在但在父类不存在”的方法；</li>
<li>如果子类重写了父类的方法，真正执行的是子类覆盖的方法，如果子类没有覆盖父类的方法，执行的是父类的方法。</li>
<li>在多态形式下，右边对象可以解耦合，便于扩展和维护。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>业务未执行完毕锁却过期了怎么办？</title>
    <url>/yq/%E4%B8%9A%E5%8A%A1%E6%9C%AA%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%AF%95%E9%94%81%E5%8D%B4%E8%BF%87%E6%9C%9F%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>两数之和</title>
    <url>/yq/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>1、两层循环暴力破解<br>2、map 集合</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h2><h2 id="map-集合"><a href="#map-集合" class="headerlink" title="map 集合"></a>map 集合</h2>]]></content>
  </entry>
  <entry>
    <title>三次握手两次挥手</title>
    <url>/yq/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%A4%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
    <content><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1656263410530-8f2cea36-a0f4-449d-94a6-e7d0bd284ed5.png#clientId=uc5b12fed-1863-4&from=paste&height=866&id=u8ef891d4&name=c6c36c54f016bbaac34d6754a8ef5d04.png&originHeight=1083&originWidth=1280&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=258245&status=done&style=none&taskId=u51a081da-1076-4e31-8345-b93fd047d76&title=&width=1024" alt="c6c36c54f016bbaac34d6754a8ef5d04.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1656263784682-a3fc2129-ec27-48c6-b448-953edff13d3c.png#clientId=uc5b12fed-1863-4&from=paste&height=834&id=uadcfdd14&name=ea6301e9ad9a33a19e505115f826983f.png&originHeight=1042&originWidth=1280&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=236232&status=done&style=none&taskId=ub160585d-71c6-42a7-8ccd-6cf80ffed49&title=&width=1024" alt="ea6301e9ad9a33a19e505115f826983f.png"></p>
]]></content>
  </entry>
  <entry>
    <title>主题和队列的区别</title>
    <url>/yq/%E4%B8%BB%E9%A2%98%E5%92%8C%E9%98%9F%E5%88%97%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>参考：<a href="https://www.cnblogs.com/chjxbt/p/11407890.html">https://www.cnblogs.com/chjxbt/p/11407890.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>事务相关</title>
    <url>/yq/%E4%BA%8B%E5%8A%A1%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h1 id="spring-事务-Transactional-在同一个类中的方法调用不生效"><a href="#spring-事务-Transactional-在同一个类中的方法调用不生效" class="headerlink" title="spring 事务@Transactional 在同一个类中的方法调用不生效"></a>spring 事务@Transactional 在同一个类中的方法调用不生效</h1><p>参考链接：<a href="https://blog.csdn.net/qq_30336433/article/details/83338835">https://blog.csdn.net/qq_30336433/article/details/83338835</a></p>
<p>Transactional 是 Spring 提供的事务管理注解。<br>重点在于，Spring 采用动态代理(AOP)实现对 bean 的管理和切片，它为我们的每个 class 生成一个代理对象。只有在代理对象之间进行调用时，可以触发切面逻辑。<br>而在同一个 class 中，方法 B 调用方法 A，调用的是原对象的方法，而不通过代理对象。所以 Spring 无法切到这次调用，也就无法通过注解保证事务性了。<br>也就是说，在同一个类中的方法调用，则不会被方法拦截器拦截到，因此事务不会起作用。</p>
<h1 id="spring-事务传播机制"><a href="#spring-事务传播机制" class="headerlink" title="spring 事务传播机制"></a>spring 事务传播机制</h1>]]></content>
  </entry>
  <entry>
    <title>互斥同步</title>
    <url>/yq/%E4%BA%92%E6%96%A5%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<p>Java 提供了两种锁机制来控制多个线程对共享资源的互斥访问，第一个是 JVM 实现的 synchronized，而另一个是 JDK 实现的 ReentrantLock。</p>
<h1 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h1><ol>
<li>同步一个代码块</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它只作用于同一个对象，如果调用两个对象上的同步代码块，就不会进行同步。</p>
<p>对于以下代码，使用 ExecutorService 执行了两个线程，由于调用的是同一个对象的同步代码块，因此这两个线程会进行同步，当一个线程进入同步语句块时，另一个线程就必须等待。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SynchronizedExample e1 = <span class="keyword">new</span> SynchronizedExample();</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    executorService.execute(() -&gt; e1.func1());</span><br><span class="line">    executorService.execute(() -&gt; e1.func1());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br></pre></td></tr></table></figure>

<p>对于以下代码，两个线程调用了不同对象的同步代码块，因此这两个线程就不需要同步。从输出结果可以看出，两个线程交叉执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SynchronizedExample e1 = <span class="keyword">new</span> SynchronizedExample();</span><br><span class="line">    SynchronizedExample e2 = <span class="keyword">new</span> SynchronizedExample();</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    executorService.execute(() -&gt; e1.func1());</span><br><span class="line">    executorService.execute(() -&gt; e2.func1());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>同步一个方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">func</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它和同步代码块一样，作用于同一个对象。</p>
<ol start="3">
<li>同步一个类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (SynchronizedExample.class) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>作用于整个类，也就是说两个线程调用同一个类的不同对象上的这种同步语句，也会进行同步。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (SynchronizedExample.class) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SynchronizedExample e1 = <span class="keyword">new</span> SynchronizedExample();</span><br><span class="line">    SynchronizedExample e2 = <span class="keyword">new</span> SynchronizedExample();</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    executorService.execute(() -&gt; e1.func2());</span><br><span class="line">    executorService.execute(() -&gt; e2.func2());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>同步一个静态方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>作用于整个类。</p>
<h1 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h1><p>ReentrantLock 是 java.util.concurrent（J.U.C）包中的锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock(); <span class="comment">// 确保释放锁，从而避免发生死锁。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    LockExample lockExample = <span class="keyword">new</span> LockExample();</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    executorService.execute(() -&gt; lockExample.func());</span><br><span class="line">    executorService.execute(() -&gt; lockExample.func());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br></pre></td></tr></table></figure>

<h1 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h1><ol>
<li>锁的实现</li>
</ol>
<p>synchronized 是 JVM 实现的，而 ReentrantLock 是 JDK 实现的。</p>
<ol start="2">
<li>性能</li>
</ol>
<p>新版本 Java 对 synchronized 进行了很多优化，例如自旋锁等，synchronized 与 ReentrantLock 大致相同。</p>
<ol start="3">
<li>等待可中断</li>
</ol>
<p>当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。</p>
<p>ReentrantLock 可中断，而 synchronized 不行。</p>
<ol start="4">
<li>公平锁</li>
</ol>
<p>公平锁是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁。</p>
<p>synchronized 中的锁是非公平的，ReentrantLock 默认情况下也是非公平的，但是也可以是公平的。</p>
<ol start="5">
<li>锁绑定多个条件</li>
</ol>
<p>一个 ReentrantLock 可以同时绑定多个 Condition 对象。</p>
<h1 id="使用选择"><a href="#使用选择" class="headerlink" title="使用选择"></a>使用选择</h1><p>除非需要使用 ReentrantLock 的高级功能，否则优先使用 synchronized。这是因为 synchronized 是 JVM 实现的一种锁机制，JVM 原生地支持它，而 ReentrantLock 不是所有的 JDK 版本都支持。并且使用 synchronized 不用担心没有释放锁而导致死锁问题，因为 JVM 会确保锁的释放。</p>
]]></content>
  </entry>
  <entry>
    <title>事务问题</title>
    <url>/yq/%E4%BA%8B%E5%8A%A1%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="事务问题"><a href="#事务问题" class="headerlink" title="事务问题"></a>事务问题</h1><p>在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对同一数据进行操作）。并发虽然是必须的，但可能会导致以下的问题。</p>
<h2 id="脏读（Dirty-read）"><a href="#脏读（Dirty-read）" class="headerlink" title="脏读（Dirty read）"></a>脏读（Dirty read）</h2><p>当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。<br>【产生的隔离级别：读未提交】</p>
<h2 id="丢失修改（Lost-to-modify）"><a href="#丢失修改（Lost-to-modify）" class="headerlink" title="丢失修改（Lost to modify）"></a>丢失修改（Lost to modify）</h2><p>指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务 1 读取某表中的数据 A=20，事务 2 也读取 A=20，事务 1 修改 A=A-1，事务 2 也修改 A=A-1，最终结果 A=19，事务 1 的修改被丢失。</p>
<h2 id="不可重复读（Unrepeatable-read）"><a href="#不可重复读（Unrepeatable-read）" class="headerlink" title="不可重复读（Unrepeatable read）"></a>不可重复读（Unrepeatable read）</h2><p>指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。</p>
<h2 id="幻读（Phantom-read）"><a href="#幻读（Phantom-read）" class="headerlink" title="幻读（Phantom read）"></a>幻读（Phantom read）</h2><p>幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</p>
<h2 id="不可重复读和幻读区别"><a href="#不可重复读和幻读区别" class="headerlink" title="不可重复读和幻读区别"></a>不可重复读和幻读区别</h2><p>不可重复读的重点是修改比如多次读取一条记录发现其中某些列的值被修改，幻读的重点在于新增或者删除比如多次读取一条记录发现记录增多或减少了。</p>
<h1 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h1><h2 id="四个隔离级别"><a href="#四个隔离级别" class="headerlink" title="四个隔离级别"></a>四个隔离级别</h2><p>**READ-UNCOMMITTED(读取未提交)**： 最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。<br>**READ-COMMITTED(读取已提交)**： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。<br>**REPEATABLE-READ(可重复读)**： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。<br>**SERIALIZABLE(可串行化)**： 最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1657014985521-1ddfde8a-80f5-40ba-becd-d6787cbbe9bb.png#clientId=u8d6c3c54-f293-4&from=paste&height=227&id=uc4da40e0&name=image.png&originHeight=454&originWidth=1004&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=50202&status=done&style=none&taskId=u9015e3cb-f03a-48fa-a6d4-1f60d602ab2&title=&width=502" alt="image.png"></p>
<h2 id="mysql-默认级别"><a href="#mysql-默认级别" class="headerlink" title="mysql 默认级别"></a>mysql 默认级别</h2><p>MySQL InnoDB 存储引擎的默认支持的隔离级别是 <strong>REPEATABLE-READ（可重读）</strong>。我们可以通过<strong>SELECT @@tx_isolation</strong>;命令来查看，MySQL 8.0 该命令改为**SELECT @@transaction_isolation; **</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT @@tx_isolation;</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">| @@tx_isolation  |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">| REPEATABLE-READ |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br></pre></td></tr></table></figure>

<p><del>这里需要注意的是：与 SQL 标准不同的地方在于 InnoDB 存储引擎在 <strong>REPEATABLE-READ（可重读）</strong> 事务隔离级别下使用的是 Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说 InnoDB 存储引擎的默认支持的隔离级别是 <strong>REPEATABLE-READ（可重读）</strong> 已经可以完全保证事务的隔离性要求，即达到了 SQL 标准的 <strong>SERIALIZABLE(可串行化)</strong> 隔离级别。</del><br>🐛 问题更正：<strong>MySQL InnoDB 的 REPEATABLE-READ（可重读）并不保证避免幻读，需要应用使用加锁读来保证。而这个加锁度使用到的机制就是 Next-Key Locks。</strong><br>因为隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是 <strong>READ-COMMITTED(读取提交内容)</strong> ，但是你要知道的是 InnoDB 存储引擎默认使用 <strong>REPEATABLE-READ（可重读）</strong> 并不会有任何性能损失。<br>InnoDB 存储引擎在 <strong>分布式事务</strong> 的情况下一般会用到 <strong>SERIALIZABLE(可串行化)</strong> 隔离级别。</p>
<p><a href="https://javaguide.cn/database/mysql/mysql%E7%9F%A5%E8%AF%86%E7%82%B9&%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/#mysql-%E7%9A%84%E9%BB%98%E8%AE%A4%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88">
</a></p>
]]></content>
  </entry>
  <entry>
    <title>代理模式</title>
    <url>/yq/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>参考文档：<a href="https://blog.csdn.net/flyfeifei66/article/details/81481222">https://blog.csdn.net/flyfeifei66/article/details/81481222</a><br>代理模式是 23 种设计模式的一种，他是指一个对象 A 通过持有另一个对象 B，可以具有 B 同样的行为的模式。为了对外开放协议，B 往往实现了一个接口，A 也会去实现接口。但是 B 是“真正”实现类，A 则比较“虚”，他借用了 B 的方法去实现接口的方法。A 虽然是“伪军”，但它可以增强 B，在调用 B 的方法前后都做些其他的事情。Spring AOP 就是使用了动态代理完成了代码的动态“织入”。<br><a href="https://blog.csdn.net/flyfeifei66/article/details/81481222">
</a></p>
]]></content>
  </entry>
  <entry>
    <title>事故复盘报告模板</title>
    <url>/yq/%E4%BA%8B%E6%95%85%E5%A4%8D%E7%9B%98%E6%8A%A5%E5%91%8A%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h1 id="事故背景"><a href="#事故背景" class="headerlink" title="事故背景"></a>事故背景</h1><h1 id="事故过程"><a href="#事故过程" class="headerlink" title="事故过程"></a>事故过程</h1><h1 id="事故原因"><a href="#事故原因" class="headerlink" title="事故原因"></a>事故原因</h1><h1 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h1><h1 id="改进方案"><a href="#改进方案" class="headerlink" title="改进方案"></a>改进方案</h1><table>
<thead>
<tr>
<th><strong>负责方</strong></th>
<th><strong>动作</strong></th>
<th><strong>责任人</strong></th>
<th><strong>完成时间</strong></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>优化案例</title>
    <url>/yq/%E4%BC%98%E5%8C%96%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<p>人事系统 人员和合同的查询</p>
<p>步骤： 1.根据常用搜索条件，查询值分布 2.常用的查询对应的值的分布越小，使用索引的效果越佳；分布的值越大，使用索引的效果越差。</p>
]]></content>
  </entry>
  <entry>
    <title>北漂回忆录</title>
    <url>/yq/%E5%8C%97%E6%BC%82%E5%9B%9E%E5%BF%86%E5%BD%95/</url>
    <content><![CDATA[<h1 id="2020-07-14-北漂的第一顿饭-海淀区韩家川村"><a href="#2020-07-14-北漂的第一顿饭-海淀区韩家川村" class="headerlink" title="2020.07.14 北漂的第一顿饭 海淀区韩家川村"></a>2020.07.14 北漂的第一顿饭 海淀区韩家川村</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/22422342/1679215257594-b08a2320-de33-4238-ac6c-54688f3420a8.jpeg#averageHue=%23a9aca6&clientId=u95de692e-f451-4&from=ui&id=u7a1da18b&name=%E7%AC%AC%E4%B8%80%E9%A1%BF%E9%A5%AD.jpg&originHeight=2448&originWidth=3264&originalType=binary%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&size=2745968&status=done&style=none&taskId=u6648c571-eada-41b0-b7e8-caab0780076&title=" alt="第一顿饭.jpg"></p>
<h1 id="2020-7-2021-7-第一份工作-居于海淀区上奥小区-工作于五道口地铁附近"><a href="#2020-7-2021-7-第一份工作-居于海淀区上奥小区-工作于五道口地铁附近" class="headerlink" title="2020.7 - 2021.7 第一份工作 居于海淀区上奥小区 工作于五道口地铁附近"></a>2020.7 - 2021.7 第一份工作 居于海淀区上奥小区 工作于五道口地铁附近</h1><blockquote>
<p>这 6 平方的小破房 1500 元，在这住了 10 个月</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/22422342/1679223347830-1fc47d5f-636c-4511-8ab5-56cf09246900.jpeg#averageHue=%236c756b&clientId=u688dd403-2970-4&from=ui&id=u4cfd8913&name=%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230319185535.jpg&originHeight=1280&originWidth=1706&originalType=binary%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&size=314286&status=done&style=none&taskId=u1a7ef661-914a-4668-bb63-2781d590495&title=" alt="微信图片_20230319185535.jpg"></p>
<blockquote>
<p>宿舍小日子</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/22422342/1679215482231-3d29be31-9ead-46df-9393-0db88f759630.jpeg#averageHue=%23bd9258&clientId=u95de692e-f451-4&from=ui&id=u32870339&name=%E5%90%831.jpg&originHeight=1080&originWidth=1080&originalType=binary%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&size=865700&status=done&style=none&taskId=u87ede510-25b8-47bf-9049-64c4b1d901a&title=" alt="吃1.jpg"></p>
<blockquote>
<p>小角落的灯</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/22422342/1679217085348-c8b712f8-e841-4f4e-8793-2e6fe0941369.jpeg#averageHue=%2355320a&clientId=u95de692e-f451-4&from=ui&id=u2c5579c3&name=1.jpg&originHeight=1439&originWidth=1080&originalType=binary%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&size=950092&status=done&style=none&taskId=u6c111c8d-5828-4b16-81f8-c6e9787515f&title=" alt="1.jpg"></p>
<blockquote>
<p>工作第一周末自己去了天安门，让个大哥帮忙拍了一张照片</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/22422342/1679217400885-a19fad9c-0c33-4c39-b138-fbbd0cc673c2.jpeg#averageHue=%23847343&clientId=u95de692e-f451-4&from=ui&id=PuNT8&name=%E5%A4%A9%E5%AE%89%E9%97%A81.jpg&originHeight=2448&originWidth=3264&originalType=binary%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&size=2814634&status=done&style=none&taskId=u1c3df926-2837-46b6-a06e-9608135d21f&title=" alt="天安门1.jpg"></p>
<blockquote>
<p>鸟巢</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/22422342/1679217091612-fdbfc942-d604-40cd-9853-e3c1dd788c23.jpeg#averageHue=%23959a93&clientId=u95de692e-f451-4&from=ui&id=u8270bfeb&name=2.jpg&originHeight=2448&originWidth=3264&originalType=binary%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&size=3492571&status=done&style=none&taskId=u7f0b3b35-225e-42e6-a98a-f79a33ca286&title=" alt="2.jpg"></p>
<blockquote>
<p>水立方</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/22422342/1679217087317-4730b646-25cb-47a4-9746-a6930bea30b4.jpeg#averageHue=%2306c5f3&clientId=u95de692e-f451-4&from=ui&id=u28596f9c&name=3.jpg&originHeight=2448&originWidth=3264&originalType=binary%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&size=1412691&status=done&style=none&taskId=u7cecebba-fc00-4af6-91a5-a1bbb4cf896&title=" alt="3.jpg"></p>
<blockquote>
<p>长城</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/22422342/1679217085577-f8d54671-1491-4064-b0c9-f67001537c9c.jpeg#averageHue=%2398aaaa&clientId=u95de692e-f451-4&from=ui&id=u9f91345a&name=5.jpg&originHeight=960&originWidth=1920&originalType=binary%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&size=943270&status=done&style=none&taskId=u7b3bb443-149f-43f8-a9f8-5b5f709d1bb&title=" alt="5.jpg"></p>
<blockquote>
<p>夏天来游泳的好地方</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/22422342/1679217082081-306c40d0-3c02-4696-9105-3963184c4b94.jpeg#averageHue=%23889287&clientId=u95de692e-f451-4&from=ui&id=u8a21ebda&name=10.jpg&originHeight=1080&originWidth=1440&originalType=binary%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&size=334593&status=done&style=none&taskId=u4b2b6748-fa1b-4fc6-8437-823cf1a871a&title=" alt="10.jpg"></p>
<blockquote>
<p>想吃家乡的芒果了，只能网上买点</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/22422342/1679217090422-58c7f112-f746-434f-97b0-7e69e15d991b.jpeg#averageHue=%2380744e&clientId=u95de692e-f451-4&from=ui&id=ua2f6521c&name=14.jpg&originHeight=2448&originWidth=3264&originalType=binary%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&size=1951680&status=done&style=none&taskId=uca9605a5-b7ea-4392-8a4d-62b88bd5089&title=" alt="14.jpg"></p>
<blockquote>
<p>假期去了趟天津，河风吹得人很惬意，看了天津之眼，人太多，没能坐上</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/22422342/1679217461882-899aa8de-1f9d-4b56-9eae-952afe220211.jpeg#averageHue=%23131914&clientId=u95de692e-f451-4&from=ui&id=u1eb389e5&name=22.jpg&originHeight=1080&originWidth=1440&originalType=binary%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&size=127433&status=done&style=none&taskId=uc02d359e-5fab-495d-ae5d-f48c1b606d8&title=" alt="22.jpg"></p>
<blockquote>
<p>辞职后去了趟母校</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/22422342/1679217405977-a12abc95-99cc-4ded-bd84-846b80207570.jpeg?x-oss-process=image/auto-orient,1#averageHue=%2378817d&clientId=u95de692e-f451-4&from=ui&id=pt232&name=12.jpg&originHeight=4032&originWidth=3024&originalType=binary%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&size=6005988&status=done&style=none&taskId=ua681e7a2-8bc5-4a4c-82be-2c3165f5525&title=" alt="12.jpg"></p>
<blockquote>
<p>去看了自己睡了四年的床</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/22422342/1679217341679-76093475-35bb-4004-9257-3be40623ec81.jpeg#averageHue=%234c504a&clientId=u95de692e-f451-4&from=ui&id=ATrEU&name=11.jpg&originHeight=640&originWidth=1412&originalType=binary%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&size=84334&status=done&style=none&taskId=uc7a79436-bb1c-4ba6-a0b3-5f3845d8175&title=" alt="11.jpg"></p>
<blockquote>
<p>大爱母校小火锅</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/22422342/1679224349886-4e4ebfba-df30-4fc9-acde-e3d2a0dbbbb3.jpeg#averageHue=%23625e4b&clientId=u688dd403-2970-4&from=ui&id=uf3e4c2dd&name=%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230319190604.jpg&originHeight=1080&originWidth=1440&originalType=binary%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&size=727126&status=done&style=none&taskId=ub0e3211c-a8bc-4afb-834d-008d967ed59&title=" alt="微信图片_20230319190604.jpg"></p>
<h1 id="2021-7-2022-7-居于通州西潞苑小区-工作于朝阳区建外-SOHO"><a href="#2021-7-2022-7-居于通州西潞苑小区-工作于朝阳区建外-SOHO" class="headerlink" title="2021.7-2022.7 居于通州西潞苑小区 工作于朝阳区建外 SOHO"></a>2021.7-2022.7 居于通州西潞苑小区 工作于朝阳区建外 SOHO</h1><blockquote>
<p>和同学整租了个二居室，70 平米，一个月房租一个人 2300 左右，相比于上一个感觉来到了天堂。一切都有，周末时我们会做饭，看剧看电影，饭后我通常会去温榆河畔走走，住在这里的日子是最舒服的。</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/22422342/1679223671199-ba05dfbe-78e6-4d48-9615-7b27344e0707.jpeg#averageHue=%23716c65&clientId=u688dd403-2970-4&from=ui&id=ufb9a58a5&name=1%20%281%29.jpg&originHeight=3000&originWidth=4000&originalType=binary%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&size=5595123&status=done&style=none&taskId=uc5b5bf77-cc6f-44fb-a876-40d329312e5&title=" alt="1 (1).jpg"></p>
<blockquote>
<p>温榆河畔，离宿舍很近，远离闹区，夏日几乎每晚必来</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/22422342/1679218125710-f8052acb-1332-44c3-a152-3735e7c9f6a6.jpeg#averageHue=%234a463f&clientId=u95de692e-f451-4&from=ui&id=u92b311b2&name=20.jpg&originHeight=3000&originWidth=4000&originalType=binary%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&size=4738387&status=done&style=none&taskId=u4473317e-bf50-4dc3-b90b-a45a02a3db3&title=" alt="20.jpg"></p>
<blockquote>
<p>工作地附近，夜景还是很美丽的</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/22422342/1679217387889-27d95edd-8fb3-4173-aa87-571b5d39adc7.jpeg#averageHue=%23525445&clientId=u95de692e-f451-4&from=ui&id=ucffb8fd2&name=13.jpg&originHeight=3000&originWidth=4000&originalType=binary%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&size=4131300&status=done&style=none&taskId=u9b38aac3-eeea-4987-a156-29fc497e2b0&title=" alt="13.jpg"></p>
<blockquote>
<p>2021 冬季雪天出来玩雪</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/22422342/1679224294538-9e50b7c4-38c9-40d1-a9ce-8973780f884f.jpeg#averageHue=%2393a0b1&clientId=u688dd403-2970-4&from=ui&id=ue60636dd&name=%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230319190559.jpg&originHeight=1440&originWidth=1080&originalType=binary%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&size=1061063&status=done&style=none&taskId=u308ceb8f-118b-456b-aa84-445570d7e2e&title=" alt="微信图片_20230319190559.jpg"></p>
<blockquote>
<p>特意挑了个雪天来看故宫</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/22422342/1679217414004-0774f002-1024-4701-8a82-94cd40aaac46.jpeg#averageHue=%23aea89e&clientId=u95de692e-f451-4&from=ui&id=u056b86b9&name=15.jpg&originHeight=3000&originWidth=4000&originalType=binary%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&size=5859528&status=done&style=none&taskId=u1d521434-ea4a-4ddf-902c-940fa6eb021&title=" alt="15.jpg"></p>
<blockquote>
<p>2022.07.08 坐上海南航空的飞机，真正告别北京，结束北漂…</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/22422342/1679217411205-3dc5d131-ec28-4ef6-82f7-36c69c23d165.jpeg#averageHue=%2387867e&clientId=u95de692e-f451-4&from=ui&id=ua2e289a5&name=%E5%88%AB%E4%BA%86%E5%8C%97%E6%BC%82.jpg&originHeight=4000&originWidth=3000&originalType=binary%E2%88%B6=0.8999999761581421&rotation=0&showTitle=false&size=4841825&status=done&style=none&taskId=ua0bcc960-d357-48a6-9d01-77bd9bfaab0&title=" alt="别了北漂.jpg"></p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>记于 2022.07.18。<br>这一段经历的结束，应该也算的上生命中一个重要节点，它不仅意味着我北漂的结束，也为我的北方生活正式画上了一个不知道如何定义的句号。<br>大学四年加上工作两年，在北方待了六年，虽说去的地方不算多，但曾经说要远方的愿望也算是实现了。在那远隔家乡两千多公里的地域，待的这些年里，认识了很多人，经历过一些事，有得意，有失意，有成长，也有失去。<br>站在此刻的节点上，只能以杯酒经过往，然后收拾行囊，奔赴下一站。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>北漂</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/yq/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>单例模式：某一个类在系统中只需要有一个实例对象，而且对象是由这个类自行实例化并提供给系统其它地方使用，这个类称为单例类。单例模式是 GOF 23 种设计模式中最简单的一种，但同时也是在项目中接触最多的一种。单例模式属于一种创建型设计模式。</p>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>大家都使用过 Windows 任务管理器，正常情况下，无论我们在 Windows 任务栏的右键菜单上点击启动多少次“任务管理器”，系统始终只能弹出一个任务管理器窗口。也就是说，在一个 Windows 系统中，系统只维护一个任务管理器。这就是一个典型的单例模式运用。<br>再举一个例子，网站的计数器，一般也是采用单例模式实现，如果你存在多个计数器，每一个用户的访问都刷新计数器的值，这样的话你的实计数的值是难以同步的。但是如果采用单例模式实现就不会存在这样的问题，而且还可以避免线程安全问题。同样多线程的线程池的设计一般也是采用单例模式，这是由于线程池需要方便对池中的线程进行控制。<br>可以看出，我们在程序中使用单例模式，目的一般是处理资源访问的冲突，或者从业务概念上，有些数据在系统中只应保存一份，那也比较适合设计为单例类，比如配置类、全局流水号生成器等。</p>
<h1 id="UML-类图"><a href="#UML-类图" class="headerlink" title="UML 类图"></a>UML 类图</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1656469337986-8919ea46-be70-44f5-a2fe-be70e82c9e2d.png#clientId=u57c29727-1d00-4&from=paste&height=112&id=u4e7856de&name=image.png&originHeight=223&originWidth=731&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=84482&status=done&style=none&taskId=u30026a47-38d7-4448-8969-034bfcd5a40&title=&width=365.5" alt="image.png"></p>
<h1 id="实现要点"><a href="#实现要点" class="headerlink" title="实现要点"></a>实现要点</h1><p>单例模式虽然简单，但是要写出一个能保证在多线程环境下也能保证实例唯一性的单例确不是那么简单，实现一个正确的单例模式有以下几个要点： 1.某个类只能有一个实例，即使是多线程运行环境下； 2.单例类的实例一定是单例类自身创建，而不是在单例类外部用其它方式如 new 方式创建； 3.单例类需要提供一个方法向整个系统提供这个实例对象。</p>
<h1 id="两种模式"><a href="#两种模式" class="headerlink" title="两种模式"></a>两种模式</h1><p>单例模式分为饿汉模式和懒汉模式，这两种模式很好理解，懒汉模式的意思就是这个类很懒，只要别人不找它要实例，它都懒得创建。饿汉模式在初始化时，我们就创建了唯一的实例，即便这个实例后面并不会被使用。<br>下面分别介绍两种单例模式的写法。</p>
<h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><p>下面这种写法的单例是大家最简单最容易写出的一种单例写法，只适用于单线程的系统，也就是说它不是线程安全的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//懒汉式，线程不安全</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span></span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span>  Singleton1 instance;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//构造函数定义为私有，防止外部创建实例</span></span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//系统使用单例的入口</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (<span class="keyword">null</span> == instance)&#123;</span><br><span class="line">             instance = <span class="keyword">new</span> Singleton1();</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> instance;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>针对线程不安全的问题，可以通过获取实例的方法添加了 synchronized 来解决，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//懒汉式，线程安全，效率低</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  Singleton2 instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数定义为私有，防止外部创建实例</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//系统使用单例的入口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton2 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == instance)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton2();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样一来，确实线程安全了，但是又带来了另一个问题：程序的性能极大的降低了，高并发下多个线程去获取这个实例，现在却要排队。<br>针对性能问题，有同学想到了减小 synchronized 的粒度，不加在方法上，而是放在代码块中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//懒汉式，线程不安全</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  Singleton3 instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数定义为私有，防止外部创建实例</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton3</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//系统使用单例的入口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton3 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == instance)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton3.class) &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> Singleton3();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是，很不幸，如果改成这样，又变得线程不安全了，我们试着分析一个代码执行的场景：假设我们有两个线程 T1 与 T2 并发访问 getInstance 方法。当 T1 执行完 if (instance == null)且 instance 为 null 时，其 CUP 执行时间被 T2 抢占，所以 T1 还没有创建实例。T2 也执行 if (instance == null)，此时 instance 肯定还为 null，T2 执行创建实例的代码，当 T1 再次获得 CPU 执行时间后，其从 synchronized 处恢复，又会创建一个实例。<br>那么有没有一种写法，可以同时兼顾到效率和线程安全两方面了，还真有，就是我们下面将要介绍的 double-check 的方式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">////懒汉式，线程安全，效率还可以</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton4</span></span>&#123;</span><br><span class="line">     <span class="comment">//注意加上volatile关键字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">volatile</span> Singleton4 instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数定义为私有，防止外部创建实例</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton4</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//系统使用单例的入口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton4 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//第一次检查提高访问性能</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == instance)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton4.class) &#123;</span><br><span class="line">                <span class="comment">//第二次检查为了线程安全</span></span><br><span class="line">                <span class="keyword">if</span>(instance ==<span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton4();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种单例的写法做了两次 if (null == instance)的判断，因此被称为 double-check 的方式。</p>
<ul>
<li>第一次 check 为了提高访问性能。因为一旦实例被创建，后面线程的所有的 check 都为假，不需要执行 synchronized 竞争锁了。</li>
<li>第二次 check 是为了线程安全，确保多线程环境下只生成一个实例。</li>
</ul>
<p>需要注意的是，这种方式，在定义实例时一定需要加上 volatile 关键字，禁止虚拟机指令重排，否则，还是有一定几率会生成多个实例，关于 volatile 关键字和指令重排的问题这里不过多介绍，后面在多线程安全系列文章中再详细介绍。</p>
<h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><p>使用静态常量在类加载时候就创建了实例，属于饿汉模式。其是线程安全的，这一点由 JVM 来保证。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//饿汉式，线程安全</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton5</span></span>&#123;</span><br><span class="line">     <span class="comment">//</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton5 INSTANCE = <span class="keyword">new</span> Singleton5();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数定义为私有，防止外部创建实例</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton5</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//系统使用单例的入口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton5 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ol>
<li><strong>线程安全</strong>：饿汉式在线程还没出现之前就已经实例化了，所以饿汉式一定是线程安全的。懒汉式加载是在使用时才会去 new 实例的，那么你去 new 的时候是一个动态的过程，是放到方法中实现的，如果这个时候有多个线程访问这个实例，这个时候实例还不存在，还在 new，就会进入到方法中，有多少线程就会 new 出多少个实例。一个方法只能 return 一个实例，那最终 return 出哪个呢？是不是会覆盖很多 new 的实例？这种情况当然也可以解决，那就是加同步锁，避免这种情况发生。</li>
<li><strong>执行效率</strong>：饿汉式没有加任何的锁，因此执行效率比较高。懒汉式一般使用都会加同步锁，效率比饿汉式差。</li>
<li><strong>内存使用</strong>：饿汉式在一开始类加载的时候就实例化，无论使用与否，都会实例化，所以会占据空间，浪费内存。懒汉式什么时候用就什么时候实例化，不浪费内存。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>反射</title>
    <url>/yq/%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h1 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h1><p>反射之所以被称为框架的灵魂，主要是因为它<strong>赋予了我们在运行时分析类以及执行类中方法的能力</strong>。<br>通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。</p>
<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>动态代理 注解 + 反射</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Value</span></span><br></pre></td></tr></table></figure>

<h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><p>优点：<br>可以让咱们的代码更加灵活、为各种框架提供开箱即用的功能提供了便利。<br>缺点：<br>让我们在运行时有了分析操作类的能力，这同样也增加了安全问题。比如可以无视泛型参数的安全检查（泛型参数的安全检查发生在编译时）。另外，反射的性能也要稍差点，不过，对于框架来说实际是影响不大的。</p>
<h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h2 id="获取-Class-对象的四种方式"><a href="#获取-Class-对象的四种方式" class="headerlink" title="获取 Class 对象的四种方式"></a>获取 Class 对象的四种方式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.知道具体类的情况下可以使用</span></span><br><span class="line">Class alunbarClass = TargetObject.class;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.通过 Class.forName()传入类的全路径获取</span></span><br><span class="line">Class alunbarClass1 = Class.forName(<span class="string">&quot;cn.javaguide.TargetObject&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.通过对象实例instance.getClass()获取</span></span><br><span class="line">TargetObject o = <span class="keyword">new</span> TargetObject();</span><br><span class="line">Class alunbarClass2 = o.getClass();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.通过类加载器xxxClassLoader.loadClass()传入类路径获取</span></span><br><span class="line">ClassLoader.getSystemClassLoader().loadClass(<span class="string">&quot;cn.javaguide.TargetObject&quot;</span>);</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>原子性、可见性、有序性</title>
    <url>/yq/%E5%8E%9F%E5%AD%90%E6%80%A7%E3%80%81%E5%8F%AF%E8%A7%81%E6%80%A7%E3%80%81%E6%9C%89%E5%BA%8F%E6%80%A7/</url>
    <content><![CDATA[<p>原子性、可见性、有序性是多线程编程中最重要的几个知识点，由于多线程情况复杂， 如何让每个线程能看到正确的结果，这是非常重要的。</p>
<h1 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h1><p>原子性是指<strong>一个线程的操作是不能被其他线程打断</strong>，同一时间只有一个线程对一个变量进行操作。在多线程情况下，每个线程的执行结果不受其他线程的干扰，比如说多个线程同时对同一个共享成员变量 n++100 次，如果 n 初始值为 0，n 最后的值应该是 100，所以说它们是互不干扰的，这就是传说的中的原子性。但 n++并不是原子性的操作，要使用 AtomicInteger 保证原子性。</p>
<h1 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h1><p><strong>可见性是指某个线程修改了某一个共享变量的值，而其他线程是否可以看见该共享变量修改后的值</strong>。在单线程中肯定不会有这种问题，单线程读到的肯定都是最新的值，而在多线程编程中就不一定了。每个线程都有自己的工作内存，线程先把共享变量的值从主内存读到工作内存，形成一个副本，当计算完后再把副本的值刷回主内存，从读取到最后刷回主内存这是一个过程，当还没刷回主内存的时候这时候对其他线程是不可见的，所以其他线程从主内存读到的值是修改之前的旧值。像 CPU 的缓存优化、硬件优化、指令重排及对 JVM 编译器的优化，都会出现可见性的问题。</p>
<h1 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h1><p>我们都知道程序是按代码顺序执行的，对于单线程来说确实是如此，但在多线程情况下就不是如此了。<strong>为了优化程序执行和提高 CPU 的处理性能，JVM 和操作系统都会对指令进行重排，也就说前面的代码并不一定都会在后面的代码前面执行，即后面的代码可能会插到前面的代码之前执行，只要不影响当前线程的执行结果</strong>。所以，<strong>指令重排只会保证当前线程执行结果一致，但指令重排后势必会影响多线程的</strong><br><strong>执行结果</strong>。虽然重排序优化了性能，但也是会遵守一些规则的，并不能随便乱排序，只是<strong>重排序会影响多线程执行的结果</strong>。</p>
]]></content>
  </entry>
  <entry>
    <title>/和~的区别</title>
    <url>/yq/%E5%92%8C~%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>/为根目录<br>~为当前用户的家目录</p>
<p>~目录在/目录下的 Users 目录里面的当前用户里</p>
]]></content>
  </entry>
  <entry>
    <title>字符集</title>
    <url>/yq/%E5%AD%97%E7%AC%A6%E9%9B%86/</url>
    <content><![CDATA[<p>转码工具：<a href="https://www.haomeili.net/HanZi/ZiFuBianMaZhuanHuan">https://www.haomeili.net/HanZi/ZiFuBianMaZhuanHuan</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/22422342/1643359095640-7df45cab-3854-43fb-ad97-922550bdb795.jpeg"></p>
<p>MySQL 中 utf8 编码只支持 1-3 个字节 。 在 utf8 编码中，中文是占 3 个字节，其他数字、英文、符号占一个字节。但 emoji 符号占 4 个字节，一些较复杂的文字、繁体字也是 4 个字；<br><strong>UTF8mb4</strong> 是 UTF-8 的完整实现，正版！最多支持使用 4 个字节表示字符，因此，可以用来存储 emoji 符号。</p>
]]></content>
  </entry>
  <entry>
    <title>复杂SQL案例积累分析</title>
    <url>/yq/%E5%A4%8D%E6%9D%82SQL%E6%A1%88%E4%BE%8B%E7%A7%AF%E7%B4%AF%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>(非公司系统表)</p>
<p>#</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> t1.id t1_id,t2.id t2_id,t1.file_id t1_file_id,t2.file_id t2_file_id,t2.file_name file_name <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> attachments <span class="keyword">where</span> file_id=<span class="number">0</span>) t1 <span class="keyword">left</span> <span class="keyword">join</span>    (<span class="keyword">select</span> * <span class="keyword">from</span> attachments <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> (                                                    <span class="keyword">select</span>  <span class="keyword">max</span>(<span class="keyword">id</span>) max_id <span class="keyword">from</span> attachments <span class="keyword">where</span> file_id!=<span class="number">0</span> <span class="keyword">and</span> contract_id <span class="keyword">in</span>                                                                                                                                    (<span class="keyword">select</span> contract_id <span class="keyword">from</span> attachments <span class="keyword">where</span> file_id=<span class="number">0</span>) <span class="keyword">group</span> <span class="keyword">by</span> contract_id )) t2  <span class="keyword">on</span> t1.contract_id =t2.contract_id ;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">&#x27;update attachments set file_id=&#x27;</span>,t2_file_id,<span class="string">&#x27;where id=&#x27;</span>,t1_id,<span class="string">&#x27;;&#x27;</span>) <span class="keyword">from</span> (<span class="keyword">select</span> t1.id t1_id,t2.id t2_id,t1.file_id t1_file_id,t2.file_id t2_file_id,t2.file_name file_name <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> attachments <span class="keyword">where</span> file_id=<span class="number">0</span>) t1 <span class="keyword">left</span> <span class="keyword">join</span>                                                (<span class="keyword">select</span> * <span class="keyword">from</span> attachments <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> (                                                    <span class="keyword">select</span>  <span class="keyword">max</span>(<span class="keyword">id</span>) max_id <span class="keyword">from</span> attachments <span class="keyword">where</span> file_id!=<span class="number">0</span> <span class="keyword">and</span> contract_id <span class="keyword">in</span>                                                                                                                                    (<span class="keyword">select</span> contract_id <span class="keyword">from</span> attachments <span class="keyword">where</span> file_id=<span class="number">0</span>) <span class="keyword">group</span> <span class="keyword">by</span> personnel_contract_id )) t2  <span class="keyword">on</span> t1.contract_id =t2.contract_id ) <span class="keyword">as</span> t3;</span><br></pre></td></tr></table></figure>

<h1 id="exist-使用"><a href="#exist-使用" class="headerlink" title="exist 使用"></a>exist 使用</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询不存在某表的数据exists</span></span><br><span class="line"><span class="keyword">select</span> bp.id,bp.code  ,<span class="keyword">status</span>,<span class="built_in">date</span> ,contract_id</span><br><span class="line"><span class="keyword">from</span> people bp</span><br><span class="line"><span class="keyword">where</span> <span class="built_in">date</span> &gt; <span class="string">&#x27;2022-05-26&#x27;</span> <span class="keyword">and</span> <span class="built_in">date</span> &lt; <span class="string">&#x27;2022-05-31&#x27;</span></span><br><span class="line"><span class="keyword">and</span> bp.is_delete = <span class="number">0</span> <span class="keyword">and</span> flag =<span class="number">1</span> <span class="keyword">and</span> bp.type <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="keyword">and</span> <span class="keyword">not</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> contract pc</span><br><span class="line"><span class="keyword">where</span> pc.people_id = bp.id <span class="keyword">and</span> contract_type <span class="keyword">in</span> (</span><br><span class="line"><span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">13</span></span><br><span class="line">) );</span><br></pre></td></tr></table></figure>

<h1 id="行转列"><a href="#行转列" class="headerlink" title="行转列"></a>行转列</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> customer_code <span class="string">&#x27;商户code&#x27;</span>,</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">status</span> <span class="keyword">when</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;在职&#x27;</span></span><br><span class="line"><span class="keyword">when</span> <span class="number">2</span> <span class="keyword">then</span> <span class="string">&#x27;待离职&#x27;</span> <span class="keyword">when</span> <span class="number">3</span> <span class="keyword">then</span> <span class="string">&#x27;已离职&#x27;</span></span><br><span class="line"><span class="keyword">else</span> <span class="string">&#x27;其他&#x27;</span> <span class="keyword">end</span> <span class="string">&#x27;在职状态&#x27;</span>,</span><br><span class="line"><span class="keyword">count</span>(*) <span class="string">&#x27;人数&#x27;</span></span><br><span class="line"><span class="keyword">from</span> people bp <span class="keyword">where</span> <span class="keyword">type</span> <span class="keyword">in</span> (<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">and</span> <span class="keyword">status</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> customer_code,<span class="keyword">status</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> customer_code;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1655964180810-3956bc87-1d53-417a-8d3b-dec0dc521ef8.png#clientId=u79031052-db4c-4&from=paste&height=223&id=uce7790e9&name=image.png&originHeight=446&originWidth=942&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=87317&status=done&style=none&taskId=uf40e7ac1-c843-4f97-a1f3-8b117442b53&title=&width=471" alt="image.png"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> t.customer_code ,</span><br><span class="line"><span class="keyword">max</span>(<span class="keyword">case</span> t.status <span class="keyword">when</span> <span class="string">&#x27;在职&#x27;</span> <span class="keyword">then</span> t.num <span class="keyword">end</span>) <span class="string">&#x27;在职人数&#x27;</span>,</span><br><span class="line"><span class="keyword">max</span>(<span class="keyword">case</span> <span class="keyword">status</span> <span class="keyword">when</span> <span class="string">&#x27;待离职&#x27;</span> <span class="keyword">then</span> t.num <span class="keyword">end</span>) <span class="string">&#x27;待离职人数&#x27;</span>,</span><br><span class="line"><span class="keyword">max</span>(<span class="keyword">case</span> <span class="keyword">status</span> <span class="keyword">when</span> <span class="string">&#x27;已离职&#x27;</span> <span class="keyword">then</span> t.num <span class="keyword">end</span>) <span class="string">&#x27;已离职人数&#x27;</span></span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> customer_code,<span class="keyword">case</span> <span class="keyword">status</span> <span class="keyword">when</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;在职&#x27;</span> <span class="keyword">when</span> <span class="number">2</span> <span class="keyword">then</span> <span class="string">&#x27;待离职&#x27;</span> <span class="keyword">when</span> <span class="number">3</span> <span class="keyword">then</span> <span class="string">&#x27;已离职&#x27;</span></span><br><span class="line"><span class="keyword">else</span> <span class="string">&#x27;其他&#x27;</span> <span class="keyword">end</span> <span class="keyword">status</span>,</span><br><span class="line"><span class="keyword">count</span>(*) <span class="keyword">num</span></span><br><span class="line"><span class="keyword">from</span> people bp <span class="keyword">where</span> <span class="keyword">type</span> <span class="keyword">in</span> (<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">and</span> <span class="keyword">status</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> customer_code,<span class="keyword">status</span> <span class="keyword">order</span> <span class="keyword">by</span> customer_code</span><br><span class="line">) t</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> t.customer_code <span class="keyword">order</span> <span class="keyword">by</span> t.customer_code</span><br><span class="line">;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1655964227959-49795245-5e19-4c8c-a238-4d3ed2b093ad.png#clientId=u79031052-db4c-4&from=paste&height=220&id=u701318ef&name=image.png&originHeight=440&originWidth=1158&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=89514&status=done&style=none&taskId=u659e738a-7bbe-4009-b2ee-abbd4f5624b&title=&width=579" alt="image.png"></p>
]]></content>
  </entry>
  <entry>
    <title>学习路线</title>
    <url>/yq/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th><strong>分类</strong></th>
<th><strong>主题</strong></th>
<th><strong>范围</strong></th>
<th>** **</th>
</tr>
</thead>
<tbody><tr>
<td>语言基础</td>
<td>继承 多态</td>
<td>熟悉 重载/重写/多态相关概念</td>
<td></td>
</tr>
<tr>
<td>熟悉接口/抽象类/枚举 用途</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>常见对象</td>
<td>Object 和 String 的常用方法</td>
<td>判断 截取 获取 转换</td>
</tr>
<tr>
<td></td>
<td>工具类</td>
<td>org.apache.commons.lang3.StringUtils</td>
<td></td>
</tr>
</tbody></table>
<p>org.apache.commons.collections.CollectionUtils<br>org.apache.commons.lang3.ArrayUtils<br>org.apache.commons.beanutils.BeanUtils<br>java.math.BigDecimal<br>org.apache.commons.lang3.time.DateUtils<br>org.apache.commons.lang3.time.RandomUtils<br>| empty/blank/trim/equalsIgnoreCase/indexOf<br>isEmpty/size/</p>
<p>copyProperties<br>compareTo</p>
<p>com.shebao.framework.util.base.DateUtils</p>
<p>|<br>| | | shebao-framework-util 包 com.shebao.framework.util._<br>com.shebao.dispatch.common.utils._ |</p>
<p>com.shebao.dispatch.common.utils：<br>BeanContextUtils<br>BeanCopyUtils<br>DateUtils extends org.apache.commons.lang3.time.DateUtils<br>DispatchBusinessUtil<br>DispatchUserInfoQueryUtil<br>DispatchUserUtil<br>EnterpriseWeChatMsgUtil<br>JsonUtils<br>ReturnDataUtils<br>。。。 |<br>| | 集合 | 熟悉 Array/List/Set/Map 的特点和常用操作/线程安全集合 | <img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1657263895468-470260c0-3919-4bd2-aecd-0f5aadcde115.png#clientId=u60b5ddda-3507-4&from=paste&height=213&id=u11ff9e7e&name=image.png&originHeight=426&originWidth=656&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=184609&status=done&style=none&taskId=uc87f5b14-b1f7-4983-b6c6-b580d68bdcb&title=&width=328" alt="image.png"><br>线程安全：<br>Vector<br>HashTable<br>ConcurrentHashmap |<br>| | 泛型 | 定义和通配符 | 泛型类、泛型接口、泛型方法 、 通配符 |<br>| | jdk1.8 | Lamda 表达式<br>Stream api | (参数) -&gt; {代码块} C#中的 lambda 表达式 JS 的箭头函数<br>串行流 stream 并行流 paralleStream<br>筛选和切片：filter skip limit distinct<br>映射 map 和 flatmap<br>排序 sorted<br>查找和匹配 findany max count min max<br>归约收集 reduce 和 collect<br>其他：groupingby counting maxby |<br>| | 异常 | 熟悉 Java 异常分类<br>理解 shebao-dispatch 中统一异常处理类 ExceptionHandler</p>
<p>| Throwable -》Error 、 Exception<br>Exception -》CheckedException / RuntimeException<br>常见 CheckedException：<br>Java.lang.ClassNotFoundException<br>Java.lang.NoSuchMetodException<br>Java.io.IOException<br>常见 RumtimeException 子类：<br>Java.lang.ArithmeticException<br>Java.lang.ArrayStoreExcetpion<br>Java.lang.ClassCastException<br>Java.lang.IndexOutOfBoundsException<br>Java.lang.NullPointerException</p>
<p>比较：<br>com.shebao.interceptor.ExceptionHandler;<br>com.shebao.dispatch.app.interceptor.ExceptionHandler |<br>| | 多线程 | Thread 、线程池 熟悉 common 里的 AsyncExecutorConfig 配置 | 1. Thread 的生命周期和状态 2. 同步 3. 线程安全问题 4. 线程池 ThreadPoolExecutor 、AsyncExecutorConfig 配置 |<br>| | 设计模式 | 23 种 | |<br>| | 网络编程 | BIO NIO AIO 、Socket 编程 、Tomcat 、Netty | |<br>| | HTTP | 熟悉 Http 请求的交互过程，HttpRequest/HttpResponse/Header/Body 常用属性 | |<br>| 框架 | Spring | 熟悉 Spring 常用注解(@RestController/@ReqeustMapping/…)<br>熟悉 IOC 和 AOP 概念 | |<br>| | Springboot | 熟悉 Spring Boot 工程结构<br>熟悉各个配置项的含义<br>熟悉常用注解<br>熟悉我们自定义注解 比如 ControllerLog. EditMsgTitle | 约定大于配置 |<br>| | 数据库相关 | JDBC 、Mybatis 熟悉配置项 、熟悉代码生成器生成代码、熟悉常用操作 | DataSourceConfiguration 数据库配置<br>TxAdviceInterceptor 事务配置<br>MultipleDataSourceConfiguration 多数据源配置</p>
<p>主从数据库 该怎么写 dbselect / master slave<br>|<br>| | 单测 | JUnit Mockito | |<br>| 中间件 | Mns | shebao-framework-mns | |<br>| | Redis | 熟悉 Redis 配置每项含义<br>熟悉 Redis 写法 | 熟悉 com.shebao.dispatch.app.redis.RedisCacheConfiguration JedisPool<br>com.shebao.util.LocalRedisUtil<br>com.shebao.framelib.util.RedisUtil</p>
<p>防重复提交 ：PreRepeat 注解 实现 |<br>| | xxx-job | 熟悉发布一个定时任务 | |<br>| 程序设计 | 设计原则 | 熟悉 DRY(不要重复代码)<br>SRP(单一职责) | Don’t Repeat Yourself<br>Single Responsibility Principle 依赖太多/参数太多/一个地方影响另一个地方<br>&lt;重构&gt; |<br>| | 接口设计 | 设计规范<br>Swagger / Yapi |</p>
<p>约定字段名称 约定类型 |<br>| 部署监控 | 发布平台 | arch 平台 测试 / 线上 部署流程 | |<br>| | prometheus | Springboot Actuator 自带 endpoint<br>自定义监控点 | 健康检查 、数据库 、redis、beans 、jvm 等等<br>自定义 metric histogram counter 等 |<br>| | grafana | 熟悉通过 Grafana 配置监控</p>
<p>| <a href="https://grafana.shebao.net/d/Q80EBhrGz/aye-wu-shu-ju-kan-ban?search=open&folder=current&orgId=1">https://grafana.shebao.net/d/Q80EBhrGz/aye-wu-shu-ju-kan-ban?search=open&amp;folder=current&amp;orgId=1</a> |<br>| | 打包 | 熟悉 Maven 常用命令(clean/package/install/deploy)<br>理解本地库/私有库/公共库的概念<br>熟悉 Pom 文件各项含义</p>
<p>| mvn 使用 |<br>| | 代码管理 | 熟悉 Git 常用命令(clone/checkout/branch/pull/add/commit/push/diff/reset/reverse/log)<br>发布 Codereview 流程 | |<br>| | 任务管理</p>
<p>| 熟悉 JIRA 上创建 Feature 子任务 / Bug 流程</p>
<p>| |<br>| | 日志查看</p>
<p>| 阿里云 。 trace 日志 、console 日志、基础 log 日志、Catalina 日志 | |<br>| | 服务器查看 | 测试环境 jump 堡垒机 | |<br>| 编辑器 | IDEA | 快捷键<br>live template 介绍<br>postfix<br>列操作<br>Alter enter – show intent actions<br>抽取 重构等 | 1. sout. psvm. psfi 自定义 trsl 2. 100.for 3. Shift + command + u 大小写切换<br>找到所有出现点 command + control + G<br>Move : option + 箭头<br>Move 并选中： option + shift + 箭头<br>Move 行： command + 箭头 4. 提示</p>
<p>|<br>| 其他 | 调优 | code 性能：string.intern arraylist vs linkedlist 正则 stream hashmap 序列化<br>设计模式：单例 享元 原型 生产者消费者 装饰器<br>Jvm：内存调优 参数设置 cpu 过高 内存过高 gc 分析 原理 CMS G1<br>数据库调优：参数设置 索引优化 in/ leftjoin / limit 1000,1000 / deadlock 排查 / 分库分表设计<br>缓存：springcache vs guava 的缓存 vs redis 缓存 、 一致性策略 、穿透（空/布隆） 、雪崩 | |<br>| | 其他 | 并发：【分工同步互斥】 JUC / Synchornize Lock condition / 序列化反序列化 / 各种锁 / redis 锁 vsZK 锁 / 动态线程池<br>debug：arthas<br>熔断 hystrix 限流 sentinel 链路 skywalking 分布式事务 seata 理论 TCC/2PC/3PC<br>rpc：springcloud vs dubbo<br>网关：zuul<br>zookeeper<br>ELK （ES logstash kibana）<br>docker &amp; k8s<br>消息中间件选型 kafka rocketmq 集群<br>微服务四大难题</p>
<ol>
<li>数据一致性分发</li>
<li>数据聚合 join （CQRS 和最终一致性）</li>
<li>分布式事务</li>
<li>单体系统解耦拆分</li>
</ol>
<p>分布式系统设计 秒杀架构 SaaS 架构 异地多活 | |</p>
]]></content>
  </entry>
  <entry>
    <title>容器</title>
    <url>/yq/%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1657265021234-422f060b-326b-4f72-8ac2-f17e320af1f8.png#clientId=uc2c92b0b-de6f-4&from=paste&height=879&id=u526f8e4a&name=image.png&originHeight=1758&originWidth=2787&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=147827&status=done&style=none&taskId=u9e908c8e-0b7d-4a76-8fe1-b40e1f7706b&title=&width=1393.5" alt="image.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/22422342/1657267626445-0a98c006-d0f4-4ee7-aeba-d53e6fe008a1.jpeg"></p>
]]></content>
  </entry>
  <entry>
    <title>对象的创建</title>
    <url>/yq/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA/</url>
    <content><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/22422342/1656945348220-1edd5583-83d4-457a-970c-deab2fbae539.jpeg"></p>
]]></content>
  </entry>
  <entry>
    <title>常用命令</title>
    <url>/yq/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="简单命令"><a href="#简单命令" class="headerlink" title="简单命令"></a>简单命令</h1><h2 id="who"><a href="#who" class="headerlink" title="who"></a>who</h2><h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h2><h2 id="date"><a href="#date" class="headerlink" title="date"></a>date</h2><h2 id="cal"><a href="#cal" class="headerlink" title="cal"></a>cal</h2><h1 id="文件命令"><a href="#文件命令" class="headerlink" title="文件命令"></a>文件命令</h1><h2 id="文件显示命令"><a href="#文件显示命令" class="headerlink" title="文件显示命令"></a>文件显示命令</h2><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><h2 id="匹配、排序及显示指定内容的命令"><a href="#匹配、排序及显示指定内容的命令" class="headerlink" title="匹配、排序及显示指定内容的命令"></a>匹配、排序及显示指定内容的命令</h2><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2>]]></content>
  </entry>
  <entry>
    <title>工具类</title>
    <url>/yq/%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>常用SQL</title>
    <url>/yq/%E5%B8%B8%E7%94%A8SQL/</url>
    <content><![CDATA[<h1 id="更改线上数据"><a href="#更改线上数据" class="headerlink" title="更改线上数据"></a>更改线上数据</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">// 创建备份表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> backup.contract20220531140100 <span class="keyword">like</span> shebao_dispatch_personnel.personnel_contract ;</span><br><span class="line"></span><br><span class="line">// 要更新的数据备份到备份表中</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> backup.contract20220531140100</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> personnel.contract  <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">9999</span>；</span><br><span class="line"></span><br><span class="line">// 执行修改</span><br></pre></td></tr></table></figure>

<h1 id="改表字段"><a href="#改表字段" class="headerlink" title="改表字段"></a>改表字段</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> shebao_dispatch_personnel.contract <span class="keyword">MODIFY</span> <span class="keyword">COLUMN</span> contract_type <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;备注*****&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h1 id="改索引"><a href="#改索引" class="headerlink" title="改索引"></a>改索引</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> contract_2022_06_07 <span class="keyword">drop</span> <span class="keyword">key</span> idx_contract_type_business_people_id;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> contract_2022_06_07 <span class="keyword">add</span> <span class="keyword">key</span> idx_person_email (person_code,email) ;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>常用类易忘点</title>
    <url>/yq/%E5%B8%B8%E7%94%A8%E7%B1%BB%E6%98%93%E5%BF%98%E7%82%B9/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>常用网址</title>
    <url>/yq/%E5%B8%B8%E7%94%A8%E7%BD%91%E5%9D%80/</url>
    <content><![CDATA[<p>Java<br><a href="https://www.oracle.com/java/technologies/">https://www.oracle.com/java/technologies/</a><br><a href="https://so.csdn.net/so/search?q=OpenJDK&spm=1001.2101.3001.7020">OpenJDK</a><br><a href="https://openjdk.java.net/">https://openjdk.java.net/</a><br>w3c(万维网联盟)<br><a href="https://www.w3.org/">https://www.w3.org/</a><br><a href="https://so.csdn.net/so/search?q=apache&spm=1001.2101.3001.7020">apache</a>(开源项目非盈利组织)<br><a href="https://www.apache.org/">https://www.apache.org/</a><br>Oracle<br><a href="https://www.oracle.com/index.html">https://www.oracle.com/index.html</a><br>MySQL<br><a href="https://www.mysql.com/">https://www.mysql.com/</a><br><a href="https://so.csdn.net/so/search?q=mongoDB&spm=1001.2101.3001.7020">mongoDB</a>(分布式文件存储的数据库)<br><a href="https://www.mongodb.com/">https://www.mongodb.com/</a><br>redis(key-value 数据库)<br><a href="https://redis.io/">https://redis.io/</a><br>spring(Java 后端开发框架)<br><a href="https://spring.io/">https://spring.io/</a><br>hibernate(对象关系映射框架)<br><a href="https://hibernate.org/">https://hibernate.org/</a><br>mybatis(数据持久层框架)<br><a href="https://mybatis.org/">https://mybatis.org/</a><br>zookeeper(<a href="https://so.csdn.net/so/search?q=%E5%88%86%E5%B8%83%E5%BC%8F&spm=1001.2101.3001.7020">分布式</a>应用程序协调服务)<br><a href="https://zookeeper.apache.org/">https://zookeeper.apache.org/</a><br>nacos(动态服务发现、配置和服务管理组件)<br><a href="https://nacos.io/zh-cn/">https://nacos.io/zh-cn/</a><br>apollo(携程框架部门研发的分布式配置组件)<br><a href="https://github.com/ctripcorp/apollo">https://github.com/ctripcorp/apollo</a><br>Disconf(分布式系统配置管理组件)<br><a href="https://disconf.readthedocs.io/">https://disconf.readthedocs.io/</a><br>kafka(构建实时数据管道和数据流组件)<br><a href="https://kafka.apache.org/">https://kafka.apache.org/</a><br>ELK(elasticsearch、logstash、kibana，实时日志系统)<br><a href="https://www.elastic.co/">https://www.elastic.co/</a><br>elasticjob(分布式调度解决方案)<br><a href="http://elasticjob.io/">http://elasticjob.io/</a><br>XXL-JOB(轻量级分布式任务调度平)<br><a href="https://github.com/xuxueli/xxl-job">https://github.com/xuxueli/xxl-job</a><br>RabbitMQ(消息队列)<br><a href="https://www.rabbitmq.com/">https://www.rabbitmq.com/</a><br>ActiveMQ(消息队列)<br><a href="https://activemq.apache.org/">https://activemq.apache.org/</a><br>RocketMQ(消息队列)<br><a href="https://rocketmq.apache.org/">https://rocketmq.apache.org/</a><br>Dubbo(服务治理组件)<br><a href="https://dubbo.apache.org/">https://dubbo.apache.org/</a><br>Docker(应用容器引擎)<br><a href="https://www.docker.com/">https://www.docker.com/</a><br>tomcat(Web 应用服务器)<br><a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a><br>WebLogic(JavaEE 应用服务器)<br><a href="https://www.oracle.com/middleware/technologies/weblogic.html">https://www.oracle.com/middleware/technologies/weblogic.html</a><br>jboss(JavaEE 应用服务器)<br><a href="https://www.jboss.org/">https://www.jboss.org/</a><br>jetty(servlet 容器)<br><a href="https://www.eclipse.org/jetty/">https://www.eclipse.org/jetty/</a><br>netty(高性能网络框架)<br><a href="https://netty.io/">https://netty.io/</a><br>nginx(高性能 HTTP 和反向代理 web 服务器)<br><a href="https://nginx.org/">https://nginx.org/</a><br>intellij idea(当前最火 Java IDE)<br><a href="http://www.jetbrains.com/idea">http://www.jetbrains.com/idea</a><br>eclipse(Java IDE)<br><a href="http://www.eclipse.org/">http://www.eclipse.org</a><br>git(分布式版本控制系统)<br><a href="http://git-scm.com/">http://git-scm.com</a><br>svn(版本控制系统)<br><a href="http://tortoisesvn.net/">http://tortoisesvn.net</a><br>guava(google 开源的工具类库)<br><a href="http://guava.dev/">http://guava.dev</a><br>joda(高质量的底层 Java 类库，如时间、钱等相关)<br><a href="http://www.joda.org/">http://www.joda.org</a><br>Javassist(分析、编辑、创建 Java 字节码的类库)<br><a href="http://www.javassist.org/">http://www.javassist.org</a><br>ASM(Java 字节码操纵框架)<br><a href="http://asm.ow2.io/">http://asm.ow2.io</a><br>HikariCP(高性能数据库连接池)<br><a href="http://github.com/brettwooldridge/HikariCP">http://github.com/brettwooldridge/HikariCP</a><br>Druid(阿里的数据库连接池)<br><a href="http://druid.apache.org/">http://druid.apache.org</a><br>DBCP(数据库连接池)<br><a href="http://commons.apache.org/proper/commons-dbcp">http://commons.apache.org/proper/commons-dbcp</a><br>PDFBox(读取和创建 PDF 文档类库)<br><a href="http://pdfbox.apache.org/">http://pdfbox.apache.org</a><br>itext(PDF 文档处理库)<br><a href="http://itextpdf.com/">http://itextpdf.com</a><br>Xpdf(PDF 文档处理库)<br><a href="http://www.xpdfreader.com/">http://www.xpdfreader.com</a></p>
<p>FOP(基于 XSL:FO 的打印格式处理)<br><a href="http://xmlgraphics.apache.org/fop">http://xmlgraphics.apache.org/fop</a><br>JDOM(XML 文档处理类库)<br><a href="http://www.jdom.org/">http://www.jdom.org</a><br>dom4j(XML 文档处理类库)<br><a href="http://dom4j.github.io/">http://dom4j.github.io</a><br>xerces(XML 文档解析器)<br><a href="http://xerces.apache.org/">http://xerces.apache.org</a><br>jaxp(解析和验证 XML 文档器)<br><a href="http://docs.oracle.com/javase/8/docs/technotes/guides/xml/jaxp">http://docs.oracle.com/javase/8/docs/technotes/guides/xml/jaxp</a><br>httpclient(Java http 客户端)<br><a href="http://hc.apache.org/httpcomponents-client-ga">http://hc.apache.org/httpcomponents-client-ga</a><br>Apache Commons Email<br><a href="http://commons.apache.org/proper/commons-email">http://commons.apache.org/proper/commons-email</a><br>jsoup(HTML 解析器)<br><a href="http://jsoup.org/">http://jsoup.org</a><br>Jackson(json 解析与生成类库)<br><a href="http://github.com/FasterXML/jackson-core">http://github.com/FasterXML/jackson-core</a><br>Gson(json 解析与生成类库)<br><a href="http://sites.google.com/site/gson/Home">http://sites.google.com/site/gson/Home</a><br>fastjson(阿里的 json 解析与生成类库)<br><a href="http://github.com/alibaba/fastjson">http://github.com/alibaba/fastjson</a><br>poi(Office 组件的解析、生成器)<br><a href="http://poi.apache.org/">http://poi.apache.org</a><br>docx4j(docx 文档处理类库)<br><a href="http://www.docx4java.org/trac/docx4j">http://www.docx4java.org/trac/docx4j</a><br>thumbnailator(图片处理库)<br><a href="http://github.com/coobird/thumbnailator">http://github.com/coobird/thumbnailator</a><br>simpleimage<br><a href="http://github.com/alibaba/simpleimage">http://github.com/alibaba/simpleimage</a><br>image4j<br><a href="http://github.com/imcdonagh/image4j">http://github.com/imcdonagh/image4j</a><br>zxing(google 的二维码处理库)<br><a href="http://zxing.github.io/zxing">http://zxing.github.io/zxing</a><br>FreeMarker(模版引擎)<br><a href="http://freemarker.apache.org/">http://freemarker.apache.org</a><br>velocity(模版引擎)<br><a href="http://velocity.apache.org/">http://velocity.apache.org</a><br>Thymeleaf(模版引擎)<br><a href="http://www.thymeleaf.org/">http://www.thymeleaf.org</a><br>JFreeChart(Java 图标类库)<br><a href="http://www.jfree.org/jfreechart">http://www.jfree.org/jfreechart</a></p>
]]></content>
  </entry>
  <entry>
    <title>并发编程</title>
    <url>/yq/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p>相关链接：</p>
<p><a href="https://www.yuque.com/lius/java/fer1ie?view=doc_embed">可见性、原子性和有序性问题：并发编程 Bug 的源头</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1656308533720-4771b7cf-20ab-4901-b18c-bea1d2488ea7.png#clientId=u8dd7de02-537d-4&from=paste&height=546&id=u5154816d&name=%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16551990752127.png&originHeight=1092&originWidth=820&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=70822&status=done&style=none&taskId=u5308e050-2f26-4efe-afd6-5853ec822a6&title=&width=410" alt="企业微信截图_16551990752127.png"></p>
]]></content>
  </entry>
  <entry>
    <title>影视书（持续更新中...）</title>
    <url>/yq/%E5%BD%B1%E8%A7%86%E4%B9%A6%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD...%EF%BC%89/</url>
    <content><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/22422342/1679225411214-66fcdc83-e3e6-45dc-b741-36a30dfe532a.jpeg"></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>并发问题</title>
    <url>/yq/%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>之前：<br>我司在电子签签署完成后，会给我们发送签署消息，我们进行消费将流转状态改为【流转完成】并给发消息给电子签进行归档操作；电子签归档完成后会将归档完成的消息发送给我们，我们将合同状态由【待签约】更新为【已签约】</p>
<p>现在：周二自动归档功能上线<br>我司在电子签签署完成后，自动进行归档，而不再由我们发消息通知归档，电子签签署完成的消息和归档的消息几乎同时发送给我们，消息并发处理，先消费的归档消息再消费的签署消息，导致归档后合同状态为【待签约】</p>
<p>解决方案：<br>签约状态更新只能由小值变为大值</p>
<p>数据修复：</p>
<ul>
<li>查询已流转完成但是签约状态为【待签约】的合同，提审批将签约状态刷新为【已签约】<br>代码优化：加强幂等</li>
<li>增加合同操作枚举值：归档操作</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>微服务概述</title>
    <url>/yq/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="什么是微服务？"><a href="#什么是微服务？" class="headerlink" title="什么是微服务？"></a>什么是微服务？</h1><p>微服务(Microservice Architecture) 是近几年流行的一种架构思想，关于它的概念很难一言以蔽之。<br>究竟什么是微服务呢？我们在此引用 ThoughtWorks 公司的首席科学家 Martin Fowler 于 2014 年提出的一段话：<br>原文：<a href="https://martinfowler.com/articles/microservices.html">https://martinfowler.com/articles/microservices.html</a><br>汉化：<a href="https://www.cnblogs.com/liuning8023/p/4493156.html">https://www.cnblogs.com/liuning8023/p/4493156.html</a></p>
<p>就目前而言，对于微服务，业界并没有一个统一的，标准的定义。<br>但通常而言，微服务架构是一种架构模式，或者说是一种架构风格，它体长将单一的应用程序划分成一组小的服务，每个服务运行在其独立的自己的进程内，服务之间互相协调，互相配置，为用户提供最终价值，服务之间采用轻量级的通信机制(HTTP)互相沟通，每个服务都围绕着具体的业务进行构建，并且能狗被独立的部署到生产环境中，另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应该根据业务上下文，选择合适的语言，工具(Maven)对其进行构建，可以有一个非常轻量级的集中式管理来协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据存储。</p>
<p>再来从技术维度角度理解下：<br>微服务化的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底地去耦合，每一个微服务提供单个业务功能的服务，一个服务做一件事情，从技术角度看就是一种小而独立的处理过程，类似进程的概念，能够自行单独启动或销毁，拥有自己独立的数据库。</p>
<p>#</p>
<p>微服务与微服务架构</p>
<h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><p>强调的是服务的大小，它关注的是某一个点，是具体解决某一个问题/提供落地对应服务的一个服务应用，狭义的看，可以看作是 IDEA 中的一个个微服务工程，或者 Moudel。IDEA 工具里面使用 Maven 开发的一个个独立的小 Moudel，它具体是使用 SpringBoot 开发的一个小模块，专业的事情交给专业的模块来做，一个模块就做着一件事情。强调的是一个个的个体，每个个体完成一个具体的任务或者功能。</p>
<h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2><p>一种新的架构形式，Martin Fowler 于 2014 年提出。<br>微服务架构是一种架构模式，它体长将单一应用程序划分成一组小的服务，服务之间相互协调，互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务与服务之间采用轻量级的通信机制**(如 HTTP)互相协作，每个服务都围绕着具体的业务进行构建，并且能够被独立的部署到生产环境中，另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具(如 Maven)**对其进行构建。</p>
<h1 id="微服务优缺点"><a href="#微服务优缺点" class="headerlink" title="微服务优缺点"></a>微服务优缺点</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>单一职责原则；<br>每个服务足够内聚，足够小，代码容易理解，这样能聚焦一个指定的业务功能或业务需求；<br>开发简单，开发效率高，一个服务可能就是专一的只干一件事；<br>微服务能够被小团队单独开发，这个团队只需 2-5 个开发人员组成；<br>微服务是松耦合的，是有功能意义的服务，无论是在开发阶段或部署阶段都是独立的；<br>微服务能使用不同的语言开发；<br>易于和第三方集成，微服务允许容易且灵活的方式集成自动部署，通过持续集成工具，如 jenkins，Hudson，bamboo；<br>微服务易于被一个开发人员理解，修改和维护，这样小团队能够更关注自己的工作成果，无需通过合作才能体现价值；<br>微服务允许利用和融合最新技术；<br>微服务只是业务逻辑的代码，不会和 HTML，CSS，或其他的界面混合;<br>每个微服务都有自己的存储能力，可以有自己的数据库，也可以有统一的数据库；</p>
<p>##</p>
<p>缺点<br>开发人员要处理分布式系统的复杂性；<br>多服务运维难度，随着服务的增加，运维的压力也在增大；<br>系统部署依赖问题；<br>服务间通信成本问题；<br>数据一致性问题；<br>系统集成测试问题；<br>性能和监控问题；</p>
<p>#</p>
<p>微服务技术栈<br>| <strong>微服务技术条目</strong> | 落地技术 |<br>| — | — |<br>| 服务开发 | SpringBoot、Spring、SpringMVC 等 |<br>| 服务配置与管理 | Netfix 公司的 Archaius、阿里的 Diamond 等 |<br>| 服务注册与发现 | Eureka、Consul、Zookeeper 等 |<br>| 服务调用 | Rest、PRC、gRPC |<br>| 服务熔断器 | Hystrix、Envoy 等 |<br>| 负载均衡 | Ribbon、Nginx 等 |<br>| 服务接口调用(客户端调用服务的简化工具) | Fegin 等 |<br>| 消息队列 | Kafka、RabbitMQ、ActiveMQ 等 |<br>| 服务配置中心管理 | SpringCloudConfig、Chef 等 |<br>| 服务路由(API 网关) | Zuul 等 |<br>| 服务监控 | Zabbix、Nagios、Metrics、Specatator 等 |<br>| 全链路追踪 | Zipkin、Brave、Dapper 等 |<br>| 数据流操作开发包 | SpringCloud Stream(封装与 Redis，Rabbit，Kafka 等发送接收消息) |<br>| 时间消息总栈 | SpringCloud Bus |<br>| 服务部署 | Docker、OpenStack、Kubernetes 等 |</p>
<h1 id="为什么选择-SpringCloud-作为微服务架构"><a href="#为什么选择-SpringCloud-作为微服务架构" class="headerlink" title="为什么选择 SpringCloud 作为微服务架构"></a>为什么选择 SpringCloud 作为微服务架构</h1><h2 id="选型依据"><a href="#选型依据" class="headerlink" title="选型依据"></a>选型依据</h2><p>整体解决方案和框架成熟度<br>社区热度<br>可维护性<br>学习曲线<br>当前各大 IT 公司用的微服务架构有那些？</p>
<p>阿里：dubbo+HFS<br>京东：JFS<br>新浪：Motan<br>当当网：DubboX</p>
<p>…</p>
<h1 id="各微服务框架对比"><a href="#各微服务框架对比" class="headerlink" title="各微服务框架对比"></a>各微服务框架对比</h1><p>| 功能点/服务框架 | Netflix/SpringCloud | Motan | gRPC | Thri t | Dubbo/DubboX |<br>| —————— | ———————————————————————————— | —————————————————- | ————————— | ———— | —————————— |<br>| 功能定位 | 完整的微服务框架 | RPC 框架，但整合了 ZK 或 Consul，实现集群环境的基本服务注册发现 | RPC 框架 | RPC 框架 | 服务框架 |<br>| 支持 Rest | 是，Ribbon 支持多种可拔插的序列号选择 | 否 | 否 | 否 | 否 |<br>| 支持 RPC | 否 | 是(Hession2) | 是 | 是 | 是 |<br>| 支持多语言 | 是(Rest 形式) | 否 | 是 | 是 | 否 |<br>| 负载均衡 | 是(服务端 zuul+客户端 Ribbon)，zuul-服务，动态路由，云端负载均衡 Eureka（针对中间层服务器） | 是(客户端) | 否 | 否 | 是(客户端) |<br>| 配置服务 | Netfix Archaius，Spring Cloud Config Server 集中配置 | 是(Zookeeper 提供) | 否 | 否 | 否 |<br>| 服务调用链监控 | 是(zuul)，zuul 提供边缘服务，API 网关 | 否 | 否 | 否 | 否 |<br>| 高可用/容错 | 是(服务端 Hystrix+客户端 Ribbon) | 是(客户端) | 否 | 否 | 是(客户端) |<br>| 典型应用案例 | Netflix | Sina | Google | Facebook | |<br>| 社区活跃程度 | 高 | 一般 | 高 | 一般 | 2017 年后重新开始维护，之前中断了 5 年 |<br>| 学习难度 | 中等 | 低 | 高 | 高 | 低 |<br>| 文档丰富程度 | 高 | 一般 | 一般 | 一般 | 高 |<br>| 其他 | Spring Cloud Bus 为我们的应用程序带来了更多管理端点 | 支持降级 | Netflix 内部在开发集成 gRPC | IDL 定义 | 实践的公司比较多 |</p>
]]></content>
  </entry>
  <entry>
    <title>方法论</title>
    <url>/yq/%E6%96%B9%E6%B3%95%E8%AE%BA/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>执行计划</title>
    <url>/yq/%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>explain 是 sql 优化的利器，除了优化慢 sql，平时的 sql 编写，也应该先 explain，查看一下执行计划，看看是否还有优化的空间。<br>直接在 select 语句之前增加 explain 关键字，就会返回执行计划的信息<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1656343343899-06885af7-42ad-4f68-8868-de98da1051e6.png#clientId=ubb238882-4c76-4&from=paste&height=116&id=ub14e49bf&name=1cf45f32182eca3fda961980558dee7a.png&originHeight=145&originWidth=1080&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=51651&status=done&style=none&taskId=ue64d5297-901b-4dc3-8abb-4dc7cce2fda&title=&width=864" alt="1cf45f32182eca3fda961980558dee7a.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1656343353067-1c62b7bc-10e2-4952-8061-2aef3d9c4c92.png#clientId=ubb238882-4c76-4&from=paste&height=1075&id=u541897fe&name=5d847a873e5ddb10060143321ee328be.png&originHeight=1344&originWidth=968&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=133627&status=done&style=none&taskId=u562025fd-b127-49dd-a8bb-042d6bb2047&title=&width=774.4" alt="5d847a873e5ddb10060143321ee328be.png"></p>
<h1 id="字段说明"><a href="#字段说明" class="headerlink" title="字段说明"></a>字段说明</h1><ol>
<li><strong>id 列：MySQL 会为每个 select 语句分配一个唯一的 id 值</strong></li>
<li><strong>select_type 列，查询的类型，根据关联、union、子查询等等分类，常见的查询类型有 SIMPLE、PRIMARY。</strong></li>
<li><strong>table 列：表示 explain 的一行正在访问哪个表。</strong></li>
<li><strong>type 列：最重要的列之一。表示关联类型或访问类型，即 MySQL 决定如何查找表中的行。性能从最优到最差分别为：system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</strong><ul>
<li>*<strong>*：当表仅有一行记录时(系统表)，数据量很少，往往不需要进行磁盘 IO，速度非常快</strong></li>
<li>*<strong>*：表示查询时命中 primary key 主键或者 unique 唯一索引，或者被连接的部分是一个常量(const)值。这类扫描效率极高，返回数据量少，速度非常快。</strong></li>
<li>*<strong>*：查询时命中主键 primary key 或者 unique key 索引， type 就是 eq_ref。</strong></li>
<li>*<strong>*：这种连接类型类似于 ref，区别在于 MySQL 会额外搜索包含 NULL 值的行。</strong></li>
<li>*<strong>*：使用了索引合并优化方法，查询使用了两个以上的索引。</strong></li>
<li><strong>unique_subqueryunique_subquery：替换下面的 IN 子查询，子查询返回不重复的集合。</strong></li>
<li><strong>index_subqueryindex_subquery：区别于 unique_subquery，用于非唯一索引，可以返回重复值。</strong></li>
<li>*<strong>*：使用索引选择行，仅检索给定范围内的行。简单点说就是针对一个有索引的字段，给定范围检索数据。在 where 语句中使用 bettween…and、&lt;、&gt;、&lt;=、in 等条件查询 type 都是 range。</strong></li>
<li>*<strong>*：Index 与 ALL 其实都是读全表，区别在于 index 是遍历索引树读取，而 ALL 是从硬盘中读取。</strong></li>
<li><strong>ALL 就不用多说了，全表扫描。</strong></li>
</ul>
</li>
<li><strong>possible_keys 列：显示查询可能使用哪些索引来查找，使用索引优化 sql 的时候比较重要。</strong></li>
<li><strong>key 列：这一列显示 mysql 实际采用哪个索引来优化对该表的访问，判断索引是否失效的时候常用。</strong></li>
<li><strong>key_len 列：显示了 MySQL 使用</strong></li>
<li><strong>ref 列：ref 列展示的就是与索引列作等值匹配的值，常见的有：const（常量），func，NULL，字段名。</strong></li>
<li><strong>rows 列：这也是一个重要的字段，MySQL 查询优化器根据统计信息，估算 SQL 要查到结果集需要扫描读取的数据行数，这个值非常直观显示 SQL 的效率好坏，原则上 rows 越少越好。</strong></li>
<li><strong>Extra 列：显示不适合在其它列的额外信息，虽然叫额外，但是也有一些重要的信息：</strong></li>
</ol>
<ul>
<li><strong>Using index：表示 MySQL 将使用覆盖索引，以避免回表</strong></li>
<li><strong>Using where：表示会在存储引擎检索之后再进行过滤</strong></li>
<li><strong>Using temporary ：表示对查询结果排序时会使用一个临时表。</strong></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>数据库连接池</title>
    <url>/yq/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>日志框架</title>
    <url>/yq/%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1653313587057-ea2021c0-df7b-461f-96a0-4384a0670865.png#clientId=u0ca72cef-316e-4&from=paste&height=165&id=u2739038b&name=image.png&originHeight=330&originWidth=640&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=127558&status=done&style=none&taskId=uada8473b-171d-4b55-aacc-72e3b17b6ed&title=&width=320" alt="image.png"></p>
]]></content>
  </entry>
  <entry>
    <title>数据库</title>
    <url>/yq/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>服务熔断（思路）</title>
    <url>/yq/%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD%EF%BC%88%E6%80%9D%E8%B7%AF%EF%BC%89/</url>
    <content><![CDATA[<p>有时候一个需求可能会涉及到多条业务线共同开发，在上线时业务线之间因为存在依赖关系需要顺序发版，但为了避免我们所依赖的业务线上线出了问题回滚代码，导致我们也需要跟着回滚的情况，或者有时候我们的依赖方因为各种原因要等到深夜一两点才上线，我们并不想拖到那个点，基于这两种情况我们在开发中其实可以入侵一些参数作为代码块执行的控制（开关），起一个熔断的作用，顺序上线时我们开启新代码配置走新逻辑，依赖方出问题时我们只需要改变参数走老逻辑即可实现模拟性的回滚而不用真实再去回滚我们的代码，运行一阵子顺利后我们再将配置给去除；如果我们需要提前上线时设置 参数值 走旧逻辑，待到依赖方上线完成后，我们只需要修改参数值走 新逻辑 即可。【提前上线有时候可以缓解甚至避免正常上线带来的紧张感】。</p>
]]></content>
  </entry>
  <entry>
    <title>易忘点</title>
    <url>/yq/%E6%98%93%E5%BF%98%E7%82%B9/</url>
    <content><![CDATA[<h1 id="解决循环依赖"><a href="#解决循环依赖" class="headerlink" title="解决循环依赖"></a>解决循环依赖</h1><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.main.allow-circular-references</span> = <span class="string">true</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>日期的使用</title>
    <url>/yq/%E6%97%A5%E6%9C%9F%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Calendar-类"><a href="#Calendar-类" class="headerlink" title="Calendar 类"></a>Calendar 类</h1><p>参考文档：<a href="https://blog.csdn.net/weixin_44259720/article/details/86669177">https://blog.csdn.net/weixin_44259720/article/details/86669177</a></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Calendar</span></span></span><br><span class="line"><span class="class">	<span class="keyword">extends</span> <span class="title">Objectimplements</span> <span class="title">Serializable</span>, <span class="title">Cloneable</span>, <span class="title">Comparable</span>&lt;<span class="title">Calendar</span>&gt;</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>该类由 abstract 修饰，是一个抽象类，因此无法通过 new 来实现。它提供了 getInstance()方法来获取由当前日期及时间初始化的子类。</p>
<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="获取时间"><a href="#获取时间" class="headerlink" title="获取时间"></a>获取时间</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalenderTest</span> </span>&#123;</span><br><span class="line">	<span class="comment">//获取时间：以目前系统时间 ：2019:01:27 16:27:27 为例</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetCalender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Calendar cal = Calendar.getInstance();    							<span class="comment">//Calendar类的实例化</span></span><br><span class="line">		SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);	<span class="comment">//时间的格式化</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//当前系统时间</span></span><br><span class="line">		Date date = cal.getTime();								<span class="comment">//date=Sun Jan 27 16:27:27 CST 2019</span></span><br><span class="line">		String nowTime = sdf.format(cal.getTime());				<span class="comment">//nowTime=2019-01-27 16:27:27</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//当前年</span></span><br><span class="line">		<span class="keyword">int</span> year = cal.get(Calendar.YEAR);						<span class="comment">//year=2019</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//当前月 Calendar.MONTH从0开始 ,使用时通常会+1</span></span><br><span class="line">		<span class="keyword">int</span> month = cal.get(Calendar.MONTH) + <span class="number">1</span>;				<span class="comment">//month=1</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//当前日：两种方法等价</span></span><br><span class="line">		<span class="keyword">int</span> day_of_month = cal.get(Calendar.DAY_OF_MONTH);		<span class="comment">//day_of_month=27</span></span><br><span class="line">		<span class="keyword">int</span> day = cal.get(Calendar.DATE);  						<span class="comment">//day=27</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//获取当月day的最大值！！</span></span><br><span class="line">		<span class="keyword">int</span> max_day_of_month = cal.getActualMaximum(Calendar.DAY_OF_MONTH);	<span class="comment">//max_day_of_month=31</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//当前时钟：24小时制</span></span><br><span class="line">		<span class="keyword">int</span> hour24 = cal.get(Calendar.HOUR_OF_DAY);				<span class="comment">//hour24=16</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//当前时钟：12小时制</span></span><br><span class="line">		<span class="keyword">int</span> hour12 = cal.get(Calendar.HOUR); 					<span class="comment">//hour12=4</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//当前:分钟</span></span><br><span class="line">		<span class="keyword">int</span> minute = cal.get(Calendar.MINUTE);   				<span class="comment">//minute=27</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//当前秒</span></span><br><span class="line">		<span class="keyword">int</span> second = cal.get(Calendar.SECOND);  				<span class="comment">//second=27</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//星期几：用数字（1~7）表示（星期日~星期六），使用时通常会-1</span></span><br><span class="line">		<span class="keyword">int</span> day_of_week = cal.get(Calendar.DAY_OF_WEEK) - <span class="number">1</span>;	<span class="comment">//day_of_week=0</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//上午-0；下午-1</span></span><br><span class="line">		<span class="keyword">int</span> amOrPm = cal.get(Calendar.AM_PM);  					<span class="comment">//amOrPm=1</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//当前年的第几周</span></span><br><span class="line">		<span class="keyword">int</span> week_of_year = cal.get(Calendar.WEEK_OF_YEAR);		<span class="comment">//week_of_year=5</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//当前月的星期数</span></span><br><span class="line">		<span class="keyword">int</span> week_of_month = cal.get(Calendar.WEEK_OF_MONTH);	<span class="comment">//week_of_month=5</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//当前月中的第几个星期</span></span><br><span class="line">		<span class="keyword">int</span> day_of_week_in_month = cal.get(Calendar.DAY_OF_WEEK_IN_MONTH); <span class="comment">//day_of_week_in_month=4</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//当前年的第几天</span></span><br><span class="line">		<span class="keyword">int</span> day_of_year = cal.get(Calendar.DAY_OF_YEAR);		<span class="comment">//day_of_year=27</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="设置时间"><a href="#设置时间" class="headerlink" title="设置时间"></a>设置时间</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalenderTest</span> </span>&#123;</span><br><span class="line">	<span class="comment">//设置时间：以目前系统时间 ：2019:01:27 16:27:27 为例</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSetCalender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Calendar cal = Calendar.getInstance();    							<span class="comment">//Calendar类的实例化</span></span><br><span class="line">		SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);	<span class="comment">//时间的格式化</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//1.当前系统时间</span></span><br><span class="line">		Date date = cal.getTime();							<span class="comment">//data=Sun Jan 27 16:27:27 CST 2019</span></span><br><span class="line">		String nowTime = sdf.format(cal.getTime());			<span class="comment">//nowTime=2019-01-27 16:27:27</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//2.设置时间：不设置项，默认Calendar已经存在日期</span></span><br><span class="line">		cal.set(Calendar.HOUR_OF_DAY, <span class="number">11</span>);</span><br><span class="line">		cal.set(Calendar.MINUTE, <span class="number">30</span>);</span><br><span class="line">		cal.set(Calendar.SECOND, <span class="number">30</span>);</span><br><span class="line">		String date1 = sdf.format(cal.getTime());			<span class="comment">//time=2019-01-27 11:30:30</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//3.设置时间：全部设置，则输出自定义时间</span></span><br><span class="line">		cal.set(Calendar.YEAR, <span class="number">2018</span>);</span><br><span class="line">		cal.set(Calendar.MARCH, <span class="number">7</span>);</span><br><span class="line">		cal.set(Calendar.DATE, <span class="number">21</span>);</span><br><span class="line">		String date2 = sdf.format(cal.getTime());			<span class="comment">//time=2018-08-21 11:30:30</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//4.时间重置：Date date = new date();</span></span><br><span class="line">		String newDate1 = sdf.format(cal.getTime());		<span class="comment">//newDate1=2018-08-21 11:30:30</span></span><br><span class="line">		String newDate2 = sdf.format(<span class="keyword">new</span> Date());			<span class="comment">//newDate2=2019:01:27 16:27:27</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="时间运算"><a href="#时间运算" class="headerlink" title="时间运算"></a>时间运算</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalenderTest</span> </span>&#123;</span><br><span class="line">	<span class="comment">//时间运算：以目前系统时间 ：2019:01:27 16:27:27 为例</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddCalender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Calendar cal = Calendar.getInstance();    							<span class="comment">//Calendar类的实例化</span></span><br><span class="line">		SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);	<span class="comment">//时间的格式化</span></span><br><span class="line"></span><br><span class="line">		String nowTime = sdf.format(cal.getTime());		<span class="comment">//nowTime=2019-01-27 16:27:27</span></span><br><span class="line"></span><br><span class="line">		cal.add(Calendar.YEAR, <span class="number">1</span>);</span><br><span class="line">		String time1 = sdf.format(cal.getTime());		<span class="comment">//年:2020-01-27 16:27:27</span></span><br><span class="line"></span><br><span class="line">		cal.add(Calendar.MONTH, <span class="number">2</span>);</span><br><span class="line">		String time2 = sdf.format(cal.getTime());		<span class="comment">//月:2020-03-27 16:27:27</span></span><br><span class="line"></span><br><span class="line">		cal.add(Calendar.DATE, <span class="number">5</span>);</span><br><span class="line">		String time3 = sdf.format(cal.getTime());		<span class="comment">//日:2020-04-01 16:27:27</span></span><br><span class="line"></span><br><span class="line">		cal.add(Calendar.HOUR_OF_DAY, -<span class="number">1</span>);</span><br><span class="line">		String time4 = sdf.format(cal.getTime());		<span class="comment">//时:2020-04-01 15:27:27</span></span><br><span class="line"></span><br><span class="line">		cal.add(Calendar.MINUTE, <span class="number">1</span>);</span><br><span class="line">		String time5 = sdf.format(cal.getTime());		<span class="comment">//分:2020-04-01 15:28:27</span></span><br><span class="line"></span><br><span class="line">		cal.add(Calendar.SECOND, <span class="number">1</span>);</span><br><span class="line">		String time6 = sdf.format(cal.getTime());		<span class="comment">//秒:2020-04-01 15:27:28</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>树形结构数据构建</title>
    <url>/yq/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84%E6%95%B0%E6%8D%AE%E6%9E%84%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在项目中，我们经常涉及单张表数据进行树形目录结构展示（即具有层级关系的数据结构），比如菜单层级展示、商品分类展示等。</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>单张表之间要具备层级关系，必然会有能体现父子之间的字段，比如常见的<strong>id</strong>和<strong>parentId</strong><br>比如这样一张表<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1654393775795-14a8eaa4-2106-4446-97e9-b6a485f4542f.png#clientId=ua8044348-8b27-4&from=paste&id=u9020b477&name=image.png&originHeight=185&originWidth=753&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=20471&status=done&style=none&taskId=u9934c338-c89a-4826-9811-6d8572c4f9d&title=" alt="image.png"><br>pid 为 0 时即为最高层级，pid 为 1366 的是 id 为 1366 的孩子，在上面的体现是<strong>裤子和上衣都在衣服这一个分类下面</strong><br>要实现这张表树形结构的展示，我们一方面得在该表对应的实体类里添加一个自身的集合 childList 作为其孩子的集合。</p>
<h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><p>这里我是将它封装成一个工具类使用。<br>注意：这里默认表里的父级字段为 <strong>parentId</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 构建树的时候需要实体继承此类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr Ye</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/15 17:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">C</span> <span class="keyword">extends</span> <span class="title">TreeNode</span>&lt;?&gt;&gt;</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 父id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String parentId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  子节点j集合</span></span><br><span class="line"><span class="comment">     * 	非数据库字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;TreeNode&gt; children;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>工具类实现树形结构的展示（递归思想找子节点）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span>: 生成树工具(根节点可有多个)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span> Mr Ye</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> treeNodes 所有节点（所有数据）</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> parentId  指定根节点的唯一标识</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 2020/10/15 18:01</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span>  <span class="keyword">static</span> &lt;T extends TreeNode&gt;<span class="function">List&lt;T&gt; <span class="title">build</span><span class="params">(List&lt;T&gt; treeNodes, String parentId)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (parentId == <span class="keyword">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       List&lt;T&gt; rootNodes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span> (T t : treeNodes)&#123;</span><br><span class="line">           <span class="keyword">if</span> (parentId.equals(t.getParentId()))&#123;</span><br><span class="line">               <span class="comment">//得到根节点</span></span><br><span class="line">               rootNodes.add(t);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (T t : rootNodes)&#123;</span><br><span class="line">           t.setChildren(getChildNodes(t,treeNodes));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> rootNodes;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span>: 获得子节点</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span> Mr Ye</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> t</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> treeNodes</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 2020/10/6 18:27</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> &lt;T extends TreeNode&gt;<span class="function">List&lt;TreeNode&gt; <span class="title">getChildNodes</span><span class="params">(TreeNode t,List&lt;T&gt; treeNodes)</span></span>&#123;</span><br><span class="line">       List&lt;TreeNode&gt; childNodes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span> (TreeNode t1 : treeNodes)&#123;</span><br><span class="line">           <span class="keyword">if</span> (t1.getParentId().equals(t.getId()))&#123;</span><br><span class="line">               childNodes.add(t1);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (childNodes.size() == <span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (TreeNode t1 : childNodes)&#123;</span><br><span class="line">           t1.setChildren(getChildNodes(t1,treeNodes));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> childNodes;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>要实现树形结构的步骤：</p>
<ul>
<li>表设计要有父子级关系（一般用 id 和 parentId）</li>
<li>实体要新增 子节点 的集合变量，一般用 List 接收</li>
<li>查找获得所有符合要求的数据，通过遍历得到 <strong>父节点集合</strong>，遍历<strong>父节点集合</strong>，遍历<strong>子节点结合</strong>，父节点的 id 和子节点的父 id 相等时，说明该节点数属于当前父节点的孩子，将其放入父节点的孩子集合中，遍历结束后，将子节点集合赋值给 <strong>集合变量</strong>。（这里用递归思想实现）</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>查找算法</title>
    <url>/yq/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="二分查找法（折半查找法）"><a href="#二分查找法（折半查找法）" class="headerlink" title="二分查找法（折半查找法）"></a>二分查找法（折半查找法）</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 二分查找算法，查到返回数据下标，查不到返回-1。条件：数据是有序的</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 吴焕业</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> high = arr.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (low + high)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; arr[mid]) &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &gt; arr[mid]) &#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>汇报模板</title>
    <url>/yq/%E6%B1%87%E6%8A%A5%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>死锁问题</title>
    <url>/yq/%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="报错文案"><a href="#报错文案" class="headerlink" title="报错文案"></a>报错文案</h1><p>(表名包名等敏感信息已替换)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Error updating database.  Cause: com.mysql.cj.jdbc.exceptions.MySQLTransactionRollbackException: <span class="keyword">Lock</span> <span class="keyword">wait</span> <span class="keyword">timeout</span> exceeded; try restarting transaction</span><br><span class="line">The error may involve com.xx.xx.mapper.XxxxMapper.updateByPrimaryKeySelective-Inline</span><br><span class="line">The error occurred while setting parameters</span><br><span class="line">SQL: <span class="keyword">update</span> people          <span class="keyword">SET</span> contract_id = ?          <span class="keyword">where</span> <span class="keyword">id</span> = ?</span><br><span class="line">Cause: com.mysql.cj.jdbc.exceptions.MySQLTransactionRollbackException: <span class="keyword">Lock</span> <span class="keyword">wait</span> <span class="keyword">timeout</span> exceeded; try restarting transaction</span><br><span class="line">; <span class="keyword">Lock</span> <span class="keyword">wait</span> <span class="keyword">timeout</span> exceeded; try restarting transaction; nested exception is com.mysql.cj.jdbc.exceptions.MySQLTransactionRollbackException: <span class="keyword">Lock</span> <span class="keyword">wait</span> <span class="keyword">timeout</span> exceeded; try restarting transaction</span><br></pre></td></tr></table></figure>

<h1 id="报错场景一"><a href="#报错场景一" class="headerlink" title="报错场景一"></a>报错场景一</h1><p>商户 A 的人员批量平移到商户 B：<br>对 A 商户的人员要做的操作：</p>
<ul>
<li>修改在职状态为【已离职】</li>
<li>生成解除协议</li>
</ul>
<p>在 B 商户要做的操作</p>
<ul>
<li>拷贝平移人员数据，插入表中</li>
<li>B 商户的这波人为【在职】，需要生成劳动合同，并将生成的劳动合同的 id 更新到对应的人员身上</li>
</ul>
<p>问题原因：<br>对 A 商户人员的操作和对 B 商户的批量人员操作放在一个 大事务 T1 里，然后劳动合同更新到 B 商户采用的是异步方式（也是一个事务 T2）;T1 事务尚未提交，T2 事务要对 T1 事务里 B 商户的人员更新合同 id,造成锁超时，导致报错。</p>
<h1 id="报错场景二【锁冲突】"><a href="#报错场景二【锁冲突】" class="headerlink" title="报错场景二【锁冲突】"></a>报错场景二【锁冲突】</h1><p>用工后台【发起签约】操作时，会调用我们中台修改合同接口；发起签约操作同时会发布消息，我们进行消费，消费的过程中有些条件会调用修改合同接口，两者调用发生冲突导致一个调用未拿到锁标记而返回失败造成接口调用失败。<br>解决方案 ：后台的消息发布应该置后于调用我们中台编辑合同接口之前，先调用成功，再发布消息，这才是合理的。<br>（如果无先后顺序的业务，中台或者后台需要做接口重试）</p>
]]></content>
  </entry>
  <entry>
    <title>浅析ThreadLocal</title>
    <url>/yq/%E6%B5%85%E6%9E%90ThreadLocal/</url>
    <content><![CDATA[<p>参考：<a href="https://www.bilibili.com/video/BV1N741127FH?p=8">https://www.bilibili.com/video/BV1N741127FH?p=8</a></p>
<h1 id="案例一：不使用-ThreadLocal，造成线程不隔离的场景："><a href="#案例一：不使用-ThreadLocal，造成线程不隔离的场景：" class="headerlink" title="案例一：不使用 ThreadLocal，造成线程不隔离的场景："></a>案例一：不使用 ThreadLocal，造成线程不隔离的场景：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String content)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ThreadLocalTest test = <span class="keyword">new</span> ThreadLocalTest();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">6</span>;i++)&#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    test.set(Thread.currentThread().getName()+<span class="string">&quot;的数据&quot;</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+test.get());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            thread.setName(<span class="string">&quot;线程&quot;</span>+i);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">线程<span class="number">1</span>--&gt;线程<span class="number">1</span>的数据</span><br><span class="line">线程<span class="number">4</span>--&gt;线程<span class="number">4</span>的数据</span><br><span class="line">线程<span class="number">2</span>--&gt;线程<span class="number">1</span>的数据</span><br><span class="line">线程<span class="number">0</span>--&gt;线程<span class="number">4</span>的数据</span><br><span class="line">线程<span class="number">3</span>--&gt;线程<span class="number">1</span>的数据</span><br><span class="line">线程<span class="number">5</span>--&gt;线程<span class="number">5</span>的数据</span><br></pre></td></tr></table></figure>

<p>由上面输出结果可以看到，A 线程获取的值并不一定是它自身设置的值，这就是多线程之间未做隔离导致的问题。</p>
<h1 id="案例二：使用-threadLocal-将变量绑定在当前线程实现线程隔离"><a href="#案例二：使用-threadLocal-将变量绑定在当前线程实现线程隔离" class="headerlink" title="案例二：使用 threadLocal 将变量绑定在当前线程实现线程隔离"></a>案例二：使用 threadLocal 将变量绑定在当前线程实现线程隔离</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> thread;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将变量绑定在当前线程</span></span><br><span class="line">    ThreadLocal&lt;String&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String content)</span></span>&#123;</span><br><span class="line">        threadLocal.set(content);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ThreadLocalTest test = <span class="keyword">new</span> ThreadLocalTest();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">6</span>;i++)&#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    test.set(Thread.currentThread().getName()+<span class="string">&quot;的数据&quot;</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+test.get());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            thread.setName(<span class="string">&quot;线程&quot;</span>+i);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">线程<span class="number">3</span>--&gt;线程<span class="number">3</span>的数据</span><br><span class="line">线程<span class="number">0</span>--&gt;线程<span class="number">0</span>的数据</span><br><span class="line">线程<span class="number">5</span>--&gt;线程<span class="number">5</span>的数据</span><br><span class="line">线程<span class="number">1</span>--&gt;线程<span class="number">1</span>的数据</span><br><span class="line">线程<span class="number">4</span>--&gt;线程<span class="number">4</span>的数据</span><br><span class="line">线程<span class="number">2</span>--&gt;线程<span class="number">2</span>的数据</span><br></pre></td></tr></table></figure>

<p>可以看到每个线程取的都是其设置的值。</p>
<h1 id="ThreadLocal-和-synchronized-的区别"><a href="#ThreadLocal-和-synchronized-的区别" class="headerlink" title="ThreadLocal 和 synchronized 的区别"></a>ThreadLocal 和 synchronized 的区别</h1><p>共同点：都用于多线程并发访问变量的问题。</p>
<p>|<br>| synchronize | ThreadLocal |<br>| — | — | — |<br>| 原理 | 同步机制采用以时间换空间的方式，只提供了一份变量，让不同的线程排队去访问。 | 采用以空间换时间的方式，为每一个线程都提供了一份变量的副本从而实现同时访问而互相不干扰。 |<br>| 侧重点 | 多个线程之间访问资源的同步。 | 多线程中让每个线程之间的数据相互隔离。 |</p>
<h1 id="ThreadLocal-设计"><a href="#ThreadLocal-设计" class="headerlink" title="ThreadLocal 设计"></a>ThreadLocal 设计</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1648288209765-46566887-13f6-4917-ba33-8a3a158e01d9.png#clientId=u21f587e5-663f-4&from=paste&height=678&id=ue6985c88&name=image.png&originHeight=847&originWidth=1832&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=462584&status=done&style=none&taskId=u6fa871a1-2c26-49cd-9c07-77fe10b1929&title=&width=1465.6" alt="image.png"></p>
]]></content>
  </entry>
  <entry>
    <title>消息队列</title>
    <url>/yq/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<p>计划：2022 春节前有一个系统的认识和初步使用</p>
]]></content>
  </entry>
  <entry>
    <title>消息丢失问题</title>
    <url>/yq/%E6%B6%88%E6%81%AF%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>深分页问题</title>
    <url>/yq/%E6%B7%B1%E5%88%86%E9%A1%B5%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>参考链接：<a href="https://blog.csdn.net/weixin_36380516/article/details/120520705">https://blog.csdn.net/weixin_36380516/article/details/120520705</a></p>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>近期，随着我们系统数据量的快速增长，达到 40w 左右，一个导出全量花名册的功能造成了 SQL 慢查询，该功能调用的是一个分页查询的接口，每一页 20 条数据。我们的分页查询用的是自定义分页插件，底层数据库操作实现为常见的 <strong>limit pageNo,pageSize</strong>，当进行深分页时就很容易造成慢 SQL，比如达到 ** limit 300000,20**</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="深分页为什么会变慢"><a href="#深分页为什么会变慢" class="headerlink" title="深分页为什么会变慢"></a>深分页为什么会变慢</h2><ol>
<li>limit 语句会先扫描 offset+n 行，然后再丢弃掉前 offset 行，返回后 n 行数据。也就是说 limit 100000,10，就会扫描 100010 行，而 limit 0,10，只扫描 10 行。</li>
<li>limit 100000,10 扫描更多的行数，也意味着<strong>回表</strong>更多的次数。</li>
</ol>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><h2 id="减少回表的次数"><a href="#减少回表的次数" class="headerlink" title="减少回表的次数"></a>减少回表的次数</h2><p>通过分析，知道深分页慢的原因主要是回表次数过多导致，那减少回表的次数即可。<br>InnoDB 中，索引分<a href="https://so.csdn.net/so/search?q=%E4%B8%BB%E9%94%AE&spm=1001.2101.3001.7020">主键</a>索引（聚簇索引）和二级索引</p>
<ul>
<li>主键索引，叶子节点存放的是整行数据</li>
<li>二级索引，叶子节点存放的是<strong>主键的值</strong>。</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1655425187614-bc612c12-5590-47b0-992f-411c4b34218b.png#clientId=u5d7ef5f3-51ba-4&from=paste&id=xNhWR&name=image.png&originHeight=466&originWidth=1080&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=95251&status=done&style=none&taskId=u82ea4bb0-0bb8-4052-af65-88c554d0491&title=" alt="image.png"><br><strong>将普通索索引的查询转化为主键的查询，这样一来便可以减少回表的次数。</strong></p>
<h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><h2 id="inner-join-查询"><a href="#inner-join-查询" class="headerlink" title="inner join 查询"></a>inner join 查询</h2>]]></content>
  </entry>
  <entry>
    <title>深拷贝和浅拷贝</title>
    <url>/yq/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<p>转自 <a href="https://snailclimb.gitee.io/javaguide/#/docs/java/basis/java-basic-questions-02?id=%e6%b7%b1%e6%8b%b7%e8%b4%9d%e5%92%8c%e6%b5%85%e6%8b%b7%e8%b4%9d%e5%8c%ba%e5%88%ab%e4%ba%86%e8%a7%a3%e5%90%97%ef%bc%9f%e4%bb%80%e4%b9%88%e6%98%af%e5%bc%95%e7%94%a8%e6%8b%b7%e8%b4%9d%ef%bc%9f">JavaGuide</a></p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul>
<li><strong>浅拷贝</strong>：浅拷贝会在堆上创建一个新的对象（区别于引用拷贝的一点），不过，如果原对象内部的属性是引用类型的话，浅拷贝会直接复制内部对象的引用地址，也就是说拷贝对象和原对象共用同一个内部对象。</li>
<li><strong>深拷贝</strong> ：深拷贝会完全复制整个对象，包括这个对象所包含的内部对象。</li>
</ul>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>浅拷贝的示例代码如下，我们这里实现了 Cloneable 接口，并重写了 clone() 方法。<br>clone() 方法的实现很简单，直接调用的是父类 Object 的 clone() 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 省略构造函数、Getter&amp;Setter方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Address) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="comment">// 省略构造函数、Getter&amp;Setter方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Person person = (Person) <span class="keyword">super</span>.clone();</span><br><span class="line">            <span class="keyword">return</span> person;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person person1 = <span class="keyword">new</span> Person(<span class="keyword">new</span> Address(<span class="string">&quot;武汉&quot;</span>));</span><br><span class="line">Person person1Copy = person1.clone();</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">System.out.println(person1.getAddress() == person1Copy.getAddress());</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>从输出结构就可以看出， person1 的克隆对象和 person1 使用的仍然是同一个 Address 对象。</p>
<h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>这里我们简单对 Person 类的 clone() 方法进行修改，连带着要把 Person 对象内部的 Address 对象一起复制。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Person person = (Person) <span class="keyword">super</span>.clone();</span><br><span class="line">        person.setAddress(person.getAddress().clone());</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person person1 = <span class="keyword">new</span> Person(<span class="keyword">new</span> Address(<span class="string">&quot;武汉&quot;</span>));</span><br><span class="line">Person person1Copy = person1.clone();</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line">System.out.println(person1.getAddress() == person1Copy.getAddress());</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>从输出结构就可以看出，虽然 person1 的克隆对象和 person1 包含的 Address 对象已经是不同的了。<br><strong>那什么是引用拷贝呢？</strong> 简单来说，引用拷贝就是两个不同的引用指向同一个对象。<br>我专门画了一张图来描述浅拷贝、深拷贝、引用拷贝：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1656495508869-6186f349-7d26-4488-8d2d-361648ed4a29.png#clientId=ua443f20c-f55b-4&from=paste&height=440&id=ufbe9804f&name=image.png&originHeight=879&originWidth=1308&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=230287&status=done&style=none&taskId=udcd8aa64-14be-4e29-a6ed-b6475f8db0f&title=&width=654" alt="image.png"></p>
]]></content>
  </entry>
  <entry>
    <title>消费补偿设计</title>
    <url>/yq/%E6%B6%88%E8%B4%B9%E8%A1%A5%E5%81%BF%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>消息消费失败，补偿机制。</p>
]]></content>
  </entry>
  <entry>
    <title>源码</title>
    <url>/yq/%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前线程</span></span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        <span class="comment">// 获取当前线程获取ThreadLocalMap对象</span></span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 根据threadLocal对象从map中获取Entry对象</span></span><br><span class="line">            ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                T result = (T)e.value;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setInitialValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        T value = initialValue();</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">            map.set(<span class="keyword">this</span>, value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            createMap(t, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">instanceof</span> TerminatingThreadLocal) &#123;</span><br><span class="line">            TerminatingThreadLocal.register((TerminatingThreadLocal&lt;?&gt;) <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">        t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalMap</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class="line">            Object value;</span><br><span class="line"></span><br><span class="line">            Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">                <span class="keyword">super</span>(k);</span><br><span class="line">                value = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>生命周期</title>
    <url>/yq/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/22422342/1657425899143-957f2feb-2025-49bb-bd6a-aa616d21726e.jpeg#clientId=u8621673e-cdd4-4&from=paste&id=u6cb78345&originHeight=547&originWidth=1091&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&taskId=ub4e0d768-3458-440c-b7b3-e3965d90c86&title="></p>
]]></content>
  </entry>
  <entry>
    <title>知识点概览</title>
    <url>/yq/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A6%82%E8%A7%88/</url>
    <content><![CDATA[<h1 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h1><ul>
<li>类加载器（ClassLoader）</li>
<li>运行时数据区（Runtime Data Area）</li>
<li>执行引擎（Execution Engine）</li>
<li>本地库接口（Native Interface）</li>
</ul>
<p>组件的作用： 首先通过类加载器（ClassLoader）会把 Java 代码转换成字节码，运行时数据区（Runtime Data Area）再把字节码加载到内存中，而字节码文件只是 JVM 的一套指令集规范，并不能直接交个底层操作系统去执行，因此需要特定的命令解析器执行引擎（Execution Engine），将字节码翻译成底层系统指令，再交由 CPU 去执行，而这个过程中需要调用其他语言的本地库接口（NativeInterface）来实现整个程序的功能。</p>
<h1 id="说一下-JVM-运行时数据区？"><a href="#说一下-JVM-运行时数据区？" class="headerlink" title="说一下 JVM 运行时数据区？"></a>说一下 JVM 运行时数据区？</h1><p>不同虚拟机的运行时数据区可能略微有所不同，但都会遵从 Java 虚拟机规范， Java 虚拟机规范规定的区域分为以下 5 个部分：</p>
<ul>
<li><strong>程序计数器/pc 寄存器</strong>（Program Counter Register）：当前线程所执行的字节码的行号指示器，字节码解析器的工作是通过改变这个计数器的值，来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能，都需要依赖这个计数器来完成；</li>
<li><strong>Java 虚拟机栈</strong>（Java Virtual Machine Stacks）：用于存储局部变量表、操作数栈、动态链接、方法出口等信息；</li>
<li><strong>本地方法栈</strong>（Native Method Stack）：与虚拟机栈的作用是一样的，只不过虚拟机栈是服务 Java 方法的，而本地方法栈是为虚拟机调用 Native 方法服务的；</li>
<li><strong>Java 堆</strong>（Java Heap）：Java 虚拟机中内存最大的一块，是被所有线程共享的，几乎所有的对象实例都在这里分配内存；</li>
<li><strong>方法区</strong>（Methed Area）：用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等数据。</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1656944303845-157f4f56-d041-4393-847f-6f21473ad876.png#clientId=u11f1e445-c5d7-4&from=paste&id=uae419bcb&originHeight=610&originWidth=650&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&taskId=u197c025e-8f62-4cfa-91b7-a9e85a3fcc0&title="></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1656944318049-a292418e-2705-4fbc-b46b-eece17f191dc.png#clientId=u11f1e445-c5d7-4&from=paste&id=u23b322f7&originHeight=561&originWidth=650&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&taskId=u240be4d1-e5f1-4926-9aaa-cb7d578641e&title="></p>
<h1 id="说一下堆栈的区别？"><a href="#说一下堆栈的区别？" class="headerlink" title="说一下堆栈的区别？"></a>说一下堆栈的区别？</h1><ul>
<li>功能方面：堆是用来存放对象的，栈是用来执行程序的。</li>
<li>共享性：<strong>堆</strong>是线程<strong>共享</strong>的，<strong>栈</strong>是线程<strong>私有</strong>的。</li>
<li>空间大小：堆大小远远大于栈在介绍双亲委派模型之前先说下类加载器。对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立在 JVM 中的唯一性，每一个类加载器，都有一个独立的类名称空间。类加载器就是根据指定全限定名称将 class 文件加载到 JVM 内存，然后再转化为 class 对象。</li>
</ul>
<h1 id="什么是双亲委派模型？"><a href="#什么是双亲委派模型？" class="headerlink" title="什么是双亲委派模型？"></a>什么是双亲委派模型？</h1><p>在介绍双亲委派模型之前先说下类加载器。对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立在 JVM 中的唯一性，每一个类加载器，都有一个独立的类名称空间。类加载器就是根据指定全限定名称将 class 文件加载到 JVM 内存，然后再转化为 class 对象。</p>
<h1 id="类加载的执行过程（5-个步骤）"><a href="#类加载的执行过程（5-个步骤）" class="headerlink" title="类加载的执行过程（5 个步骤）"></a>类加载的执行过程（5 个步骤）</h1><ul>
<li><strong>加载</strong>：根据查找路径找到相应的 class 文件然后导入；</li>
<li><strong>检查</strong>：检查加载的 class 文件的正确性；</li>
<li><strong>准备</strong>：给类中的静态变量分配内存空间；</li>
<li><strong>解析</strong>：虚拟机将常量池中的符号引用替换成直接引用的过程。符号引用就理解为一个标示，而在直接引用直接指向内存中的地址；</li>
<li><strong>初始化</strong>：对静态变量和静态代码块执行初始化工作。</li>
</ul>
<h1 id="判断对象是否可以被回收"><a href="#判断对象是否可以被回收" class="headerlink" title="判断对象是否可以被回收"></a>判断对象是否可以被回收</h1><p>一般有两种方法来判断：</p>
<ul>
<li><strong>引用计数器</strong>：为每个对象创建一个引用计数，有对象引用时计数器 +1，引用被释放时计数 -1，当计数器为 0 时就可以被回收。它有一个缺点不能解决循环引用的问题；</li>
<li><strong>可达性分析</strong>：从 GC Roots 开始向下搜索，搜索所走过的路径称为引用链。当一个对象到 GC Roots 没有任何引用链相连时，则证明此对象是可以被回收的。</li>
</ul>
<h1 id="JVM-有哪些垃圾回收算法"><a href="#JVM-有哪些垃圾回收算法" class="headerlink" title="JVM 有哪些垃圾回收算法"></a>JVM 有哪些垃圾回收算法</h1><ul>
<li><strong>标记-清除算法</strong>：标记无用对象，然后进行清除回收。缺点：效率不高，无法清除垃圾碎片。</li>
<li><strong>标记-整理算法</strong>：标记无用对象，让所有存活的对象都向一端移动，然后直接清除掉端边界以外的内存。</li>
<li><strong>复制算法</strong>：按照容量划分二个大小相等的内存区域，当一块用完的时候将活着的对象复制到另一块上，然后再把已使用的内存空间一次清理掉。缺点：内存使用率不高，只有原来的一半。</li>
<li><strong>分代算法</strong>：根据对象存活周期的不同将内存划分为几块，一般是新生代和老年代，新生代基本采用复制算法，老年代采用标记整理算法。</li>
</ul>
<h1 id="JVM-垃圾回收器"><a href="#JVM-垃圾回收器" class="headerlink" title="JVM 垃圾回收器"></a>JVM 垃圾回收器</h1><p>1）<strong>Serial</strong>：最早的单线程串行垃圾回收器。<br>2）<strong>Serial Old</strong>：Serial 垃圾回收器的老年版本，同样也是单线程的，可以作为 CMS 垃圾回收器的备选预案。<br>3）<strong>ParNew</strong>：是 Serial 的多线程版本。<br>4）Parallel 和 ParNew 收集器类似是多线程的，但 Parallel 是吞吐量优先的收集器，可以牺牲等待时间换取系统的吞吐量。<br>5）Parallel Old 是 Parallel 老生代版本，Parallel 使用的是复制的内存回收算法，Parallel Old 使用的是标记-整理的内存回收算法。<br>6）CMS：一种以获得最短停顿时间为目标的收集器，非常适用 B/S 系统。<br>7）G1：一种兼顾吞吐量和停顿时间的 GC 实现，是 JDK 9 以后的默认 GC 选项。</p>
<h1 id="CMS-垃圾回收器"><a href="#CMS-垃圾回收器" class="headerlink" title="CMS 垃圾回收器"></a>CMS 垃圾回收器</h1><p>CMS 是英文 Concurrent Mark-Sweep 的简称，是以牺牲吞吐量为代价来获得最短回收停顿时间的垃圾回收器。对于要求服务器响应速度的应用上，这种垃圾回收器非常适合。在启动 JVM 的参数加上“-XX:+UseConcMarkSweepGC”来指定使用 CMS 垃圾回收器。<br>CMS 使用的是标记-清除的算法实现的，所以在 gc 的时候回产生大量的内存碎片，当剩余内存不能满足程序运行要求时，系统将会出现 Concurrent Mode Failure，临时 CMS 会采用 Serial Old 回收器进行垃圾清除，此时的性能将会被降低。</p>
<h1 id="新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？"><a href="#新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？" class="headerlink" title="新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？"></a>新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？</h1><p>新生代回收器：Serial、ParNew、Parallel Scavenge<br>老年代回收器：Serial Old、Parallel Old、CMS<br>整堆回收器：G1<br>新生代垃圾回收器一般采用的是复制算法，复制算法的优点是效率高，缺点是内存利用率低；老年代回收<br>器一般采用的是标记-整理的算法进行垃圾回收。</p>
<h1 id="简述分代垃圾回收器是怎么工作的？"><a href="#简述分代垃圾回收器是怎么工作的？" class="headerlink" title="简述分代垃圾回收器是怎么工作的？"></a>简述分代垃圾回收器是怎么工作的？</h1><p>分代回收器有两个分区：老生代和新生代，新生代默认的空间占比总空间的 1/3，老生代的默认占比是 2/3。新生代使用的是复制算法，新生代里有 3 个分区：Eden、To Survivor、From Survivor，它们的默认占比是 8:1:1，它的执行流程如下：<br>1）把 Eden + From Survivor 存活的对象放入 To Survivor 区；<br>2）清空 Eden 和 From Survivor 分区；<br>3）From Survivor 和 To Survivor 分区交换，From Survivor 变 To Survivor，To Survivor 变 FromSurvivor。<br>4）每次在 From Survivor 到 To Survivor 移动时都存活的对象，年龄就 +1，当年龄到达 15（默认配置是 15）时，升级为老生代。大对象也会直接进入老生代。<br>5）老生代当空间占用到达某个值之后就会触发全局垃圾收回，一般使用标记整理的执行算法。以上这些循环往复就构成了整个分代垃圾回收的整体执行流程。</p>
<h1 id="说一下-JVM-调优的工具？"><a href="#说一下-JVM-调优的工具？" class="headerlink" title="说一下 JVM 调优的工具？"></a>说一下 JVM 调优的工具？</h1><p>JDK 自带了很多监控工具，都位于 JDK 的 bin 目录下，其中最常用的是 <strong>jconsole</strong> 和 <strong>jvisualvm</strong> 这两款视图监控工具。<br><strong>jconsole</strong>：用于对 JVM 中的内存、线程和类等进行监控；<br><strong>jvisualvm：JDK</strong> 自带的全能分析工具，可以分析：内存快照、线程快照、程序死锁、监控内存的变化、gc 变化等。</p>
<h1 id="常用的-JVM-调优的参数都有哪些？"><a href="#常用的-JVM-调优的参数都有哪些？" class="headerlink" title="常用的 JVM 调优的参数都有哪些？"></a>常用的 JVM 调优的参数都有哪些？</h1><p>-Xms2g：初始化推大小为 2g；<br>-Xmx2g：堆最大内存为 2g；<br>-XX:NewRatio=4：设置年轻的和老年代的内存比例为 1:4；<br>-XX:SurvivorRatio=8：设置新生代 Eden 和 Survivor 比例为 8:2；<br>–XX:+UseParNewGC：指定使用 ParNew + Serial Old 垃圾回收器组合；<br>-XX:+UseParallelOldGC：指定使用 ParNew + ParNew Old 垃圾回收器组合；<br>-XX:+UseConcMarkSweepGC：指定使用 CMS + Serial Old 垃圾回收器组合；<br>-XX:+PrintGC：开启打印 gc 信息；<br>-XX:+PrintGCDetails：打印 gc 详细信息。</p>
]]></content>
  </entry>
  <entry>
    <title>算法</title>
    <url>/yq/%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>索引的使用和优化</title>
    <url>/yq/%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>参考链接</p>
]]></content>
  </entry>
  <entry>
    <title>线上问题排查案例</title>
    <url>/yq/%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<p>能在高压下迅速排查定位解决线上问题的程序员才是一个厉害的程序员。<br>路途远远~</p>
]]></content>
  </entry>
  <entry>
    <title>线程池</title>
    <url>/yq/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<p>推荐阅读：<a href="https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html">https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/22422342/1641298896168-b013ddab-2f7c-4d30-bda8-52f1b5c9c144.jpeg"></p>
<ul>
<li>corePoolSize：核心池的大小，这个参数跟后面讲述的线程池的实现原理有非常大的关系。在创建了线程池后，默认情况下，线程池中并没有任何线程，而是等待有任务到来才创建线程去执行任务，除非调用了 prestartAllCoreThreads()或者 prestartCoreThread()方法，从这 2 个方法的名字就可以看出，是预创建线程的意思，即在没有任务到来之前就创建 corePoolSize 个线程或者一个线程。默认情况下，在创建了线程池后，线程池中的线程数为 0，当有任务来之后，就会创建一个线程去执行任务，当线程池中的线程数目达到 corePoolSize 后，就会把到达的任务放到缓存队列当中；</li>
<li>maximumPoolSize：线程池最大线程数，这个参数也是一个非常重要的参数，它表示在线程池中最多能创建多少个线程；</li>
<li>keepAliveTime：表示线程没有任务执行时最多保持多久时间会终止。默认情况下，只有当线程池中的线程数大于 corePoolSize 时，keepAliveTime 才会起作用，直到线程池中的线程数不大于 corePoolSize，即当线程池中的线程数大于 corePoolSize 时，如果一个线程空闲的时间达到 keepAliveTime，则会终止，直到线程池中的线程数不超过 corePoolSize。但是如果调用了 allowCoreThreadTimeOut(boolean)方法，在线程池中的线程数不大于 corePoolSize 时，keepAliveTime 参数也会起作用，直到线程池中的线程数为 0；</li>
<li>unit：参数 keepAliveTime 的时间单位，有 7 种取值，在 TimeUnit 类中有 7 种静态属性：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TimeUnit.DAYS;               <span class="comment">//天</span></span><br><span class="line">TimeUnit.HOURS;             <span class="comment">//小时</span></span><br><span class="line">TimeUnit.MINUTES;           <span class="comment">//分钟</span></span><br><span class="line">TimeUnit.SECONDS;           <span class="comment">//秒</span></span><br><span class="line">TimeUnit.MILLISECONDS;      <span class="comment">//毫秒</span></span><br><span class="line">TimeUnit.MICROSECONDS;      <span class="comment">//微妙</span></span><br><span class="line">TimeUnit.NANOSECONDS;       <span class="comment">//纳秒</span></span><br></pre></td></tr></table></figure>

<ul>
<li>workQueue：一个阻塞队列，用来存储等待执行的任务，这个参数的选择也很重要，会对线程池的运行过程产生重大影响，一般来说，这里的阻塞队列有以下几种选择：ArrayBlockingQueue; LinkedBlockingQueue; SynchronousQueue;ArrayBlockingQueue 和 PriorityBlockingQueue 使用较少，一般使用 LinkedBlockingQueue 和 Synchronous。线程池的排队策略与 BlockingQueue 有关。</li>
<li>threadFactory：线程工厂，主要用来创建线程；</li>
<li>handler：表示当拒绝处理任务时的策略，有以下四种取值:</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">ThreadPoolExecutor.AbortPolicy</span>:<span class="string">丢弃任务并抛出RejectedExecutionException异常。</span></span><br><span class="line"><span class="attr">ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。</span></span><br><span class="line"><span class="attr">ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</span></span><br><span class="line"><span class="attr">ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务</span></span><br></pre></td></tr></table></figure>

<p><strong>通俗理解参数</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">每个变量的作用都已经标明出来了，这里要重点解释一下corePoolSize、maximumPoolSize、largestPoolSize三个变量。</span></span><br><span class="line"></span><br><span class="line"><span class="string">corePoolSize在很多地方被翻译成核心池大小，其实我的理解这个就是线程池的大小。举个简单的例子：</span></span><br><span class="line"></span><br><span class="line"><span class="string">假如有一个工厂，工厂里面有10个工人，每个工人同时只能做一件任务。</span></span><br><span class="line"></span><br><span class="line"><span class="string">因此只要当10个工人中有工人是空闲的，来了任务就分配给空闲的工人做；</span></span><br><span class="line"></span><br><span class="line"><span class="string">当10个工人都有任务在做时，如果还来了任务，就把任务进行排队等待；</span></span><br><span class="line"></span><br><span class="line"><span class="string">如果说新任务数目增长的速度远远大于工人做任务的速度，那么此时工厂主管可能会想补救措施，比如重新招4个临时工人进来；</span></span><br><span class="line"></span><br><span class="line"><span class="string">然后就将任务也分配给这4个临时工人做；</span></span><br><span class="line"></span><br><span class="line"><span class="string">如果说着14个工人做任务的速度还是不够，此时工厂主管可能就要考虑不再接收新的任务或者抛弃前面的一些任务了。</span></span><br><span class="line"></span><br><span class="line"><span class="string">当这14个工人当中有人空闲时，而新任务增长的速度又比较缓慢，工厂主管可能就考虑辞掉4个临时工了，只保持原来的10个工人，毕竟请额外的工人是要花钱的。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">这个例子中的corePoolSize就是10，而maximumPoolSize就是14（10+4）。</span></span><br><span class="line"></span><br><span class="line"><span class="string">也就是说corePoolSize就是线程池大小，maximumPoolSize在我看来是线程池的一种补救措施，即任务量突然过大时的一种补救措施。</span></span><br><span class="line"></span><br><span class="line"><span class="string">不过为了方便理解，在本文后面还是将corePoolSize翻译成核心池大小。</span></span><br><span class="line"></span><br><span class="line"><span class="string">largestPoolSize只是一个用来起记录作用的变量，用来记录线程池中曾经有过的最大线程数目，跟线程池的容量没有任何关系。</span></span><br></pre></td></tr></table></figure>

<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1641299493625-f2b11349-c968-494d-b614-dc85761d9d9a.png#clientId=ube887dfc-7659-4&from=paste&height=288&id=ub9990a73&name=image.png&originHeight=373&originWidth=389&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=14930&status=done&style=none&taskId=u579c33e2-983d-4c8b-8666-11aef37c66f&title=&width=300" alt="image.png"></p>
<h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><p>下面我们进入正题，看一下任务从提交到最终执行完毕经历了哪些过程。<br>在 ThreadPoolExecutor 类中，最核心的任务提交方法是 execute()方法，虽然通过 submit 也可以提交任务，但是实际上 submit 方法里面最终调用的还是 execute()方法，所以我们只需要研究 execute()方法的实现原理即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (command == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">if</span> (poolSize &gt;= corePoolSize || !addIfUnderCorePoolSize(command)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (runState == RUNNING &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (runState != RUNNING || poolSize == <span class="number">0</span>)</span><br><span class="line">                ensureQueuedTaskHandled(command);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!addIfUnderMaximumPoolSize(command))</span><br><span class="line">            reject(command); <span class="comment">// is shutdown or saturated</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>经典排序算法</title>
    <url>/yq/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.冒泡排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr==<span class="keyword">null</span>||arr.length&lt;<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ;j&lt;arr.length-i-<span class="number">1</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">int</span> temp=arr[j];</span><br><span class="line">                arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>线程生命周期和状态</title>
    <url>/yq/%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E7%8A%B6%E6%80%81/</url>
    <content><![CDATA[<h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1656633831821-08b9991f-7122-4ace-a1a4-7b9d0e5d0e9f.png#clientId=u99436fbe-dddb-4&from=paste&id=u66dc22f0&originHeight=647&originWidth=987&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&taskId=u03cc5ebf-df2a-4cd2-bf02-4a095249c76&title="></p>
<h1 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1656633843467-2e4f7a75-79a7-43bc-a209-07fc68a1231a.png#clientId=u99436fbe-dddb-4&from=paste&id=u4499e5b5&originHeight=216&originWidth=805&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&taskId=ub2fddd14-6786-403d-9bf3-97a7fc2fae6&title="></p>
]]></content>
  </entry>
  <entry>
    <title>缓存穿透、击穿、雪崩</title>
    <url>/yq/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E5%87%BB%E7%A9%BF%E3%80%81%E9%9B%AA%E5%B4%A9/</url>
    <content><![CDATA[<p>参考链接：<a href="https://blog.csdn.net/lzy194/article/details/122231010">https://blog.csdn.net/lzy194/article/details/122231010</a></p>
<h1 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h1><p>用户请求的值在缓存中不存在，在数据库中也不存在！<br>带来的问题：每次请求都会去请求数据库，缓存形同虚设，请求量大的时候会给数据库带来巨大压力甚至直接整挂掉。</p>
<h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>1、参数校验：如果对于请求的参数有制定的一套规范，请求到来时校验参数是否符合规范，不符合直接打回，不走数据库；<br>2、数据量少时，可以把数据库的所有数据直接放在缓存中，比如以 map 集合形式存放；<br>3、数据量大时，使用布隆过滤器<br>4、缓存空值，数据库查询不到值时，将该请求参数和其返回的空值放入缓存，下次请求直接从缓存读取空值。</p>
<h1 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h1><p>一个热点数据过期时间失效，大量的请求直接访问数据库造成数据库压力!</p>
<h2 id="解决方案：-1"><a href="#解决方案：-1" class="headerlink" title="解决方案："></a>解决方案：</h2><p>1、加锁，对热点数据请求数据库时加锁，查询成功后写入缓存；<br>2、定时任务自动续期；<br>3、设置缓存无过期时间</p>
<h1 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h1><p>缓存击穿的升级版，多个热点数据到了过期时间。</p>
<h2 id="缓存雪崩目前有两种："><a href="#缓存雪崩目前有两种：" class="headerlink" title="缓存雪崩目前有两种："></a>缓存雪崩目前有两种：</h2><p>1、有大量的热门缓存，同时失效。会导致大量的请求，访问数据库。而数据库很有可能因为扛不住压力，而直接挂掉。<br>2、缓存服务器 down 机了，可能是机器硬件问题，或者机房网络问题。总之，造成了整个缓存的不可用。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>1、热点 key 过期时间加随机时间，避免所有热点 key 同时失效<br>2、高可用架构；升级机器<br>3、降级<br>配置一些默认的兜底数据。<br>程序中有个全局开关，比如有 10 个请求在最近一分钟内，从 redis 中获取数据失败，则全局开关打开。后面的新请求，就直接从配置中心中获取默认的数据。</p>
<p><a href="https://blog.csdn.net/lzy194/article/details/122231010">
</a></p>
]]></content>
  </entry>
  <entry>
    <title>结构思考力 阅读</title>
    <url>/yq/%E7%BB%93%E6%9E%84%E6%80%9D%E8%80%83%E5%8A%9B%20%E9%98%85%E8%AF%BB/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>概述结构化思考力的重要性。</p>
<ul>
<li>没有要点、杂乱无章的口头表达和文字表达往往对对方没有说服力，甚至降低整个组织的工作效率。</li>
<li>如果没有结构，我们的思维就很容易从一点漂到另一点，却总也无法得出一个有效结论，没有结构，事情就会变得非常复杂，让人瞻前顾后、犹豫不决。</li>
<li>结构思考力可以帮助我们构化一个结构，在表达核心观点的基础上，有理有据、条例分明地证明这个观点，使我们能够做到清晰思考和有力表达。</li>
</ul>
<h1 id="第一节-Why——结构思考力的作用非凡"><a href="#第一节-Why——结构思考力的作用非凡" class="headerlink" title="第一节 Why——结构思考力的作用非凡"></a>第一节 Why——结构思考力的作用非凡</h1><h2 id="所有人都需要具备的核心技能"><a href="#所有人都需要具备的核心技能" class="headerlink" title="所有人都需要具备的核心技能"></a>所有人都需要具备的核心技能</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1643976189521-6f14d7b0-f397-4d7a-a94d-472a6dfad174.png#clientId=u369a14ef-f835-4&from=paste&height=445&id=u1eed16c9&name=image.png&originHeight=445&originWidth=641&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=143996&status=done&style=none&taskId=u58682bf8-67ab-4237-8184-f3389956a3f&title=&width=641" alt="image.png"></p>
<ul>
<li>结构思考力是开展所有工作的基础</li>
<li>很多专业岗位对于结构思考力有更高的要求</li>
<li>所以管理者必备的管理技能</li>
<li>助力职业发展的重要保障</li>
</ul>
<p><strong>结构思考力一种先总后分的思考与表达方式，强调先框架后细节，先总结后具体，先结论后原因，先重要后次要。</strong></p>
]]></content>
  </entry>
  <entry>
    <title>网络原理</title>
    <url>/yq/%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>自动化配置</title>
    <url>/yq/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>若依项目学习</title>
    <url>/yq/%E8%8B%A5%E4%BE%9D%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>地址：<a href="https://gitee.com/y_project/RuoYi?_from=gitee_search#https://gitee.com/link?target=http%3A%2F%2Fruoyi.vip">https://gitee.com/y_project/RuoYi?_from=gitee_search#https://gitee.com/link?target=http%3A%2F%2Fruoyi.vip</a></p>
]]></content>
  </entry>
  <entry>
    <title>自动装配原理</title>
    <url>/yq/%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h1><p>Spring Boot 通过@EnableAutoConfiguration 开启自动装配，通过 SpringFactoriesLoader 最终加载 META-INF/spring.factories 中的自动配置类实现自动装配，自动配置类其实就是通过@Conditional 按需加载的配置类，想要其生效必须引入 spring-boot-starter-xxx 包实现起步依赖。<br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/22422342/1657071556293-793ff5c5-73b5-4c77-8fe1-1e3f9dd376d1.jpeg"></p>
]]></content>
  </entry>
  <entry>
    <title>装箱与拆箱</title>
    <url>/yq/%E8%A3%85%E7%AE%B1%E4%B8%8E%E6%8B%86%E7%AE%B1/</url>
    <content><![CDATA[<p><strong>装箱</strong>：将基本类型用它们对应的引用类型包装起来；<br><strong>拆箱</strong>：将包装类型转换为基本数据类型；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i = <span class="number">10</span>;  <span class="comment">//装箱</span></span><br><span class="line"><span class="keyword">int</span> n = i;   <span class="comment">//拆箱</span></span><br></pre></td></tr></table></figure>

<p>上面这两行代码对应的字节码为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">L1</span><br><span class="line"></span><br><span class="line">    LINENUMBER <span class="number">8</span> L1</span><br><span class="line"></span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    BIPUSH <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;</span><br><span class="line"></span><br><span class="line">    PUTFIELD AutoBoxTest.i : Ljava/lang/Integer;</span><br><span class="line"></span><br><span class="line">L2</span><br><span class="line"></span><br><span class="line">    LINENUMBER <span class="number">9</span> L2</span><br><span class="line"></span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    GETFIELD AutoBoxTest.i : Ljava/lang/Integer;</span><br><span class="line"></span><br><span class="line">    INVOKEVIRTUAL java/lang/Integer.intValue ()I</span><br><span class="line"></span><br><span class="line">    PUTFIELD AutoBoxTest.n : I</span><br><span class="line"></span><br><span class="line">    RETURN</span><br></pre></td></tr></table></figure>

<p>从字节码中，我们发现装箱其实就是调用了 包装类的 valueOf()方法，拆箱其实就是调用了 xxxValue()方法。因此</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i = <span class="number">10</span> 等价于 Integer i = Integer.valueOf(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">int</span> n = i 等价于 <span class="keyword">int</span> n = i.intValue();</span><br></pre></td></tr></table></figure>

<p><strong>注意 1</strong>：<strong>如果频繁拆装箱的话，也会严重影响系统的性能。我们应该尽量避免不必要的拆装箱操作。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">sum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 应该使用 long 而不是 Long,避免拆箱浪费性能</span></span><br><span class="line">    Long sum = <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt;= Integer.MAX_VALUE; i++)</span><br><span class="line">        sum += i;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意 2：拆箱时需要注意是否会报空指针错误</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i1 = <span class="keyword">null</span>;</span><br><span class="line">System.out.println(i1.intValue());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exception in thread &quot;main&quot; java.lang.NullPointerException</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>解决无法下载某些jar包源码问题</title>
    <url>/yq/%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E4%B8%8B%E8%BD%BD%E6%9F%90%E4%BA%9Bjar%E5%8C%85%E6%BA%90%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在公司，有时候 maven 的 setting.xml 没有配置相应的镜像或者配置出错了，会导致无法拉取外部 jar 包的源码，所以一般我们会在自己配置文件上加入阿里的镜像，这样很多 jar 包源码都可以拉取到。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>解决 Hexo d 突然报错问题</title>
    <url>/yq/%E8%A7%A3%E5%86%B3%20Hexo%20d%20%E7%AA%81%E7%84%B6%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>时隔四五个月，今天往 hexo 推了篇文章，结果走到 hexo d 时竟然报错了</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">fatal: unable to access &#x27;https://github.com/【******】/【*****】.github.io.git/&#x27;: OpenSSL SSL_read: SSL_ERROR_SYSCALL, errno 10054</span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (D:\hexo\blog\node_modules\_hexo-util@1.9.1@hexo-util\lib\spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (events.js:314:20)</span><br><span class="line">      at ChildProcess.cp.emit (D:\hexo\blog\node_modules\_cross-spawn@7.0.3@cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:275:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后网上查了好长时间，原因貌似是 2021 年 8 月 13 日 github 不再支持密码验证，而使用了 token，然后解决上述问题的具体步骤是：<br>1、登录 github 申请 token，点击个人头像进入 setting<img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1641224073369-1233fd3c-686a-4c0d-8f87-bbb205e696fe.png#clientId=u97f84e88-26d0-4&from=paste&height=279&id=u6ed292ab&name=image.png&originHeight=558&originWidth=379&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=30320&status=done&style=none&taskId=u6ee4cf62-7b3f-4974-bfd1-b04c61c06a4&title=&width=189.5" alt="image.png"></p>
<p>2、接着找到 Developer settings<img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1641224156047-95eb515e-f9ce-4089-85a2-5076bedca6dd.png#clientId=u97f84e88-26d0-4&from=paste&height=130&id=u298cbdae&name=image.png&originHeight=260&originWidth=616&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=17894&status=done&style=none&taskId=u79f6cc45-84ee-4506-b62f-3e26dd5ac45&title=&width=308" alt="image.png"></p>
<p>3、然后进入 personnel access tokens 中<img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1641224217280-f3b1a251-ce60-4a1d-979c-74b048d08b21.png#clientId=u97f84e88-26d0-4&from=paste&height=137&id=u0a519b83&name=image.png&originHeight=274&originWidth=906&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=24254&status=done&style=none&taskId=u9748114c-4496-4ee6-95ff-f253017d9b3&title=&width=453" alt="image.png"></p>
<p>4、点击 <img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1641224272356-a5cf096b-06b2-4bc5-9f18-58c319fe3e3b.png#clientId=u97f84e88-26d0-4&from=paste&height=158&id=u1b3c13cb&name=image.png&originHeight=315&originWidth=1103&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=35887&status=done&style=none&taskId=u8c362965-83ac-47ab-9a2c-f21ec7309f4&title=&width=551.5" alt="image.png"></p>
<p>5、<img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1641224446774-65348c7e-74dc-4894-ba42-13110c699875.png#clientId=u97f84e88-26d0-4&from=paste&height=432&id=ue5ac1c99&name=image.png&originHeight=864&originWidth=1174&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=112778&status=done&style=none&taskId=u77ecc260-a2e6-439b-a146-c42d0b3ff92&title=&width=587" alt="image.png"></p>
<p>6、接着打开你个人 hexo 里面的这个配置文件<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1641224525404-feb7b7cf-e18c-4108-9b30-db8488ca1910.png#clientId=u97f84e88-26d0-4&from=paste&height=217&id=u00e89bb8&name=image.png&originHeight=434&originWidth=884&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=45936&status=done&style=none&taskId=u2feaa096-b980-4831-bd66-30bbb93d024&title=&width=442" alt="image.png"><br>7、把 deploy 里的 repo 地址改成这个格式（这样做不知道安不安全？）<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1641224826677-e58a78e3-1bb7-419e-ab49-d33471ebbd06.png#clientId=u97f84e88-26d0-4&from=paste&height=68&id=u5dcfbdfd&name=image.png&originHeight=136&originWidth=1256&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=22540&status=done&style=none&taskId=uf9c27b49-bdc6-49be-a94f-0e03d5652d8&title=&width=628" alt="image.png"></p>
<p>8、然后重新<br>hexo clean<br>hexo g<br>hexo d<br>应该就能解决问题了</p>
]]></content>
  </entry>
  <entry>
    <title>边界问题</title>
    <url>/yq/%E8%BE%B9%E7%95%8C%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>1、添加人员进来</p>
<p>2、入职日期选择 2022-01-01 00:00:00</p>
<p>3、合同期限选择 1 年-&gt;合同结束日联动变为 2023-01-01 00:00:00</p>
<p>4、续签时，新的合同开始日会从 2023-01-02 00:00:00 开始，这样一来就会与上一份合同的结束日 2023-01-01 00:00:00 差了 24 小时，会存在法规风险。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>1、添加人员进来</p>
<p>2、入职日期选择 2022-01-01 00:00:00</p>
<p>3、合同期限选择 1 年-&gt;合同结束日联动变为 2022-12-31 23:59:59</p>
<p>4、续签时，新的合同开始日会从 2023-01-01 00:00:00 开始，这样一来时间就连续上了，不会存在法规风险了。</p>
<h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p><strong>以后对于结束日的字段需要考虑时分秒置为 23:59:59.</strong></p>
]]></content>
  </entry>
  <entry>
    <title>运维</title>
    <url>/yq/%E8%BF%90%E7%BB%B4/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>辅助工具</title>
    <url>/yq/%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>限流</title>
    <url>/yq/%E9%99%90%E6%B5%81/</url>
    <content><![CDATA[<p>转自：</p>
<p><a href="https://juejin.cn/post/6844904161604009997">人人都能看懂的 6 种限流实现方案！(纯干货) - 掘金</a><br><a href="https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==%E2%88%A3=2247490393&idx=1&sn=98189caa486406f8fa94d84ba0667604&chksm=cf21c470f8564d665ce04ccb9dc7502633246da87a0541b07ba4ac99423b28ce544cdd6c036b&mpshare=1&scene=1&srcid=0621Avaq0iV2s9Lerg3VwtKT&sharer_sharetime=1655774473518&sharer_shareid=2536e8014e43f2284d7ea28e8a3c3f3e&version=4.0.2.90460&platform=mac#rd">面试必备：4 种经典限流算法讲解</a></p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>计算机网络中，限流就是通过一些手段去限制发送或者接收请求的速率，可以防止 DOS 攻击和限制 web 爬虫。<br>在我们的系统中，限流是避免因高并发、大流量请求拖垮系统，导致系统崩溃的一种手段。<br>eg：景区限流、疫情商场限流</p>
<h1 id="时间窗口算法"><a href="#时间窗口算法" class="headerlink" title="时间窗口算法"></a>时间窗口算法</h1><p>单位时间内允许的最大请求量。</p>
<h2 id="固定窗口限流算法"><a href="#固定窗口限流算法" class="headerlink" title="固定窗口限流算法"></a>固定窗口限流算法</h2><p>首先维护一个计数器，将单位时间段当做一个窗口，计数器记录这个窗口接收请求的次数。</p>
<ul>
<li>当次数少于限流阀值，就允许访问，并且计数器+1</li>
<li>当次数大于限流阀值，就拒绝访问。</li>
<li>当前的时间窗口过去之后，计数器清零。</li>
</ul>
<p>假设单位时间是 1 秒，限流阀值为 3。在单位时间 1 秒内，每来一个请求,计数器就加 1，如果计数器累加的次数超过限流阀值 3，后续的请求全部拒绝。等到 1s 结束后，计数器清 0，重新开始计数。如下图：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1657092846675-ef9f8387-5155-4b5b-a5d5-5c53b89c1d44.png#clientId=u62c14b1a-9342-4&from=paste&height=277&id=ufdde3a04&name=image.png&originHeight=554&originWidth=1080&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=99372&status=done&style=none&taskId=ua2f224ad-4973-4e62-99b1-b808d7f28c5&title=&width=540" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 固定窗口时间算法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">fixedWindowsTryAcquire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> currentTime = System.currentTimeMillis();  <span class="comment">//获取系统当前时间</span></span><br><span class="line">        <span class="keyword">if</span> (currentTime - lastRequestTime &gt; windowUnit) &#123;  <span class="comment">//检查是否在时间窗口内</span></span><br><span class="line">            counter = <span class="number">0</span>;  <span class="comment">// 计数器清0</span></span><br><span class="line">            lastRequestTime = currentTime;  <span class="comment">//开启新的时间窗口</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (counter &lt; threshold) &#123;  <span class="comment">// 小于阀值</span></span><br><span class="line">            counter++;  <span class="comment">//计数器加1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>但是，这种算法有一个很明显的<strong>临界问题</strong>：假设限流阀值为 5 个请求，单位时间窗口是 1s,如果我们在单位时间内的前 0.8-1s 和 1-1.2s，分别并发 5 个请求。虽然都没有超过阀值，但是如果算 0.8-1.2s,则并发数高达 10，已经<strong>超过单位时间 1s 不超过 5 阀值</strong>的定义啦。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1657092913013-ffed70e3-8aa1-430b-af64-027274c7659f.png#clientId=u62c14b1a-9342-4&from=paste&height=219&id=u7baa97d1&name=image.png&originHeight=437&originWidth=1080&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=69184&status=done&style=none&taskId=uf6385153-b8a6-401c-b4ea-f40597a052d&title=&width=540" alt="image.png"></p>
<h2 id="滑动窗口限流算法"><a href="#滑动窗口限流算法" class="headerlink" title="滑动窗口限流算法"></a>滑动窗口限流算法</h2><p>滑动窗口限流解决固定窗口临界值的问题。它将单位时间周期分为 n 个小周期，分别记录每个小周期内接口的访问次数，并且根据时间滑动删除过期的小周期。<br>一张图解释滑动窗口算法，如下：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1657092937972-da0f65ae-c1a6-4d09-957c-bf74638860fd.png#clientId=u62c14b1a-9342-4&from=paste&height=325&id=u3237c82d&name=image.png&originHeight=649&originWidth=1080&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=59848&status=done&style=none&taskId=u66bee795-b36b-466f-b7a8-fbaa56f6d9a&title=&width=540" alt="image.png"><br>假设单位时间还是 1s，滑动窗口算法把它划分为 5 个小周期，也就是滑动窗口（单位时间）被划分为 5 个小格子。每格表示 0.2s。每过 0.2s，时间窗口就会往右滑动一格。然后呢，每个小周期，都有自己独立的计数器，如果请求是 0.83s 到达的，0.8<del>1.0s 对应的计数器就会加 1。<br>我们来看下滑动窗口是如何解决临界问题的？<br>假设我们 1s 内的限流阀值还是 5 个请求，0.8</del>1.0s 内（比如 0.9s 的时候）来了 5 个请求，落在黄色格子里。时间过了 1.0s 这个点之后，又来 5 个请求，落在紫色格子里。如果<strong>是固定窗口算法，是不会被限流的</strong>，但是<strong>滑动窗口的话，每过一个小周期，它会右移一个小格</strong>。过了 1.0s 这个点后，会右移一小格，当前的单位时间段是 0.2~1.2s，这个区域的请求已经超过限定的 5 了，已触发限流啦，实际上，紫色格子的请求都被拒绝啦。<br><strong>TIPS:</strong> 当滑动窗口的格子周期划分的越多，那么滑动窗口的滚动就越平滑，限流的统计就会越精确。<br>滑动窗口算法<strong>伪代码实现</strong>如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">    **</span><br><span class="line">     * 单位时间划分的小周期（单位时间是<span class="number">1</span>分钟，<span class="number">10</span>s一个小格子窗口，一共<span class="number">6</span>个格子）</span><br><span class="line">     */</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> SUB_CYCLE = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每分钟限流请求数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> thresholdPerMin = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计数器, k-为当前窗口的开始时间值秒，value为当前窗口的计数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TreeMap&lt;Long, Integer&gt; counters = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 滑动窗口时间算法实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">slidingWindowsTryAcquire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> currentWindowTime = LocalDateTime.now().toEpochSecond(ZoneOffset.UTC) / SUB_CYCLE * SUB_CYCLE; <span class="comment">//获取当前时间在哪个小周期窗口</span></span><br><span class="line">        <span class="keyword">int</span> currentWindowNum = countCurrentWindow(currentWindowTime); <span class="comment">//当前窗口总请求数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//超过阀值限流</span></span><br><span class="line">        <span class="keyword">if</span> (currentWindowNum &gt;= thresholdPerMin) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计数器+1</span></span><br><span class="line">        counters.get(currentWindowTime)++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 统计当前窗口的请求数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">countCurrentWindow</span><span class="params">(<span class="keyword">long</span> currentWindowTime)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//计算窗口开始位置</span></span><br><span class="line">        <span class="keyword">long</span> startTime = currentWindowTime - SUB_CYCLE* (<span class="number">60</span>s/SUB_CYCLE-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历存储的计数器</span></span><br><span class="line">        Iterator&lt;Map.Entry&lt;Long, Integer&gt;&gt; iterator = counters.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;Long, Integer&gt; entry = iterator.next();</span><br><span class="line">            <span class="comment">// 删除无效过期的子窗口计数器</span></span><br><span class="line">            <span class="keyword">if</span> (entry.getKey() &lt; startTime) &#123;</span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//累加当前窗口的所有计数器之和</span></span><br><span class="line">                count =count + entry.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>滑动窗口算法虽然解决了<strong>固定窗口的临界问题</strong>，但是一旦到达限流后，请求都会直接暴力被拒绝。酱紫我们会损失一部分请求，这其实对于产品来说，并不太友好。</p>
<h1 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a>漏桶算法</h1><p>漏桶算法类似于生活中的漏斗，无论上面的水流倒入漏斗有多大，也就是无论请求有多少，它都是以均匀的速度慢慢流出的。当上面的水流速度大于下面的流出速度时，漏斗会慢慢变满，当漏斗满了之后就会丢弃新来的请求;当上面的水流速度小于下面流出的速度的话，漏斗永远不会被装满，并且可以一直流出。<br>漏桶算法的实现步骤是，先声明一个队列用来保存请求，这个队列相当于漏斗，当队列容量满了之后就放弃新来的请求，然后重新声明一个线程定期从任务队列中获取一个或多个任务进行执行，这样就实现了漏桶算法。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1657091230526-bdd83066-3f3b-43a9-a299-b02bb20ddde4.png#clientId=u62c14b1a-9342-4&from=paste&height=306&id=ud930c8cd&name=image.png&originHeight=612&originWidth=458&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=57061&status=done&style=none&taskId=ue8f90fd2-c640-4031-96bd-bd6bca234c3&title=&width=229" alt="image.png"></p>
<h1 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h1><p>在令牌桶算法中有一个程序以某种恒定的速度生成令牌，并存入令牌桶中，而每个请求需要先获取令牌才能执行，如果没有获取到令牌的请求可以选择等待或者放弃执行，如下图所示：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1657091240891-1ecc85db-ca9e-47f6-8ca0-dea3d1b7ac27.png#clientId=u62c14b1a-9342-4&from=paste&height=499&id=u7b711ab7&name=image.png&originHeight=998&originWidth=798&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=99557&status=done&style=none&taskId=u589400d7-3b4a-4036-a347-043340e8dd6&title=&width=399" alt="image.png"><br>我们可以使用 Google 开源的 guava 包，很方便的实现令牌桶算法，首先在 pom.xml 添加 guava 引用，配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>28.2-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mport com.google.common.util.concurrent.RateLimiter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Guava 实现限流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimiterExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 每秒产生 10 个令牌（每 100 ms 产生一个）</span></span><br><span class="line">        RateLimiter rt = RateLimiter.create(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="comment">// 获取 1 个令牌</span></span><br><span class="line">                rt.acquire();</span><br><span class="line">                System.out.println(<span class="string">&quot;正常执行方法，ts:&quot;</span> + Instant.now());</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">正常执行方法，ts:<span class="number">2020</span>-<span class="number">05</span>-<span class="number">15</span>T14:<span class="number">46</span>:<span class="number">37.175</span>Z</span><br><span class="line">正常执行方法，ts:<span class="number">2020</span>-<span class="number">05</span>-<span class="number">15</span>T14:<span class="number">46</span>:<span class="number">37.237</span>Z</span><br><span class="line">正常执行方法，ts:<span class="number">2020</span>-<span class="number">05</span>-<span class="number">15</span>T14:<span class="number">46</span>:<span class="number">37.339</span>Z</span><br><span class="line">正常执行方法，ts:<span class="number">2020</span>-<span class="number">05</span>-<span class="number">15</span>T14:<span class="number">46</span>:<span class="number">37.442</span>Z</span><br><span class="line">正常执行方法，ts:<span class="number">2020</span>-<span class="number">05</span>-<span class="number">15</span>T14:<span class="number">46</span>:<span class="number">37.542</span>Z</span><br><span class="line">正常执行方法，ts:<span class="number">2020</span>-<span class="number">05</span>-<span class="number">15</span>T14:<span class="number">46</span>:<span class="number">37.640</span>Z</span><br><span class="line">正常执行方法，ts:<span class="number">2020</span>-<span class="number">05</span>-<span class="number">15</span>T14:<span class="number">46</span>:<span class="number">37.741</span>Z</span><br><span class="line">正常执行方法，ts:<span class="number">2020</span>-<span class="number">05</span>-<span class="number">15</span>T14:<span class="number">46</span>:<span class="number">37.840</span>Z</span><br><span class="line">正常执行方法，ts:<span class="number">2020</span>-<span class="number">05</span>-<span class="number">15</span>T14:<span class="number">46</span>:<span class="number">37.942</span>Z</span><br><span class="line">正常执行方法，ts:<span class="number">2020</span>-<span class="number">05</span>-<span class="number">15</span>T14:<span class="number">46</span>:<span class="number">38.042</span>Z</span><br><span class="line">正常执行方法，ts:<span class="number">2020</span>-<span class="number">05</span>-<span class="number">15</span>T14:<span class="number">46</span>:<span class="number">38.142</span>Z</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>从以上结果可以看出令牌确实是每 100ms 产生一个，而 acquire() 方法为阻塞等待获取令牌，它可以传递一个 int 类型的参数，用于指定获取令牌的个数。它的替代方法还有 tryAcquire()，此方法在没有可用令牌时就会返回 false 这样就不会阻塞等待了。当然 tryAcquire() 方法也可以设置超时时间，未超过最大等待时间会阻塞等待获取令牌，如果超过了最大等待时间，还没有可用的令牌就会返回 false。<br>注意：使用 guava 实现的令牌算法属于程序级别的单机限流方案，而上面使用 Redis-Cell 的是分布式的限流方案。</p>
]]></content>
  </entry>
  <entry>
    <title>阿里云消息服务MNS-JAVA SDK</title>
    <url>/yq/%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%9C%8D%E5%8A%A1MNS-JAVA%20SDK/</url>
    <content><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ol>
<li><p>下载最新版 Java SDK，解压到 aliyun-sdk-mns-samples 文件夹。</p>
</li>
<li><p>用 Eclipse 导入 Maven 工程，选中 aliyun-sdk-mns-samples 文件夹。</p>
<p>3.在用户目录中创建.aliyun-mns.properties 文件，并填写服务地址、AccessKeyId 和 AccessKeySecret</p>
</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">mns.accountendpoint</span>=<span class="string">http://&lt;yourAccountId&gt;.mns.cn-hangzhou.aliyuncs.com</span></span><br><span class="line"><span class="meta">mns.accesskeyid</span>=<span class="string">&lt;yourAccessKeyId&gt;</span></span><br><span class="line"><span class="meta">mns.accesskeysecret</span>=<span class="string">&lt;yourAccessKeySecret&gt;</span></span><br></pre></td></tr></table></figure>

<p>4.Maven 依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.mns<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-mns<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="主题使用手册"><a href="#主题使用手册" class="headerlink" title="主题使用手册"></a>主题使用手册</h1><h2 id="创建主题"><a href="#创建主题" class="headerlink" title="创建主题"></a>创建主题</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateTopicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CloudAccount account = <span class="keyword">new</span> CloudAccount(<span class="string">&quot;YourAccessId&quot;</span>, <span class="string">&quot;YourAccessKey&quot;</span>, <span class="string">&quot;MNSEndpoint&quot;</span>);</span><br><span class="line">        MNSClient client = account.getMNSClient(); <span class="comment">// 在程序中，CloudAccount以及MNSClient单例实现即可，多线程安全。</span></span><br><span class="line"></span><br><span class="line">        String topicName = <span class="string">&quot;TestTopic&quot;</span>;</span><br><span class="line">        TopicMeta meta = <span class="keyword">new</span> TopicMeta();</span><br><span class="line">        meta.setTopicName(topicName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            CloudTopic topic = client.createTopic(meta);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;create topic error, &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建队列"><a href="#创建队列" class="headerlink" title="创建队列"></a>创建队列</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateQueueDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CloudAccount account = <span class="keyword">new</span> CloudAccount(</span><br><span class="line">                ServiceSettings.getMNSAccessKeyId(),</span><br><span class="line">                ServiceSettings.getMNSAccessKeySecret(),</span><br><span class="line">                ServiceSettings.getMNSAccountEndpoint());</span><br><span class="line">        MNSClient client = account.getMNSClient();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            QueueMeta qMeta = <span class="keyword">new</span> QueueMeta();</span><br><span class="line">            qMeta.setQueueName(<span class="string">&quot;queue-demo&quot;</span>);</span><br><span class="line">            qMeta.setPollingWaitSeconds(<span class="number">30</span>);</span><br><span class="line">            CloudQueue cQueue = client.createQueue(qMeta);</span><br><span class="line">            System.out.println(<span class="string">&quot;Create queue successfully. URL: &quot;</span> + cQueue.getQueueURL());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientException ce)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Something wrong with the network connection between client and MNS service.&quot;</span></span><br><span class="line">                    + <span class="string">&quot;Please check your network and DNS availablity.&quot;</span>);</span><br><span class="line">            ce.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServiceException se)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (se.getErrorCode().equals(<span class="string">&quot;QueueNotExist&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Queue is not exist.Please create before use&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (se.getErrorCode().equals(<span class="string">&quot;TimeExpired&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;The request is time expired. Please check your local machine timeclock&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            se.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Unknown exception happened!&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建订阅"><a href="#创建订阅" class="headerlink" title="创建订阅"></a>创建订阅</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubscribeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String region = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        String accountId = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        String queueName = <span class="string">&quot;TestQueue&quot;</span>;</span><br><span class="line">        CloudAccount account = <span class="keyword">new</span> CloudAccount(<span class="string">&quot;YourAccessId&quot;</span>, <span class="string">&quot;YourAccessKey&quot;</span>, <span class="string">&quot;MNSEndpoint&quot;</span>);</span><br><span class="line">        MNSClient client = account.getMNSClient(); <span class="comment">// 在程序中，CloudAccount以及MNSClient单例实现即可，多线程安全。</span></span><br><span class="line"></span><br><span class="line">        CloudTopic topic = client.getTopicRef(<span class="string">&quot;TestTopic&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SubscriptionMeta subMeta = <span class="keyword">new</span> SubscriptionMeta();</span><br><span class="line">            subMeta.setSubscriptionName(<span class="string">&quot;QueueEndpoint2&quot;</span>);</span><br><span class="line">            subMeta.setEndpoint(String.format(<span class="string">&quot;acs:mns:%s:%s:queues/%s&quot;</span>, region, accountId, queueName));</span><br><span class="line">            subMeta.setNotifyContentFormat(SubscriptionMeta.NotifyContentFormat.XML);</span><br><span class="line">            String subUrl = topic.subscribe(subMeta);</span><br><span class="line">            System.out.println(<span class="string">&quot;subscription url: &quot;</span> + subUrl);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;subscribe/unsubribe error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="发布消息"><a href="#发布消息" class="headerlink" title="发布消息"></a>发布消息</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PublishMessageDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CloudAccount account = <span class="keyword">new</span> CloudAccount(<span class="string">&quot;YourAccessId&quot;</span>, <span class="string">&quot;YourAccessKey&quot;</span>, <span class="string">&quot;MNSEndpoint&quot;</span>);</span><br><span class="line">        MNSClient client = account.getMNSClient(); <span class="comment">// 在程序中，CloudAccount以及MNSClient单例实现即可，多线程安全。</span></span><br><span class="line"></span><br><span class="line">        CloudTopic topic = client.getTopicRef(<span class="string">&quot;TestTopic&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TopicMessage msg = <span class="keyword">new</span> Base64TopicMessage(); <span class="comment">//可以使用TopicMessage结构，选择不进行Base64加密。</span></span><br><span class="line">            msg.setMessageBody(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">            <span class="comment">//msg.setMessageTag(&quot;filterTag&quot;); //设置该条发布消息的filterTag。</span></span><br><span class="line">            msg = topic.publishMessage(msg);</span><br><span class="line">            System.out.println(msg.getMessageId());</span><br><span class="line">            System.out.println(msg.getMessageBodyMD5());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;subscribe error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="从队列接收和删除消息"><a href="#从队列接收和删除消息" class="headerlink" title="从队列接收和删除消息"></a>从队列接收和删除消息</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComsumerDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CloudAccount account = <span class="keyword">new</span> CloudAccount(</span><br><span class="line">                ServiceSettings.getMNSAccessKeyId(),</span><br><span class="line">                ServiceSettings.getMNSAccessKeySecret(),</span><br><span class="line">                ServiceSettings.getMNSAccountEndpoint());</span><br><span class="line">        MNSClient client = account.getMNSClient();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            CloudQueue queue = client.getQueueRef(<span class="string">&quot;queue-demo&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Message popMsg = queue.popMessage();</span><br><span class="line">                <span class="keyword">if</span> (popMsg != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;message handle: &quot;</span> + popMsg.getReceiptHandle());</span><br><span class="line">                    System.out.println(<span class="string">&quot;message body: &quot;</span> + popMsg.getMessageBodyAsString());</span><br><span class="line">                    System.out.println(<span class="string">&quot;message id: &quot;</span> + popMsg.getMessageId());</span><br><span class="line">                    System.out.println(<span class="string">&quot;message dequeue count:&quot;</span> + popMsg.getDequeueCount());</span><br><span class="line"></span><br><span class="line">                    queue.deleteMessage(popMsg.getReceiptHandle());</span><br><span class="line">                    System.out.println(<span class="string">&quot;delete message successfully.\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientException ce)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Something wrong with the network connection between client and MNS service.&quot;</span></span><br><span class="line">                    + <span class="string">&quot;Please check your network and DNS availablity.&quot;</span>);</span><br><span class="line">            ce.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServiceException se)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (se.getErrorCode().equals(<span class="string">&quot;QueueNotExist&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Queue is not exist.Please create queue before use&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (se.getErrorCode().equals(<span class="string">&quot;TimeExpired&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;The request is time expired. Please check your local machine timeclock&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            se.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Unknown exception happened!&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="删除主题"><a href="#删除主题" class="headerlink" title="删除主题"></a>删除主题</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteTopicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CloudAccount account = <span class="keyword">new</span> CloudAccount(<span class="string">&quot;YourAccessId&quot;</span>, <span class="string">&quot;YourAccessKey&quot;</span>, <span class="string">&quot;MNSEndpoint&quot;</span>);</span><br><span class="line">        MNSClient client = account.getMNSClient(); <span class="comment">// 在程序中，CloudAccount以及MNSClient单例实现即可，多线程安全。</span></span><br><span class="line"></span><br><span class="line">        CloudTopic topic = client.getTopicRef(<span class="string">&quot;TestTopic&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            topic.delete();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;delete topic error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="删除队列"><a href="#删除队列" class="headerlink" title="删除队列"></a>删除队列</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteTopicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CloudAccount account = <span class="keyword">new</span> CloudAccount(<span class="string">&quot;YourAccessId&quot;</span>, <span class="string">&quot;YourAccessKey&quot;</span>, <span class="string">&quot;MNSEndpoint&quot;</span>);</span><br><span class="line">        MNSClient client = account.getMNSClient(); <span class="comment">// 在程序中，CloudAccount以及MNSClient单例实现即可，多线程安全。</span></span><br><span class="line"></span><br><span class="line">        CloudTopic topic = client.getTopicRef(<span class="string">&quot;TestTopic&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            topic.delete();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;delete topic error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="FitletTag-使用示例"><a href="#FitletTag-使用示例" class="headerlink" title="FitletTag 使用示例"></a>FitletTag 使用示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aliyun.mns.samples;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyun.mns.client.CloudAccount;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.mns.client.CloudQueue;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.mns.client.CloudTopic;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.mns.client.MNSClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.mns.common.utils.ServiceSettings;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.mns.model.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicSample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CloudAccount account = <span class="keyword">new</span> CloudAccount(</span><br><span class="line">                ServiceSettings.getMNSAccessKeyId(),</span><br><span class="line">                ServiceSettings.getMNSAccessKeySecret(),</span><br><span class="line">                ServiceSettings.getMNSAccountEndpoint());</span><br><span class="line">        MNSClient client = account.getMNSClient();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1．创建队列。</span></span><br><span class="line">        QueueMeta queueMeta = <span class="keyword">new</span> QueueMeta();</span><br><span class="line">        queueMeta.setQueueName(<span class="string">&quot;TestSubForQueue&quot;</span>);</span><br><span class="line">        CloudQueue queue = client.createQueue(queueMeta);</span><br><span class="line">        <span class="comment">// 2．创建主题。</span></span><br><span class="line">        TopicMeta topicMeta = <span class="keyword">new</span> TopicMeta();</span><br><span class="line">        topicMeta.setTopicName(<span class="string">&quot;TestTopic&quot;</span>);</span><br><span class="line">        CloudTopic topic = client.createTopic(topicMeta);</span><br><span class="line">        <span class="comment">// 3．创建订阅。</span></span><br><span class="line">        SubscriptionMeta subMeta = <span class="keyword">new</span> SubscriptionMeta();</span><br><span class="line">        subMeta.setSubscriptionName(<span class="string">&quot;TestForQueueSub&quot;</span>);</span><br><span class="line">        subMeta.setNotifyContentFormat(SubscriptionMeta.NotifyContentFormat.SIMPLIFIED);</span><br><span class="line">        subMeta.setEndpoint(topic.generateQueueEndpoint(<span class="string">&quot;TestSubForQueue&quot;</span>));</span><br><span class="line">        subMeta.setFilterTag(<span class="string">&quot;filterTag&quot;</span>);</span><br><span class="line">        topic.subscribe(subMeta);</span><br><span class="line">        <span class="comment">// 4．发布消息。</span></span><br><span class="line">        TopicMessage msg = <span class="keyword">new</span> Base64TopicMessage();</span><br><span class="line">        msg.setMessageBody(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        msg.setMessageTag(<span class="string">&quot;filterTag&quot;</span>);</span><br><span class="line">        msg = topic.publishMessage(msg);</span><br><span class="line">        <span class="comment">// 5．从订阅的队列中获取消息。</span></span><br><span class="line">        Message msgReceive = queue.popMessage(<span class="number">30</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;ReceiveMessage From TestSubForQueue:&quot;</span>);</span><br><span class="line">        System.out.println(msgReceive.getMessageBody());</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>非技术经验积累</title>
    <url>/yq/%E9%9D%9E%E6%8A%80%E6%9C%AF%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF/</url>
    <content><![CDATA[<p><strong>接到新需求的时候，不懂或者有疑惑的点一定要提前找产品或者相关人事问清楚，特别是找产品确认清楚，并做有一定的留档，需求彻底明确之后，再进行后续的开发，千万不要去猜测需求，这样很容易出问题，切记。</strong></p>
<p><strong>接到新需求的时候，多从业务/产品和技术的角度去思考这个功能该不该做，这么做会不会存在风险，这个功能是不是应该是己方该做，还是第三方来做会更好，将这些问题思考清楚后，再进行后续的开发。</strong></p>
<p>1、场景：我方为用工中台，存放人员的信息，现在需要给符合条件的人员上保险，需要从合同中台（主数据中台）拿到人员所在商户对应的合同的产品，然后拿该产品到保险中台去给这个人员上保险，上保险的过程中，发现从合同中台拿到的数据 code 和保险中台存放的 code 不一致，这个时候是无法给人员上保险的。<br>出现这个问题，产品这边是让我从合同拿到产品的产品 code 后，再做转化去适配保险，我一开始也准备这么做，结果我们老大说这样不行，我们作为取数据方，不应该这么转换去适配保险，这样如果哪天合同这边 code 改了或者新增了，我们是无法实时去做适配，总而言之，这样是不行的，按理应该是保险那边去和合同中台（主数据中台）做数据同步，我们用工中台怎么从合同取什么产品，给保险上什么保险，而不应该做任何的转换！</p>
<p>总结：仔细一想，确实是这样，做为中间方的我们，不应该去做适配，而是由上游和下游去做这个同步，我们从上游拿数据，直接传入下游，无论数据 code 他们怎么改，只要保持一致，就不会出问题。</p>
]]></content>
  </entry>
  <entry>
    <title>面试题</title>
    <url>/yq/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h1 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h1><p>Dubbo 是一款高性能、轻量级的开源 RPC 框架，提供服务自动注册、自动发现等高效服务治理方<br>案， 可以和 Spring 框架无缝集成。</p>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ul>
<li>透明化的远程方法调用：就像调用本地方法一样调用远程方法，只需简单配置，没有任何 API 侵入。</li>
<li>软负载均衡及容错机制：可在内网替代 F5 等硬件负载均衡器，降低成本，减少单点。</li>
<li>服务自动注册与发现：不再需要写死服务提供方地址，注册中心基于接口名查询服务提供者的 IP 地</li>
</ul>
<p>址，并且能够平滑添加或删除服务提供者。</p>
<h1 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h1><p>Remoting：网络通信框架，提供对多种 NIO 框架抽象封装，包括“同步转异步”和“请求-响应”模式的信息交换方式。<br>Cluster：服务框架，提供基于接口方法的透明远程过程调用，包括多协议支持，以及软负载均衡，失败容错，地址路由，动态配置等集群支持。<br>Registry：服务注册，基于注册中心目录服务，使服务消费方能动态的查找服务提供方，使地址透明，使服务提供方可以平滑增加或减少机器。</p>
<h1 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1655050040115-fc4015a0-3f32-4d86-86f9-ca7b618cb781.png#clientId=u27b6a1d9-12ef-4&from=paste&height=659&id=ub3cdc457&name=image.png&originHeight=824&originWidth=1060&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=141552&status=done&style=none&taskId=u645820c0-e3a4-4c8a-80ee-87755726035&title=&width=848" alt="image.png"><br>Provider：暴露服务的服务提供方<br>Consumer：调用远程服务消费方<br>Registry：服务注册与发现注册中心<br>Monitor：监控中心和访问调用统计<br>Container：服务运行容器</p>
<h1 id="Dubbo-服务器注册与发现的流程？"><a href="#Dubbo-服务器注册与发现的流程？" class="headerlink" title="Dubbo 服务器注册与发现的流程？"></a>Dubbo 服务器注册与发现的流程？</h1><p>服务容器 Container 负责启动，加载，运行服务提供者。<br>服务提供者 Provider 在启动时，向注册中心注册自己提供的服务。<br>服务消费者 Consumer 在启动时，向注册中心订阅自己所需的服务。<br>注册中心 Registry 返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变<br>更数据给消费者。<br>服务消费者 Consumer，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如<br>果调用失败，再选另一台调用。<br>服务消费者 Consumer 和提供者 Provider，在内存中累计调用次数和调用时间，定时每分钟发送一<br>次统计数据到监控中心 Monitor。</p>
]]></content>
  </entry>
  <entry>
    <title>项目中敏感数据加解密的实践</title>
    <url>/yq/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%95%8F%E6%84%9F%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%A7%A3%E5%AF%86%E7%9A%84%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p><strong>背景</strong><br>由滴滴事件引发国家对数据安全的一系列反应，为贯彻国家的政策、维护数据的安全，我们公司也开始着手对系统中存储的敏感数据进行加密。<br>目前我们组管理的系统包含敏感数据字段包括：姓名、证件号、电话、邮箱、住址等。<br><strong>国家层面</strong></p>
<ul>
<li>数据安全保障能力是国家竞争力的直接体现；</li>
<li>数据保护与安全是国家安全的重要方面；</li>
<li>数据安全有序是数字经济健康发展的基础；</li>
<li>数据安全是国家数字治理的重要议题。</li>
</ul>
<p><strong>企业层面</strong></p>
<ul>
<li>数据安全保障直接影响企业与客户的关系；</li>
<li>数据安全在企业信息化建设中占据主导地位。</li>
</ul>
<h2 id="项目中的加解密流程"><a href="#项目中的加解密流程" class="headerlink" title="项目中的加解密流程"></a>项目中的加解密流程</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>1、搭建新库，与需要做加密的旧库建立主从关系；<br>2、同步数据；<br>3、数据由旧库向新库同步完成（接近 100%）；<br>4、启动定时任务，从旧库取数据，在程序中进行加密，按照 id<br>更新到新库；（保证幂等）<br>5、更新完成后，通过修改数据源配置切换到加密后的数据源；<br>6、部署上线包含加解密逻辑的业务代码。</p>
<h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1641203404407-e4136485-cab2-41a8-88df-d1d6907f50ab.png#clientId=ud348d3f8-7d3a-4&from=paste&height=435&id=u010d645a&name=image.png&originHeight=870&originWidth=1031&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=185621&status=done&style=none&taskId=uce0d64ad-0d19-4cc3-87e5-29d115a532f&title=&width=515.5" alt="image.png"></p>
<h3 id="补偿处理"><a href="#补偿处理" class="headerlink" title="补偿处理"></a>补偿处理</h3><p>由于数据量较大，采用分页进行加密，并用 redis 记录加密的最新页码，执行到某一页加密失败时，查明失败原因，修复程序，重新执行定时加密，此时加密的页码从出错页码开始执行，避免重头开始进行全量数据加密导致耗时。（如果要重头开始跑，可以通过输入指定参数清除 Redis 缓存重新跑全量加密）<br>对定时任务加密完成后，切换数据源上线加解密业务代码的期间的增量数据（未加密数据），仍旧可以通过启动定时任务加密。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1641203692639-fb4b64d4-822f-4e22-ac63-81c047c64e0d.png#clientId=u11518223-e39d-4&from=paste&height=452&id=u86277b6a&name=image.png&originHeight=903&originWidth=778&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=152474&status=done&style=none&taskId=ub6fa2384-4f1a-412d-a001-e43443602af&title=&width=389" alt="image.png"></p>
<h2 id="多数据源配置"><a href="#多数据源配置" class="headerlink" title="多数据源配置"></a>多数据源配置</h2><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>1、自定义类 DynamicDataSource 继承 AbstractRoutingDatasource 类并注入 bean；<br>2、将所有数据源写入到 AbstractRoutingDatasource 类中；<br>3、以注解+切面的形式实现数据源的切换；<br>具体做法：<br>1）、在需要切换数据源的方法上标注注解，声明要切换后的数据源；<br>2）、执行到标注注解的方法时，通过切面获取到方法注解的 数据源名称；<br>3）、将数据源名称 set 进入当前线程中。<br>4、执行注解方法里的 mapper 时，AbstractRoutingDatasource.getConnection()方法调用<br>determineTargetDataSource()，该方法又调用 determineCurrentLookupKey()方法，获取<br>到第三步当前线程保存的数据源名称；<br>5、根据数据源 map 集合和作为 key 的数据源名称，获取到切换的数据源。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1641203740554-6ddee491-e8c7-406d-81d7-d19d30ec14a4.png#clientId=u11518223-e39d-4&from=paste&height=388&id=u4f6e68a6&name=image.png&originHeight=776&originWidth=802&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=157505&status=done&style=none&taskId=ue87954ff-a126-47ca-b4e0-5c7fedfce81&title=&width=401" alt="image.png"><br><strong>初始化数据源并注入到 bean 中</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1641203802258-e46efdbf-dc07-4fef-85a4-b8b1a21c5d40.png#clientId=u11518223-e39d-4&from=paste&height=89&id=u3194695a&name=image.png&originHeight=177&originWidth=791&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=76575&status=done&style=none&taskId=u0d56b27b-6937-4b63-b05c-648b00201a6&title=&width=395.5" alt="image.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1641203808894-9b81679b-88bc-44b4-8396-9ab4cc2efff6.png#clientId=u11518223-e39d-4&from=paste&height=466&id=u63cdb4b3&name=image.png&originHeight=931&originWidth=1419&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=370152&status=done&style=none&taskId=u97a63f6f-61ae-4e43-b69a-183b01e5046&title=&width=709.5" alt="image.png"></p>
<h3 id="多数据源切换"><a href="#多数据源切换" class="headerlink" title="多数据源切换"></a>多数据源切换</h3><p><strong>使用注解+切面的方式实现数据源的动态切换</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CurDataSource &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1641203918283-2a46367d-32b6-496e-b48c-5e4baf8b3c28.png#clientId=u11518223-e39d-4&from=paste&height=398&id=u80c3fa01&name=image.png&originHeight=795&originWidth=1047&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=261480&status=done&style=none&taskId=u8bf1bee6-25a9-4dea-b928-d294f922ca1&title=&width=523.5" alt="image.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1641203927388-ae88c64e-26e8-4ce1-9954-ebb532e81627.png#clientId=u11518223-e39d-4&from=paste&height=33&id=uf06bab4a&name=image.png&originHeight=65&originWidth=1198&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=30154&status=done&style=none&taskId=ub543d944-974c-4795-a58e-c3640f3902c&title=&width=599" alt="image.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1641203932225-12e3aa12-8722-437f-aeee-bcd07af79634.png#clientId=u11518223-e39d-4&from=paste&height=69&id=u9f718ee1&name=image.png&originHeight=137&originWidth=865&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=43159&status=done&style=none&taskId=u885c9f63-ea66-49ca-8c3c-a2e33b092ef&title=&width=432.5" alt="image.png"></p>
<h2 id="AbstractRoutingDatasource-核心代码"><a href="#AbstractRoutingDatasource-核心代码" class="headerlink" title="AbstractRoutingDatasource 核心代码"></a>AbstractRoutingDatasource 核心代码</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1641204013362-2f3c7ac5-0e0c-44e9-8b85-e9c5e1670eb9.png#clientId=u11518223-e39d-4&from=paste&height=308&id=u7f408859&name=image.png&originHeight=616&originWidth=1353&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=155856&status=done&style=none&taskId=ue8b23e80-d6df-4a97-9a0c-b59fb3c7156&title=&width=676.5" alt="image.png"></p>
<h2 id="数据加解密的方式"><a href="#数据加解密的方式" class="headerlink" title="数据加解密的方式"></a>数据加解密的方式</h2><h3 id="SQL-函数实现加解密"><a href="#SQL-函数实现加解密" class="headerlink" title="SQL 函数实现加解密"></a>SQL 函数实现加解密</h3><p>采用 Mysql 内置的 AES 加解密函数，对某个字段进行加解密，如下。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 加密 张三</span></span><br><span class="line"><span class="keyword">select</span>   <span class="keyword">HEX</span>(<span class="keyword">AES_ENCRYPT</span>(‘张三’,<span class="string">&#x27;ABC123!&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 解密  张三</span></span><br><span class="line"><span class="keyword">select</span>  <span class="keyword">AES_DECRYPT</span>(<span class="keyword">UNHEX</span>(<span class="string">&#x27;B85BECE4E75D2AB848CD89BEAD6E2528&#x27;</span>),<span class="string">&#x27;ABC123!&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用场景：<br>需求小，指定加密内容，该方法可行。<br>密钥变 ，所有代码跟着变。<br>不推荐。</p>
<h3 id="TypeHandler-实现"><a href="#TypeHandler-实现" class="headerlink" title="TypeHandler 实现"></a>TypeHandler 实现</h3><ul>
<li><strong>Mybatis 的类型转换器，可将 java 数据类型转换成与数据库适配的格式。</strong></li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1641204184705-464e3ae0-34e9-435b-af1f-918c53f0af17.png#clientId=u11518223-e39d-4&from=paste&height=414&id=u697f8073&name=image.png&originHeight=828&originWidth=1332&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=415048&status=done&style=none&taskId=u0033e412-f473-497b-8946-c51bfde3326&title=&width=666" alt="image.png"></p>
<ul>
<li><strong>加解密中的使用</strong></li>
</ul>
<p>自定义 EncryptionHandler 继承 BaseTypeHandler，重写里面的 setNonNullParameter 和 getNonableResult 方法，在敏感数据入库前做加密处理，在敏感数据出库时做解密处理。</p>
<ul>
<li>加密</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1641204249998-4bc70668-7357-47d5-acb5-a86356fe2290.png#clientId=u11518223-e39d-4&from=paste&height=200&id=u8430b081&name=image.png&originHeight=400&originWidth=1954&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=182204&status=done&style=none&taskId=u6fe92028-92b7-490d-a026-44bd2454b7b&title=&width=977" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1641204257213-ccf0d27d-28df-4dc7-ba3d-da04050c5ff0.png#clientId=u11518223-e39d-4&from=paste&height=152&id=u2bbb1862&name=image.png&originHeight=304&originWidth=1324&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=178389&status=done&style=none&taskId=u3caf3163-e715-4875-bd76-a3f8c5f997e&title=&width=662" alt="image.png"></p>
<ul>
<li>解密</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1641204299514-2b9b8199-f2c7-4f28-8eea-6f4caec207f7.png#clientId=u11518223-e39d-4&from=paste&height=309&id=udd540d20&name=image.png&originHeight=618&originWidth=1637&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=241724&status=done&style=none&taskId=uee1834e8-bf44-446d-8c1e-cf4b6d95e58&title=&width=818.5" alt="image.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/22422342/1641204305456-d6fddb09-c4b2-444a-bfec-5d1033ad8cd9.png#clientId=u11518223-e39d-4&from=paste&height=153&id=uca406dd7&name=image.png&originHeight=306&originWidth=1617&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=296815&status=done&style=none&taskId=u0eb1c259-afb6-4b4d-adf0-aadf98342ba&title=&width=808.5" alt="image.png"></p>
]]></content>
  </entry>
  <entry>
    <title>项目接入prometheus监控步骤</title>
    <url>/yq/%E9%A1%B9%E7%9B%AE%E6%8E%A5%E5%85%A5prometheus%E7%9B%91%E6%8E%A7%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.micrometer/micrometer-registry-prometheus --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.micrometer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-registry-prometheus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="工程的-Apollo-添加配置并发布"><a href="#工程的-Apollo-添加配置并发布" class="headerlink" title="工程的 Apollo 添加配置并发布"></a>工程的 Apollo 添加配置并发布</h1><p>命名空间：spring.application</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#prometheus相关-actuator暴露接口</span></span><br><span class="line"><span class="meta">management.endpoints.web.exposure.include</span> = <span class="string">metrics,prometheus</span></span><br><span class="line"><span class="comment"># prometheus相关-Whether Tomcat&#x27;s MBean Registry should be enabled</span></span><br><span class="line"><span class="meta">server.tomcat.mbeanregistry.enabled</span> = <span class="string">true</span></span><br></pre></td></tr></table></figure>

<h1 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h1><p>访问 <a href="http://localhost:8080/actuator/prometheus">http://localhost:8080/actuator/prometheus</a>确认生效</p>
<h1 id="k8s-工程添加参数并发布"><a href="#k8s-工程添加参数并发布" class="headerlink" title="k8s 工程添加参数并发布"></a>k8s 工程添加参数并发布</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">annotations:</span></span><br><span class="line">  <span class="attr">prometheus.io/path:</span> <span class="string">/actuator/prometheus</span></span><br><span class="line">  <span class="attr">prometheus.io/port:</span> <span class="string">&quot;8080&quot;</span></span><br><span class="line">  <span class="attr">prometheus.io/scrape:</span> <span class="string">&quot;true&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="进入-grafana-查看监控"><a href="#进入-grafana-查看监控" class="headerlink" title="进入 grafana 查看监控"></a>进入 grafana 查看监控</h1>]]></content>
  </entry>
  <entry>
    <title>rabbitMQ学习</title>
    <url>/rabbitMQ%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<blockquote>
<p>身体和灵魂，总得有一个在路上。</p>
</blockquote>
<a id="more"></a>

<h1 id="中间件概述"><a href="#中间件概述" class="headerlink" title="中间件概述"></a>中间件概述</h1><p>中间件可以屏蔽对于底层比如操作系统、硬盘等的过多关注，另外也可以作为服务之间的互通的一个桥梁，在一定程度上打破服务之间实现方式上的标准性，如A服务可以使用java编写，B服务可以使用Python语言编写，然后通过中间件来实现两服务之间的互通。</p>
<blockquote>
<p><strong>消息中间件</strong><br><img src="https://img-blog.csdnimg.cn/20210522171210763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="消息中间件"><br>利用可靠的消息传递机制进行系统与系统之间的通讯；<br>通过提供消息和消息的排队机制，它可以在分布式系统环境下扩展进程间的通讯。</p>
</blockquote>
<ul>
<li>本质及设计<ul>
<li>是一种接收数据、接收请求、存储数据、发送数据的服务</li>
<li>MQ队列：负责数据的接收、存储传递，性能要高于其他服务</li>
<li>协议选择：在TCP/IP协议之上构建自己的协议amqp</li>
</ul>
</li>
</ul>
<hr>
<blockquote>
<p>rabbitmq官网：<a href="https://www.rabbitmq.com/">https://www.rabbitmq.com/</a></p>
</blockquote>
<h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><p>略</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp‐client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="tag">&lt;<span class="name">!‐‐此版本与spring</span> <span class="attr">boot</span> <span class="attr">1.5.9</span>版本匹配‐‐&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="简单模式"><a href="#简单模式" class="headerlink" title="简单模式"></a>简单模式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer01</span> </span>&#123;</span><br><span class="line">    <span class="comment">//队列名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE = <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">            factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">            factory.setPort(<span class="number">5672</span>);</span><br><span class="line">            factory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">            factory.setPassword(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">            factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);<span class="comment">//rabbitmq默认虚拟机名称为“/”，虚拟机相当于一个独立的mq服务器</span></span><br><span class="line">            <span class="comment">//创建与RabbitMQ服务的TCP连接</span></span><br><span class="line">            connection  = factory.newConnection();</span><br><span class="line">            <span class="comment">//创建与Exchange的通道，每个连接可以创建多个通道，每个通道代表一个会话任务</span></span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 声明队列，如果Rabbit中没有此队列将自动创建</span></span><br><span class="line"><span class="comment">             * param1:队列名称</span></span><br><span class="line"><span class="comment">             * param2:是否持久化</span></span><br><span class="line"><span class="comment">             * param3:队列是否独占此连接</span></span><br><span class="line"><span class="comment">             * param4:队列不再使用时是否自动删除此队列</span></span><br><span class="line"><span class="comment">             * param5:队列参数</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.queueDeclare(QUEUE, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">            String message = <span class="string">&quot;helloworld小明&quot;</span>+System.currentTimeMillis();</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 消息发布方法</span></span><br><span class="line"><span class="comment">             * param1：Exchange的名称，如果没有指定，则使用Default Exchange</span></span><br><span class="line"><span class="comment">             * param2:routingKey,消息的路由Key，是用于Exchange（交换机）将消息转发到指定的消息队列</span></span><br><span class="line"><span class="comment">             * param3:消息包含的属性</span></span><br><span class="line"><span class="comment">             * param4：消息体</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">              <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 这里没有指定交换机，消息将发送给默认交换机，每个队列也会绑定那个默认的交换机，但是不能显示绑定或解除绑定</span></span><br><span class="line"><span class="comment">             * 默认的交换机，routingKey等于队列名称</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">&quot;Send Message is:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(channel != <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                channel.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(connection != <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 消费者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer01</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE = <span class="string">&quot;helloworld&quot;</span>;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//设置MabbitMQ所在服务器的ip和端口</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//定义消费方法</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 消费者接收消息调用此方法</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> consumerTag 消费者的标签，在channel.basicConsume()去指定</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> properties</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> body</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">             *  */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       Envelope envelope,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       <span class="keyword">byte</span>[] body)</span></span></span><br><span class="line"><span class="function">                    <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//交换机</span></span><br><span class="line">                String exchange = envelope.getExchange();</span><br><span class="line">                <span class="comment">//路由key</span></span><br><span class="line">                String routingKey = envelope.getRoutingKey();</span><br><span class="line">                <span class="comment">//消息id</span></span><br><span class="line">                <span class="keyword">long</span> deliveryTag = envelope.getDeliveryTag();</span><br><span class="line">                <span class="comment">//消息内容</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body,<span class="string">&quot;utf‐8&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;receive message..&quot;</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 监听队列String queue, boolean autoAck,Consumer callback</span></span><br><span class="line"><span class="comment">         * 参数明细</span></span><br><span class="line"><span class="comment">         * 1、队列名称</span></span><br><span class="line"><span class="comment">         * 2、是否自动回复，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动回复</span></span><br><span class="line"><span class="comment">         * 3、消费消息的方法，消费者接收到消息后调用此方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(QUEUE, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>流程</strong><blockquote>
<p>1、<strong>发送端操作流程</strong><br>1）创建连接<br>2）创建通道<br>3）声明队列<br>4）发送消息<br>2、<strong>接收端</strong><br>1）创建连接<br>2）创建通道<br>3）声明队列<br>4）监听队列<br>5）接收消息</p>
</blockquote>
</li>
<li><strong>相关概念</strong><br><img src="https://img-blog.csdnimg.cn/20210522233615214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="相关概念"></li>
<li>运行流程<br><img src="https://img-blog.csdnimg.cn/20210522234102261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="rabbitmq运行流程"><h2 id="Work-quen模式"><a href="#Work-quen模式" class="headerlink" title="Work quen模式"></a>Work quen模式</h2><img src="https://img-blog.csdnimg.cn/20210523175737916.png" alt="workquene"></li>
<li>work queues与简单模式相比，多了n个消费端，n个消费端共同消费同一个队列中的消息。</li>
<li>应用场景：对于 任务过重或任务较多情况使用工作队列可以提高任务处理的速度。</li>
<li>生产者生产多个消息，一条消息只能被一个消费者消费，消费者在处理完某条消息之后，才会收到下一条消息。<h2 id="发布订阅模式-Fanout"><a href="#发布订阅模式-Fanout" class="headerlink" title="发布订阅模式 Fanout"></a>发布订阅模式 Fanout</h2><img src="https://img-blog.csdnimg.cn/20210523173803494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="发布与订阅模式"></li>
<li>案例：<br>用户通知，当用户充值成功或转账完成系统通知用户，通知方式有短信、邮件多种方法 。</li>
<li>代码实现<ul>
<li>生产者<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuecheng.test.rabbitmq;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer02_publish</span> </span>&#123;</span><br><span class="line">    <span class="comment">//队列名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_INFORM_EMAIL = <span class="string">&quot;queue_inform_email&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_INFORM_SMS = <span class="string">&quot;queue_inform_sms&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_FANOUT_INFORM=<span class="string">&quot;exchange_fanout_inform&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建一个与MQ的连接</span></span><br><span class="line">            ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">            factory.setHost(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">            factory.setPort(<span class="number">5672</span>);</span><br><span class="line">            factory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">            factory.setPassword(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">            factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);<span class="comment">//rabbitmq默认虚拟机名称为“/”，虚拟机相当于一个独立的mq服务器</span></span><br><span class="line">            <span class="comment">//创建一个连接</span></span><br><span class="line">            connection = factory.newConnection();</span><br><span class="line">            <span class="comment">//创建与交换机的通道，每个通道代表一个会话</span></span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            <span class="comment">//声明交换机 String exchange, BuiltinExchangeType type</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 参数明细</span></span><br><span class="line"><span class="comment">             * 1、交换机名称</span></span><br><span class="line"><span class="comment">             * 2、交换机类型，fanout、topic、direct、headers</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.exchangeDeclare(EXCHANGE_FANOUT_INFORM, BuiltinExchangeType.FANOUT);</span><br><span class="line">            <span class="comment">//声明队列</span></span><br><span class="line"><span class="comment">//     (String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String,Object&gt; arguments)</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 参数明细：</span></span><br><span class="line"><span class="comment">             * 1、队列名称</span></span><br><span class="line"><span class="comment">             * 2、是否持久化</span></span><br><span class="line"><span class="comment">             * 3、是否独占此队列</span></span><br><span class="line"><span class="comment">             * 4、队列不用是否自动删除</span></span><br><span class="line"><span class="comment">             * 5、参数</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.queueDeclare(QUEUE_INFORM_EMAIL, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">            channel.queueDeclare(QUEUE_INFORM_SMS, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">//交换机和队列绑定String queue, String exchange, String routingKey</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 参数明细</span></span><br><span class="line"><span class="comment">             * 1、队列名称</span></span><br><span class="line"><span class="comment">             * 2、交换机名称</span></span><br><span class="line"><span class="comment">             * 3、路由key</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.queueBind(QUEUE_INFORM_EMAIL,EXCHANGE_FANOUT_INFORM,<span class="string">&quot;&quot;</span>);</span><br><span class="line">            channel.queueBind(QUEUE_INFORM_SMS,EXCHANGE_FANOUT_INFORM,<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="comment">//发送消息</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">                String message = <span class="string">&quot;inform to user&quot;</span>+i;</span><br><span class="line">                <span class="comment">//向交换机发送消息 String exchange, String routingKey, BasicProperties props,byte[] body</span></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 参数明细</span></span><br><span class="line"><span class="comment">                 * 1、交换机名称，不指令使用默认交换机名称 Default Exchange</span></span><br><span class="line"><span class="comment">                 * 2、routingKey（路由key），根据key名称将消息转发到具体的队列，这里填写队列名称表示消息将发到此队列</span></span><br><span class="line"><span class="comment">                 * 3、消息属性</span></span><br><span class="line"><span class="comment">                 * 4、消息内容</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                channel.basicPublish(EXCHANGE_FANOUT_INFORM, <span class="string">&quot;&quot;</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">                System.out.println(<span class="string">&quot;Send Message is:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(channel!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>邮件消费者<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuecheng.test.rabbitmq;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2018‐06‐14 10:32</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer02_subscribe_email</span> </span>&#123;</span><br><span class="line">    <span class="comment">//队列名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_INFORM_EMAIL = <span class="string">&quot;inform_queue_email&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_FANOUT_INFORM=<span class="string">&quot;inform_exchange_fanout&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个与MQ的连接</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);<span class="comment">//rabbitmq默认虚拟机名称为“/”，虚拟机相当于一个独立的mq服务器</span></span><br><span class="line">        <span class="comment">//创建一个连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">//创建与交换机的通道，每个通道代表一个会话</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//声明交换机 String exchange, BuiltinExchangeType type</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数明细</span></span><br><span class="line"><span class="comment">         * 1、交换机名称</span></span><br><span class="line"><span class="comment">         * 2、交换机类型，fanout、topic、direct、headers</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_FANOUT_INFORM, BuiltinExchangeType.FANOUT);</span><br><span class="line">        <span class="comment">//声明队列</span></span><br><span class="line"><span class="comment">//            channel.queueDeclare(String queue, boolean durable, boolean exclusive, boolean</span></span><br><span class="line">autoDelete, Map&lt;String, Object&gt; arguments)</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数明细：</span></span><br><span class="line"><span class="comment">         * 1、队列名称</span></span><br><span class="line"><span class="comment">         * 2、是否持久化</span></span><br><span class="line"><span class="comment">         * 3、是否独占此队列</span></span><br><span class="line"><span class="comment">         * 4、队列不用是否自动删除</span></span><br><span class="line"><span class="comment">         * 5、参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(QUEUE_INFORM_EMAIL, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//交换机和队列绑定String queue, String exchange, String routingKey</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数明细</span></span><br><span class="line"><span class="comment">         * 1、队列名称</span></span><br><span class="line"><span class="comment">         * 2、交换机名称</span></span><br><span class="line"><span class="comment">         * 3、路由key</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueBind(QUEUE_INFORM_EMAIL,EXCHANGE_FANOUT_INFORM,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">//定义消费方法</span></span><br><span class="line">        DefaultConsumer defaultConsumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope,</span></span></span><br><span class="line"><span class="function"><span class="params">AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">long</span> deliveryTag = envelope.getDeliveryTag();</span><br><span class="line">                String exchange = envelope.getExchange();</span><br><span class="line">                <span class="comment">//消息内容</span></span><br><span class="line">                String message = <span class="keyword">new</span> String(body, <span class="string">&quot;utf‐8&quot;</span>);</span><br><span class="line">                System.out.println(message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 监听队列String queue, boolean autoAck,Consumer callback</span></span><br><span class="line"><span class="comment">         * 参数明细</span></span><br><span class="line"><span class="comment">         * 1、队列名称</span></span><br><span class="line"><span class="comment">         * 2、是否自动回复，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动回复</span></span><br><span class="line"><span class="comment">         * 3、消费消息的方法，消费者接收到消息后调用此方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(QUEUE_INFORM_EMAIL, <span class="keyword">true</span>, defaultConsumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>publish/subscribe与work queues有什么区别。<br>区别：<br>1）work queues不用定义交换机，而publish/subscribe需要定义交换机。<br>2）publish/subscribe的生产方是面向交换机发送消息，work queues的生产方是面向队列发送消息(底层使用默认交换机)。<br>3）publish/subscribe需要设置队列和交换机的绑定，work queues不需要设置，实质上work queues会将队列绑定到默认的交换机 。<br>相同点：<br>所以两者实现的发布/订阅的效果是一样的，多个消费端监听同一个队列不会重复消费消息。</li>
<li>实质工作用什么 publish/subscribe还是work queues。<br>建议使用 publish/subscribe，发布订阅模式比工作队列模式更强大，并且发布订阅模式可以指定自己专用的交换机。<h2 id="路由模式-Routing"><a href="#路由模式-Routing" class="headerlink" title="路由模式 Routing"></a>路由模式 Routing</h2><img src="https://img-blog.csdnimg.cn/20210523173851477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="路由模式"></li>
<li>路由模式：<br>1、每个消费者监听自己的队列，并且设置routingkey。<br>2、生产者将消息发给交换机，由交换机根据routingkey来转发消息到指定的队列。<h2 id="主题模式-Topic"><a href="#主题模式-Topic" class="headerlink" title="主题模式 Topic"></a>主题模式 Topic</h2><img src="https://img-blog.csdnimg.cn/20210523174552246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="主题模式"></li>
</ul>
<p><strong>todo…..</strong></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>韭菜成长记</title>
    <url>/%E9%9F%AD%E8%8F%9C%E6%88%90%E9%95%BF%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>投资有风险，入市需谨慎。</p>
</blockquote>
<a id="more"></a>

<h1 id="理财入门学习-韭菜养成记"><a href="#理财入门学习-韭菜养成记" class="headerlink" title="理财入门学习(韭菜养成记)"></a>理财入门学习(韭菜养成记)</h1><h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><blockquote>
<p>凡是涉及到跟钱的安排，都是理财。<br>摆脱穷人思维，建立富人思维。</p>
</blockquote>
<ol>
<li><strong>收入-支出 = 结余</strong></li>
<li>资产的内涵是 <strong>现金流</strong></li>
<li>如何实现财务自由</li>
</ol>
<ul>
<li>工资形成结余</li>
<li>用结余去换生钱资产</li>
<li>生钱资产产生非工资收入</li>
<li>非工资收入帮助我们实现财务自由</li>
</ul>
<ol start="4">
<li><strong>当你的生钱资产，产生的非工资收入，覆盖日常总支出，那么你就实现财务自由了。</strong></li>
<li>富人成功的两个秘密：</li>
</ol>
<ul>
<li><strong>生钱资产占总资产的80%以上</strong></li>
<li><strong>好支出占总支出的80%以上</strong></li>
</ul>
<ol start="6">
<li>一定要学会投资自己，务必让每一笔投资都是好支出</li>
</ol>
<hr>
<h2 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h2><blockquote>
<p><strong>量化思维</strong> 是富人最重要的思维之一。<br>存在银行的钱跑不过通货膨胀</p>
</blockquote>
<ol>
<li>用量化的思维看待事物，有时便宜的东西往往更贵，免费的东西或许贵的离谱，因为它们耗费了你大量的时间成本。</li>
<li>价值不是单一的衡量价格，而是背后带给我们的使用价值和回报价值。</li>
<li>无论何时，要让自己在心态建设上要像一个值得拥有那么多钱的人。（注：世间的一切美好你都值得拥有。）</li>
<li>给自己创造非工资收入，让自己不再为钱打工，而是让钱为自己打工，让钱为自己赚钱。</li>
<li>用<strong>量化思维</strong>助力财务自由三种方式</li>
</ol>
<ul>
<li>让自己的单位时间更加值钱（提高工作技能）。</li>
<li>把一份时间出售很多次（出书、版权、分红等）。</li>
<li>用钱买别人的时间，用别人的时间来为自己赚钱（最高级的方式）<ol start="6">
<li>富人珍藏优良（生钱）资产，穷人手里只有现金，劣币驱逐良币。</li>
<li>P2P理解：投资给放高利贷公司（一般达20%），高利贷公司通过放贷给借贷人，收取高额利息，而借贷人往往会还不起钱，这样放出去的钱不仅利息没收着，本金也收不回来，导致公司破产，投资人亏本。（<strong>你看中人家的利息，人家看中你的本金</strong>）<strong>注：P2P投资学相当于赌博，它不是国家交易所标准化的投资工具，==应当远离==</strong><h3 id="晚间学习"><a href="#晚间学习" class="headerlink" title="晚间学习"></a>晚间学习</h3><blockquote>
<p>理财能力决定复利最终效益<br>复利是人类的第八大奇迹。        ——爱因斯坦<br>投资的灵魂有两部分：理解复利的魔力；获取复利的能力。    ——查理·芒格<br><img src="https://img-blog.csdnimg.cn/20210109225930177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="关于复利"></p>
</blockquote>
<h4 id="关于复利"><a href="#关于复利" class="headerlink" title="关于复利"></a>关于复利</h4></li>
<li>复利是帮助普通人实现财务自由的法宝，复利通俗来说就是<strong>利滚利</strong>，<strong>今天的本金+利息=明天的本金</strong></li>
<li>复利的公式是： 最终收益 = 本金*（1 + 收益率）^时间</li>
<li>复利本质上是一种让钱高效生钱的思维方式。（富人财富都是复利积累起来的）</li>
<li><img src="https://img-blog.csdnimg.cn/20210109231202989.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="复利三大要素"></li>
<li>当前客观条件，拥有时间优势，缺乏本金，所以更要利用好本金，第一不要亏损，第二要高效的生钱。所以要<strong>找到优质的生钱资产并投资</strong>。另外，<strong>提高收益率才是最重要的。</strong></li>
<li>放在优质的生钱资产上使高效的钱生钱，无论价格涨跌，生钱资产都能赚到【现金流】，满足【高效生钱不亏损】的基本原则</li>
<li><strong>培养投资思维和理财能力</strong>，把握当下的机会，别让明天的自己后悔。</li>
<li><img src="https://img-blog.csdnimg.cn/20210109234755526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="复利三大要素对比"></li>
</ol>
</li>
</ul>
<h4 id="复利的反向作用"><a href="#复利的反向作用" class="headerlink" title="复利的反向作用"></a>复利的反向作用</h4><blockquote>
<p>复利的反向作用就是通货膨胀。<br>通货膨胀每天都在【收割】收益率低的人。<br>贫穷的原因很大一部分是因为懒惰，这种懒惰不是身体上的懒惰，而是思维上的懒惰。<br>不主动吃学习的苦，就得被迫吃生活的苦。<br><img src="https://img-blog.csdnimg.cn/20210109235111116.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="通货膨胀"><br><img src="https://img-blog.csdnimg.cn/20210109235610995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="巴菲特语录"></p>
</blockquote>
<ol>
<li>拥有了生钱资产，给你带来源源不断的现金流，在复利法则的作用下，帮助普通人实现财务自由。而你的理财能力高低决定了你收益率。</li>
<li>心疼投资大脑的钱，一直什么都不懂，不是被通货膨胀割韭菜，就是被投资市场割韭菜，一直穷下去。反之学习他人成功的方法，变成自己的技能，是最快的脱贫、升级之法！</li>
<li><strong>3142原则</strong>【资产分配的科学方法】<br> <strong>3【生活保障资金】</strong>：家庭年收入的30%用来作为应急金（包括日常消费，欲望消费），以备不时之需，可以通过无风险工具管理处置，灵活存取。（生活保障资金主要是日常开支，包含欲望消费）<br> <strong>1【风险保障资金】</strong>: 家庭年收入的10%用来配置家庭保险，作为家庭资产的后盾。（不要指望保险来赚钱。保险仅仅用来保障风险，而不是用来获得收益的。）<br> <strong>4【财务自由资金】</strong>：家庭年收入的40%用来养鹅，钱生钱。（可以拿出月收入的百分之十到二十的钱来养鹅，让钱生钱）<br> <strong>2【学习培训资金】</strong>：家庭年收入的20%用来投资自己，学习相关技巧，增加自己的工资和非工资收入。</li>
<li>建议：<ul>
<li>支付宝里是场外基金，收益低，一般跑不赢通胀，支付宝是第三方代理平台，代理为的是方便大家直接购买，因为你们暂时没有好的理财技能。支付宝，场外基金，有的收益看似高，但是卖出时会发现手续费特别高。（<strong>场外基金，简单来说就是，他代理了这个基金。卖给你，他拿点手续费，你挣一点钱</strong>）</li>
<li>银行的理财产品也不要买。</li>
<li>保险理财，更别买。<br>（<strong>理财型保险是远远跑不赢通胀的</strong>）</li>
</ul>
</li>
</ol>
<h5 id="总结：【关键富人思维-第四条】"><a href="#总结：【关键富人思维-第四条】" class="headerlink" title="总结：【关键富人思维-第四条】"></a>总结：【关键富人思维-第四条】</h5><p>⭐为什么说复利三要素中最容易掌控的是收益率？<br>复利三要素，本金、时间、收益率。把钱存在保险箱中，复利会发挥反向作用，把钱一口一口吃掉，长期来看1万元每年贬值1000元以上。投资开始的越早，时间要素发挥越大，复利的正向作用越早发挥作用。本金大的人，复利作用也比较大，但是投错了地方，本金再大也会亏完。如果本金和时间都不占优势，那么最有效的就是提高年化收益率，而提高年化收益率的关键在于自己的理财能力。</p>
<p>一句话总结：【时间无法改变，越早开始越好；本金依赖生钱资产；收益率源于理财能力，理财能力才是决定复利终值的关键】。</p>
<h5 id="【关键富人思维-第五条】"><a href="#【关键富人思维-第五条】" class="headerlink" title="【关键富人思维-第五条】"></a>【关键富人思维-第五条】</h5><p>为什么说投资自己的大脑、学会理财技能也是中产升级之法？<br>如同经典书籍《富爸爸》中说的，穷人卖时间换钱，其实本质是“卖命”。他们抱怨自己没有钱，其实本质是他们没有认识到投资自己的大脑是最快的脱贫致富之法。<br>比如一个专家花费一生写了一部巨著，我们花100元买了他的书回来看，其实某种意义上我们是买到了他一生的生命成果，学到了能获得成千上万的收益，这就叫“站在巨人的肩膀上”，贫穷的矮人站在“巨人的肩膀上”也会达到巨人的视野。</p>
<p>但很多人心疼这点投资大脑的钱，所以一直什么都不懂，一直贫穷下去。反之，穷人也能通过投资自己的头脑，学习他人成功的方法，买他人花了很多时间转化的成果，变成自己的东西，快速创造财富，这是最快的脱贫之法。</p>
<p>一句话总结：心疼投资大脑的钱，一直什么都不懂，不是被通货膨胀割韭菜，就是被投资市场割韭菜，一直穷下去。反之学习他人成功的方法，变成自己的技能，是最快的脱贫、升级之法。</p>
<hr>
<h2 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h2><h3 id="早间学习"><a href="#早间学习" class="headerlink" title="早间学习"></a>早间学习</h3><blockquote>
<p>我们常常高估了一天内可以做到的事情，却低估了一年里可以做到的事情。</p>
</blockquote>
<ol>
<li><strong>投资是长期行为</strong>，不是短期投机。</li>
<li>收入低、月光，可采取定投方式，勿小看长期小定投获得的收益。</li>
<li>理财思维越早建立越好；理财技能越早学习越好；理财，越早开始越好。</li>
<li>抛弃穷人思维，学习富人思维，做出正确选择，现在行动，改变未来。<br><img src="https://img-blog.csdnimg.cn/20210110130411507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="建立富人思维"><img src="https://img-blog.csdnimg.cn/20210110130518339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="人生手指曲线示意图"></li>
<li>做一个长期主义者，在学习中前进，坚持锻炼，相信复利和时间会带来正向的回报。</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20210110133325681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="个人资产配置"></p>
<h3 id="科学记账法"><a href="#科学记账法" class="headerlink" title="科学记账法"></a>科学记账法</h3><blockquote>
<p>了解账本对你没用，有用的是了解自己的财富增值速度并与之和平相处</p>
</blockquote>
<ol>
<li>第1步，就是要学会将自己的记下的帐转化为有用的资讯，从中解读自己的消费习惯，学习如何控管支出，增加资金的利用效率。</li>
<li>第2步：养成记账习惯后定时分析</li>
<li>第3步：不要沉湎于记录日常生活</li>
<li>第4步：了解你的财富才能控制你的欲望<blockquote>
<p>当一个人能够清楚看见未来的财务状态时，就会感受到身心平衡，上班工作也就更快乐，心情也比较容易满足。也许这听起来有些夸张，不过只要你也尝试跟着做，就一定能感同身受。<br>![sma<img src="https://img-blog.csdnimg.cn/20210110140804854.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="rt原则"></p>
</blockquote>
</li>
</ol>
<h3 id="晚间学习——学习理财工具"><a href="#晚间学习——学习理财工具" class="headerlink" title="晚间学习——学习理财工具"></a>晚间学习——学习理财工具</h3><blockquote>
<p>不懂不乱投，懂了放心投。<br>学好理财技能后再开始投资。</p>
</blockquote>
<ul>
<li><strong>晚间一读：</strong><a href="http://xiaobai.yaocaiwuziyou.com/index.php/Home/OldTest/NewWan?type=40&id=2092276&imid=10107060&num=3&isshow=1">财务自由的三大核心工具</a><h4 id="四种理财工具"><a href="#四种理财工具" class="headerlink" title="四种理财工具"></a>四种理财工具</h4></li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20210110212426594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="理财金字塔"></p>
<ol>
<li><strong>无风险理财工具</strong>：国债、定期存款、国债逆回购、货币基金、银行理财（保本型），年化收益率一般在3%~5%左右，可管理零钱，但是远低于通货率，不是事先财务自由的理财工具。</li>
</ol>
<ul>
<li>国债逆回购：本质是国债抵押借款，是无风险的（属于很好管理零钱的工具）<br><img src="https://img-blog.csdnimg.cn/20210110213053721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="国债逆回购"></li>
<li>货币基金： 也称“火鸡”，余额宝属于货币基金。<blockquote>
<p>捡钱小窍门：国债逆回购+货币基金，灵活运用你。比如：我们平时把钱买货币基金，每年可以获得3%左右的无风险收益。当国债逆回购收益高时，卖掉货币基金直接买入国债逆回购。等国债逆回购的钱到期后，当天再买进货币基金。因为买卖货币基金没有手续费。这样组合操作在保证资金方便使用的情况下，可以获得4%—6%的无风险年化收益率。但这个操作只适用于零钱管理，不适合长期理财，因为收益率是跑不过通胀率的，钱还是在贬值，【不是实现财务自由】选择的理财工具 。</p>
</blockquote>
</li>
</ul>
<ol start="2">
<li><strong>低风险的理财工具</strong>（目前而言，是重点，适合我们），分两类</li>
</ol>
<ul>
<li>一类是低风险中等收益，年化收益率一般6%—15%之间，主要包括【分级基金A】、【可转债】、【债券基金】、【股票指数基金】</li>
<li>另一类是低风险高收益，年化收益率一般在15%—30%之间，主要包括【生钱资产类型】的股票、REITs、房地产。</li>
</ul>
<p><strong>具体低风险的工具有：</strong><br>    - 【生钱资产类型的股票】就是持续分红的股票。<br>    &gt;股息率=股息除以股价<br>    - 生钱资产类型的REITs(瑞次)。【REITs】是房地产投资信托基金。投资REITs本质就是投资房地产（国外）。【生钱资产类型的REITs】就是持续高分红的REITs。其实一般的REITs都是持续高分红的。因为各国法律都规定REITs每年至少要把90%以上的净利润分配给投资者。（<strong>生钱资产类型的REITs也是一只持续下大金蛋的鹅。</strong>）<br>    - 【可转债】可以转换成股票的债券。在 100 元以下买进高信用等级的可转债没有风险。股市上涨的时候还能获得超额收益。是一种收益下有保底，上不封顶的投资工具。一般 90 元以下买进，年化收益率可达到 10%-20%。<br>    - 【股票指数基金】指数基金具有永生不死，长期上涨的特点。在合适的价位买入股票指数基金长期持有几乎没有风险。其年化收益率一般在10%—15%！（指数基金具有永生不死，长期上涨的特点。在合适的价位买入股票指数基金长期持有几乎没有风险。其年化收益率一般在10%—15%！）<br>3. <strong>中风险的理财工具</strong><br>4. <strong>高风险的理财工具（尽量别碰）</strong><br>    - P2P(网贷即属于p2p)<br>    - 私募资金<br>    - 比特币<br>    - 炒外汇<br>    - 收藏品<br>    - 期货<br>    - 耗钱资产类型的房地产</p>
<blockquote>
<p>中国这15 年中主要资产的收益率排名是： 股票 &gt;债券&gt;通胀&gt;房地产&gt;现金<br><img src="https://img-blog.csdnimg.cn/20210110220743152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="各类工具收益率排名"><br><img src="https://img-blog.csdnimg.cn/20210110220902742.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="实现财务自由三大核心工具"><br>用好了企业这个核心工具，你会成为企业家<br>用好了股票或REITs这两个核心工具，你会成为投资家<br>用好了企业、股票、REITs这三个工具，你会成为资本家</p>
</blockquote>
<blockquote>
<p>⭐正确系统的投资技能包括：<br>①理财的底层逻辑、富人思维<br>②股票的海选<br>③精选出好公司<br>④财务报表分析<br>⑤企业分析<br>⑥计算好价格<br>⑦制定买进标准<br>⑧制定持有标准<br>⑨制定卖出标准等</p>
</blockquote>
<h5 id="投资"><a href="#投资" class="headerlink" title="投资"></a>投资</h5><p>投机就是：所谓低买高卖。想着挣快钱，我投了就要挣钱。亏了怪这个理财工具风险大。不看本质，就想着挣钱。这和赌博没什么区别。</p>
<h5 id="价值投资"><a href="#价值投资" class="headerlink" title="价值投资"></a>价值投资</h5><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>⭐【重点一】：无风险投资工具，尤其关注逆回购、货币基金也就是捡钱小秘密<br>⭐【重点二】：低风险投资工具，尤其是生钱资产类型的股票、REITs<br>⭐【重点三】：我们实现财务自由的三大核心工具——股票、REITs、企业</p>
<p>【<strong>关键富人思维第六条</strong>】<br>⭐到底什么时候可以开始投资？<br>为什么有的人买股票必亏，看了几本书，学了几天课就急急忙忙要去股市里了，我们学车还要几个月，投资作为高度专业化、精细化的一个领域，不经过【系统的】学习就去“尝试”，这和训练了三天、看了几本武侠小说就上战场的士兵有什么区别呢？</p>
<p>士兵进行系统训练是为了保命，投资者进行系统的学习是为了保钱的“命”，反之，学个半瓶水就去投资市场，美其名为“试试”，这样的“试试”不会学到任何教训、经验，只会收获痛苦。</p>
<p>那些经过系统训练的人会把那些无知且自以为是的人收割的一滴血不剩</p>
<p>【这就是投资的真相】，不系统学习就想赚快钱就是送命。当你打算投资一个目标，有系统的分析方法，不再为了涨跌而心惊胆战的时候，这才是投资可以真正开始的时候。</p>
<p>一句话总结：投资第一原则：不懂不要投，懂了安心投，盲目“尝试”无疑送命，系统训练方可真正保住钱“命”。<br><img src="https://img-blog.csdnimg.cn/20210110221757562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h2><h3 id="早间阅读：《怎么才能越花越有钱》"><a href="#早间阅读：《怎么才能越花越有钱》" class="headerlink" title="早间阅读：《怎么才能越花越有钱》"></a>早间阅读：《怎么才能越花越有钱》</h3><ul>
<li>分清投资与消费</li>
<li>当下社会，仅靠勤劳也很难实现实现致富了。</li>
<li>今早<strong>工资收入</strong>和*<em>非工资收入</em>两条腿走路。**</li>
<li>始终相信自己是一个富人，别认为富人的世界我们一辈子无法企及。</li>
<li>一定要懂得投资自己，尤其是在收入少的时候。<h3 id="晚间学习-1"><a href="#晚间学习-1" class="headerlink" title="晚间学习"></a>晚间学习</h3><blockquote>
<p>学好财报是选出好公司的关键</p>
</blockquote>
<h4 id="财务报表"><a href="#财务报表" class="headerlink" title="财务报表"></a>财务报表</h4></li>
<li>含义：公司的流水。</li>
<li>作用：排雷，证伪而不是证实。<blockquote>
<p>资产负债率 = 负债 / 总资产<br>说明：资产负债率大于70%的公司，安全性差；资产负债率小于40%的公司，安全性很高</p>
</blockquote>
</li>
<li>理解应付和预收</li>
<li>应付：【先用货，后给钱】，牛！</li>
<li>预收：【先收钱，后发货】，牛！<blockquote>
<p>【应付+预收】是指我们占用别人的钱<br><img src="https://img-blog.csdnimg.cn/20210111213927531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="应付预收"><br>【应付预收】减去【应收预付】，可以看出这个企业的竞争力如何！⭐相减得出金额越大，说明公司的竞争力越强。⭐相减得出金额越小，竞争力越弱。</p>
</blockquote>
</li>
<li>【安全性】通过资产负债率来判断 </li>
<li>【竞争力】通过应付预收减去应收预付的大小来判断<blockquote>
<p>查看上市公司财报：<a href="http://www.cninfo.com.cn/new/index">http://www.cninfo.com.cn/new/index</a> （巨潮资讯网）</p>
</blockquote>
<ul>
<li>看财报步骤<br><img src="https://img-blog.csdnimg.cn/20210111223536842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="看财报步骤"><br><img src="https://img-blog.csdnimg.cn/20210111223848694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210111223930157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210111223950730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><blockquote>
<p>【成长有顺序，生活致富也有顺序】——先投资大脑，掌握理财的技能，然后再去生钱，负债不学习只会越来越穷。</p>
</blockquote>
</li>
<li>读懂财报的好处<blockquote>
<p>1.读懂财报可以让自己找工作的时候选到人均工资高的好公司，这样相同的时间努力可以获得更高的回报。<br>2.读懂财报可以更了解自己工作的公司，有利于升职加薪，做高管、做老板一定要能读懂财报才行。<br>3.读懂财报可以让自己找到更靠谱的伴侣，这个非常重要。<br>4.读懂财报可以让自己更了解家庭的财务状况，可以更有效的改善家庭的财务状况。<br>5.读懂财报可以让自己选出最好的生钱资产，通过好股票/好REITs会获得持续的现金流，会真正意义上实现拥有“会下金蛋的鹅”。</p>
</blockquote>
<h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><blockquote>
<p>【第一个重点】<br>通过财报看企业，用安全性和竞争力淘汰你手里的坏企业。<br>️【第二个重点】<br>中产与富人的关键区别在于是否能够识别生钱、耗钱、其他资产，并科学的持有他们。<br>️【第三个重点】<br>无产、中产、富人是可以相互转换的，学好理财技能就能由穷转成中产，由中产转成富人。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>【关键富人思维–第七条】<br>为什么月光、负债的人应该拿出一部分资金学习理财技能？<br>这里的负债主要指的是让自己的财务状况不断恶化的【坏负债】。<br>⭐️月光和负债只是不懂理财的结果，没有理财技能才是月光和负债的原因。很多人一方面不懂投资的骗局，一方面又眼红想赚一下，最终都入了骗局的“坑”，如果提前投资自己的大脑，难道还会犯这样的错误吗？还有很多人，本来钱就不多，贷款买了一堆耗钱资产，要么不断的刷信用卡、花呗、借呗，窟窿越来越大，要么生活拮据，每天人前风光，人后遭殃。<br>但对于投资自己，提升理财技能的好负债，他们却斤斤计较，错失了复利的好机会，这样的人生活只会越来越难过。<br>【成长有顺序，生活致富也有顺序】——先投资大脑，掌握理财的技能，然后再去生钱，月光、负债不学习只会越来越穷。<br>一句话总结：月光、负债是财务病，病根是缺少理财技能，忽视病因、不治病根，坏支出、坏负债只会越来越严重。</p>
</blockquote>
<hr>
<h2 id="第五天：价值投资的奥秘"><a href="#第五天：价值投资的奥秘" class="headerlink" title="第五天：价值投资的奥秘"></a>第五天：价值投资的奥秘</h2><h3 id="早读《无论投不投资，你都是在投资》"><a href="#早读《无论投不投资，你都是在投资》" class="headerlink" title="早读《无论投不投资，你都是在投资》"></a>早读《无论投不投资，你都是在投资》</h3><ol>
<li>拥有第一笔钱的时候，就已经是开始了投资。</li>
<li>在法定货币时代，现金可以说是少有的100%确定亏损的资产。</li>
<li>有大量的研究证明，A股公司的长期年华回报率大约12%。如果我们满足于10%左右的回报，投资其实很简单：定投股票指数基金即可；如果想要获得年化20%甚至更高的回报，就需要学习股票和REITs投资了。</li>
<li>投资股票的本质是投资企业，通过【分析财报】和【分析企业】才能了解企业的内在价值，进而选出优质的好企业。</li>
<li>财报是看过去，过去看着还不错还是不够，还得看未来，未来通过企业分析来看。</li>
<li>只有主动改变自己的理财能力，才会改变现状，获得好的收益。</li>
<li>理财并不是一味的省钱，而是合理的支配钱，学会创造更多的钱。</li>
<li>建立富人思维，增值自己，学习理财技能；用技能分析，选出优质生钱资产（选出好股票、好REITs）;每月的收入拿出一部分投资，购买优质省钱资产，长期持有积累，利用复利发挥威力获得收益。<h3 id="午间防骗：炒外汇投资骗局"><a href="#午间防骗：炒外汇投资骗局" class="headerlink" title="午间防骗：炒外汇投资骗局"></a>午间防骗：炒外汇投资骗局</h3><h3 id="晚间学习-2"><a href="#晚间学习-2" class="headerlink" title="晚间学习"></a>晚间学习</h3></li>
<li>创办不了公司，可以通过分析投资好的上市公司，成为股东，也是实现财务自由的一个方式。<blockquote>
<p>中国的GDP为6.5%左右，中国股市的年化收益率一定是远大于6.5%的。<br>据统计：中国的GDP大概6.5%以上；中国所欲上市公司的平均年化收益率大概12%以上；中国好公司的平均年化收益率24%以上。<br>买到了好企业，股价跌的越多，你的收益就越高！？</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>⭐定投优质股票指数基金大概可以获得年化10%以上的回报。<br>⭐而想要获得年化20%甚至更高的回报，就需要好好学习股票和REITs的投资了。</p>
</blockquote>
<ol start="2">
<li>【生钱资产类型的股票】就是持续分红的股票，每年分红收益率越高越优质。</li>
<li>.认识股票。</li>
</ol>
<ul>
<li>简单来说，股票是一个凭证，证明你拥有某一家公司的股份，即股票是股份的凭证。股票的本质是企业。</li>
<li>何为股份？    股份就是你对某家公司拥有的所有权。<blockquote>
<p>中国A股市场有两大交易所，分别为上交所和深交所。<br>A股就是以人民币交易的，在大陆上市的公司。<br>A股交易时间：每周一到周五，早上九点半到十一点半，下午一点到三点，周末休市。</p>
</blockquote>
</li>
</ul>
<ol start="4">
<li>投资好公司的股票赚的是什么钱？</li>
</ol>
<ul>
<li>公司持续的现金分红；</li>
<li>股票价格上涨带来的价差收益。</li>
</ul>
<blockquote>
<p>股价下跌并不一定是风险，利润减少才是风险。<br>5. 为什么【好公司的股票】越跌收益反而越大呢？？？<br>首先，好公司的盈利是持续的，所以分红也是持续的，并不是一会儿分，一会儿不分；好公司定期会拿出净利润的30%到70%分红，这就是你的持续现金流入，也就是非工资收入。（生钱资产的定义是【持续的现金流入】）。好公司股价越跌，它的公家就变得越低，这时你可以那这分红的钱再以较低的股价买入更多的股票，此时你得到的股票数量也越多，而分红是按照你持有的股票数量分的<br>6. 公司的【市值】反映了市场在某个时期对这个公司的看法，也就是股价的表现；公司【价值】就是这个公司到底值多少钱，和公司利润相关。</p>
</blockquote>
<blockquote>
<p>【关键富人思维-第八条】<br>⭐股票价格大跌能跌出什么？<br>我们【投资股票正确的方法】可以分为两大步：<br>第一步：选出内在价值高的好企业<br>第二步：在好的价格及时买入<br>这两步是不能颠倒的。<br>【当股市的价格出现下跌时】，好企业代表的好股票会出现好的买入价格，但是坏企业会跌出让投机者眼红的“陷阱”。如果在选择企业这一步错了，不管是多便宜的价格都徒劳无功，反而损失惨重。<br>【理性的投资者】对自己无法预测股票价格有自知之明，因为价格的波动总是难以预测的，因此他们将主要精力放在好企业的选择上，当好价格出现的时候果断出手，而后不管是继续跌还是涨，都是任凭风浪起稳坐钓鱼船。他们一般很少看股票，却获得了很高的收益。<br>一句话总结：股票大跌既有机会也有陷阱，机会的识别需要眼力，机会的把握需要技能，当眼力和技能配不上这个机会的时候，往往会步入陷阱之中。</p>
</blockquote>
<h2 id="第六天"><a href="#第六天" class="headerlink" title="第六天"></a>第六天</h2><h3 id="早间阅读"><a href="#早间阅读" class="headerlink" title="早间阅读"></a>早间阅读</h3><blockquote>
<p>做父母的，给孩子设立一个成长账户，分两部分：<br>一部分是孩子成长储备的钱；一部分是孩子提高财商用的钱。</p>
</blockquote>
<blockquote>
<p>思维一：明白不做什么比明白要做什么更重要；<br>思维二：少犯错，更不要做可能让自己一无所有的事</p>
</blockquote>
<ol>
<li>轻资产:可以理解为资源、时间、技术、知识、服务，也可以理解成无形资产，一种运营模式。</li>
<li>重资产：有形资产，土地、厂房、设备等，需要较大资金投入，回报率低<h3 id="午间防骗"><a href="#午间防骗" class="headerlink" title="午间防骗"></a>午间防骗</h3></li>
</ol>
<p><strong>虚拟货币投资骗局</strong></p>
<h3 id="晚间学习：越了解企业，我就会越富有"><a href="#晚间学习：越了解企业，我就会越富有" class="headerlink" title="晚间学习：越了解企业，我就会越富有"></a>晚间学习：越了解企业，我就会越富有</h3><p><img src="https://img-blog.csdnimg.cn/20210113214336880.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="强大企业模型"></p>
<blockquote>
<p>上班者用企业分析模型看透工作，投资者用企业分析模型看透股票。</p>
</blockquote>
<blockquote>
<p>【关键富人思维第十条】<br>为什么工作者、投资者都需要通晓企业分析技能？<br>⭐并不是创业者 、大老板才需要了解企业。<br>【投资中】，股票本质是企业，只有把9大要素都分析清楚，才能分析出好企业，才能给企业估值.<br>【工作中】，干工作的时候要有企业经营的思维，这样才更容易升职加薪。<br>⭐即便不为升职，干工作的时候也要有企业经营的思维。因为当你站在更高层去看自己的工作内容的时候你才能更好的理解自己的工作内容，这样你可以把工作做成老板真正想要的样子。<br>而那些只盯着自己的岗位的“井底之蛙”，有的时候挨了骂都不知道为什么，因为他缺乏跳出自己的框框看企业的技能，这就是他自己工作干不好的原因。<br>所以无论投资、工作，都需要通晓企业分析技能。<br>总结一句话：工作者用企业分析模型看透工作，投资者用企业分析模型看透股票。</p>
</blockquote>
<blockquote>
<p>从长期来说，一只股票的回报率跟公司的发展是环环相扣的，如果一家公司 40 年来的盈利一直是它资本的 6%（ROE），那在长期持有 40 年后，你的年均收益率不会和 6%有什么区别，即便你当初买的是便宜货。如果该公司在 20-30 年间盈利都是资本的 18%（ROE），即便你当初出价过高，回报依然会令你满意！<br>——查理•芒格</p>
</blockquote>
<blockquote>
<p><a href="http://www.iwencai.com/unifiedwap/home/index">http://www.iwencai.com/unifiedwap/home/index</a></p>
</blockquote>
<h2 id="了解REITS"><a href="#了解REITS" class="headerlink" title="了解REITS"></a>了解REITS</h2><ol>
<li>含义：REITs是一种依照法律程序成立的，以发行股票或基金单位的方式汇集投资者的资金，由专业机构进行房地产的经营管理，并将90%以上的税后收入净额分配给投资者的一种信托组织。简单说，REITs就是代理投资者投资房地产的上市企业，面临着系统的、严格的监管，这样更能保障中小投资者的利益。<br><img src="https://img-blog.csdnimg.cn/2021011420582171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="REITs定义"></li>
<li>优点</li>
</ol>
<ul>
<li>定期强制高分红。</li>
<li>投资门槛低。一般千元甚至更低就可以投。</li>
<li>交易成本低。一般REITs会免企业所得税。投资者买卖REITs只需要支付交易佣金，和买卖股票一样，不用支付其他高额税费。</li>
<li>流动性强。买卖REITs像买卖股票一样方便。在交易时间内随时可以卖掉。</li>
<li>专业化管理。REITs的管理团队都是房地产领域的专业人士。他们管理物业的能力一般会比个人强很多。</li>
<li>REITs收益率相对较高。<br><img src="https://img-blog.csdnimg.cn/20210114210401640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTAzNzA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ul>
<ol start="3">
<li>投资REITs收益来源<blockquote>
<p>一部分是【分红】带来的收益<br>一部分是资产【价格上涨】的收益</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>【关键富人思维第十一条】<br>为什么要自己掌握理财技能才是最可靠的？<br>很多之前学员都表示跟着自己的家人、朋友投资，当赚了的时候会特别感激对方，但是亏的了时候又怨恨对方不靠谱。其实他们的家人、朋友很多也真的是好心，但是他们没有掌握投资技能，靠着小道消息，本质是投机，赚了是运气好，长期亏损是必然。<br>理财投资这么重要的事情，如果交给别人，就像把自己的“财富之命”交给了别人，如果遇上的是一个没有扎实理财技能的人，那就对自己的“财富之命”太不负责了。因为缺乏理财技能的人，是根本拿不住好股票的，他们无法分析企业，就无法正确面对价格的波动，最终还是逃不过亏损的命运。<br>而听信银行经理的话，选择银行理财，长期看收益连通货膨胀的贬值都跑不赢。特别是【中产家庭】，与其听信他人的小道消息，【最可靠的】还是自己通过学习成为家庭资产理财师，为自己的家人打理财产，创造更多非工资收入，这才是最安全可靠的方法。<br>【一句话总结】：最重要的本事需要掌握在自己手中，就像企业要把核心竞争力掌握在自己的手中一样，理财——事关自己和家庭的财富之命，只有自己掌握了，才是对自己的负责。</p>
</blockquote>
<blockquote>
<p>【关键富人思维–第十二条】<br>我们最应该为孩子留下什么财富呢？<br>我们总想为孩子留下一笔钱、一套房等，这并没有错，但我们给孩子留下的最重要财富却不是金钱。如果给孩子留下了金钱，但孩子缺乏理财的意识和能力，金山也会吃空，正如我们前面讲到的前山西首富李兆会一样。<br>【聪明的父母】会选择在孩子很小的时候就开始正确的财商教育，让孩子从小就养成正确的金钱观，从很小的时候就享受理财能力带来的复利。而这都取决于【父母的理财能力】，如果父母对理财一无所知，或者学个半瓶水，看似明白实则跑偏，那么不仅教不好孩子，还会把孩子带到错误的认知方向。<br>【不要让孩子像我们父辈和自己走过的路一样】，那样又要陷入“无知”—“试错”—“损失”得穷人思维里，耗费大量的时间成本、试错成本，又错失了大量的机会成本。我们走错的路，就不要让孩子再走一遍了。<br>【一句话总结】：我们最应该留给孩子的财富是可贵的品格和可靠的理财能力，身教重于言教，用我们的行为带动孩子品格的养成，用我们的理财能力让孩子的财商有一个好基础</p>
</blockquote>
<blockquote>
<p><strong>投资步骤</strong><br>①理财的底层逻辑、富人思维<br>②股票的海选<br>③精选出好公司<br>④财报分析<br>⑤企业分析<br>⑥计算好价格<br>⑦制定买进标准<br>⑧制定持有标准<br>⑨制定卖出标准等</p>
</blockquote>
]]></content>
      <tags>
        <tag>理财</tag>
      </tags>
  </entry>
</search>
